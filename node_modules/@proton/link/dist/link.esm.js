import { nameToId, SigningRequest, ResolvedSigningRequest, PlaceholderName, PlaceholderPermission } from '@proton/signing-request';
export { PlaceholderAuth, PlaceholderName, PlaceholderPermission } from '@proton/signing-request';
import { Serialize, Numeric, JsonRpc, Key } from '@proton/js';
import WebSocket from 'isomorphic-ws';
import zlib from 'pako';
import { v4 } from 'uuid';
import { Aes, privateToPublic, randomKey, PrivateKey } from 'eosjs-ecc';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

/**
 * Error that is thrown if a [[LinkTransport]] cancels a request.
 * @internal
 */
var CancelError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(CancelError, _Error);

  function CancelError(reason) {
    var _this;

    _this = _Error.call(this, "User canceled request " + (reason ? '(' + reason + ')' : '')) || this;
    _this.code = 'E_CANCEL';
    return _this;
  }

  return CancelError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error that is thrown if an identity request fails to verify.
 * @internal
 */

var IdentityError = /*#__PURE__*/function (_Error2) {
  _inheritsLoose(IdentityError, _Error2);

  function IdentityError(reason) {
    var _this2;

    _this2 = _Error2.call(this, "Unable to verify identity " + (reason ? '(' + reason + ')' : '')) || this;
    _this2.code = 'E_IDENTITY';
    return _this2;
  }

  return IdentityError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error originating from a [[LinkSession]].
 * @internal
 */

var SessionError = /*#__PURE__*/function (_Error3) {
  _inheritsLoose(SessionError, _Error3);

  function SessionError(reason, code) {
    var _this3;

    _this3 = _Error3.call(this, reason) || this;
    _this3.code = code;
    return _this3;
  }

  return SessionError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

/** @internal */
var defaults = {
  chainId: '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0',
  rpc: 'https://proton.greymass.com',
  service: 'https://cb.anchor.link'
};

var linkAbi = {
  version: 'eosio::abi/1.1',
  types: [],
  structs: [{
    name: 'sealed_message',
    base: '',
    fields: [{
      name: 'from',
      type: 'public_key'
    }, {
      name: 'nonce',
      type: 'uint64'
    }, {
      name: 'ciphertext',
      type: 'bytes'
    }, {
      name: 'checksum',
      type: 'uint32'
    }]
  }, {
    name: 'link_create',
    base: '',
    fields: [{
      name: 'session_name',
      type: 'name'
    }, {
      name: 'request_key',
      type: 'public_key'
    }]
  }, {
    name: 'link_info',
    base: '',
    fields: [{
      name: 'expiration',
      type: 'time_point_sec'
    }]
  }],
  actions: [],
  ricardian_clauses: [],
  error_messages: [],
  tables: [],
  abi_extensions: []
};

/** @internal */

var types = /*#__PURE__*/Serialize.getTypesFromAbi( /*#__PURE__*/Serialize.createInitialTypes(), linkAbi);
/**
 * Helper to ABI encode value
 * @internal
 */

function abiEncode(value, typeName) {
  var type = types.get(typeName);

  if (!type) {
    throw new Error("No such type: " + typeName);
  }

  var buf = new Serialize.SerialBuffer();
  type.serialize(buf, value);
  return buf.asUint8Array();
}
/**
 * Encrypt a message using AES and shared secret derived from given keys.
 * @internal
 */

function sealMessage(message, privateKey, publicKey) {
  var res = Aes.encrypt(privateKey, publicKey, message);
  var data = {
    from: privateToPublic(privateKey),
    nonce: res.nonce.toString(),
    ciphertext: res.message,
    checksum: res.checksum
  };
  return abiEncode(data, 'sealed_message');
}
/**
 * Ensure public key is in new PUB_ format.
 * @internal
 */

function normalizePublicKey(key) {
  if (key.startsWith('PUB_')) {
    return key;
  }

  return Numeric.publicKeyToString(Numeric.stringToPublicKey('EOS' + key.substr(-50)));
}
/**
 * Return true if given public keys are equal.
 * @internal
 */

function publicKeyEqual(keyA, keyB) {
  return normalizePublicKey(keyA) === normalizePublicKey(keyB);
}
/**
 * Generate a random private key.
 * Uses browser crypto if available, otherwise falls back to slow eosjs-ecc.
 * @internal
 */

function generatePrivateKey() {
  return _generatePrivateKey.apply(this, arguments);
}

function _generatePrivateKey() {
  _generatePrivateKey = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
    var data;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof window !== 'undefined' && window.crypto)) {
              _context.next = 6;
              break;
            }

            data = new Uint32Array(32);
            window.crypto.getRandomValues(data);
            return _context.abrupt("return", PrivateKey.fromBuffer(Buffer.from(data)).toString());

          case 6:
            _context.next = 8;
            return randomKey();

          case 8:
            return _context.abrupt("return", _context.sent);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _generatePrivateKey.apply(this, arguments);
}

/**
 * Type describing a link session that can create a eosjs compatible
 * signature provider and transact for a specific auth.
 */

var LinkSession = /*#__PURE__*/function () {
  function LinkSession() {}

  var _proto = LinkSession.prototype;

  /**
   * Convenience, remove this session from associated [[Link]] storage if set.
   * Equivalent to:
   * ```ts
   * session.link.removeSession(session.identifier, session.auth)
   * ```
   */
  _proto.remove =
  /*#__PURE__*/
  function () {
    var _remove = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.link.storage) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return this.link.removeSession(this.identifier, this.auth);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function remove() {
      return _remove.apply(this, arguments);
    }

    return remove;
  }()
  /** Restore a previously serialized session. */
  ;

  LinkSession.restore = function restore(link, data) {
    switch (data.type) {
      case 'channel':
        return new LinkChannelSession(link, data.data, data.metadata);

      case 'fallback':
        return new LinkFallbackSession(link, data.data, data.metadata);

      default:
        throw new Error('Unable to restore, session data invalid');
    }
  };

  return LinkSession;
}();
/**
 * Link session that pushes requests over a channel.
 * @internal
 */

var LinkChannelSession = /*#__PURE__*/function (_LinkSession) {
  _inheritsLoose(LinkChannelSession, _LinkSession);

  function LinkChannelSession(link, data, metadata) {
    var _this;

    _this = _LinkSession.call(this) || this;
    _this.type = 'channel';
    _this.timeout = 2 * 60 * 1000; // ms

    _this.link = link;
    _this.auth = data.auth;
    _this.publicKey = data.publicKey;
    _this.channel = data.channel;
    _this.identifier = data.identifier;

    _this.encrypt = function (request) {
      return sealMessage(request.encode(true, false), data.requestKey, data.channel.key);
    };

    _this.metadata = _extends({}, metadata || {}, {
      timeout: _this.timeout,
      name: _this.channel.name
    });

    _this.serialize = function () {
      return {
        type: 'channel',
        data: data,
        metadata: _this.metadata
      };
    };

    return _this;
  }

  var _proto2 = LinkChannelSession.prototype;

  _proto2.onSuccess = function onSuccess(request, result) {
    if (this.link.transport.onSuccess) {
      this.link.transport.onSuccess(request, result);
    }
  };

  _proto2.onFailure = function onFailure(request, error) {
    if (this.link.transport.onFailure) {
      this.link.transport.onFailure(request, error);
    }
  };

  _proto2.onRequest = function onRequest(request, cancel) {
    var info = {
      expiration: new Date(Date.now() + this.timeout).toISOString().slice(0, -1)
    };

    if (this.link.transport.onSessionRequest) {
      this.link.transport.onSessionRequest(this, request, cancel);
    }

    setTimeout(function () {
      cancel(new SessionError('Wallet did not respond in time', 'E_TIMEOUT'));
    }, this.timeout + 500);
    request.data.info.push({
      key: 'link',
      value: abiEncode(info, 'link_info')
    });
    fetch(this.channel.url, {
      method: 'POST',
      headers: {
        'X-Buoy-Wait': (this.timeout / 1000).toFixed(0),
        'Content-Type': "text/html",
        'Accept': "text/html"
      },
      body: this.encrypt(request)
    }).then(function (response) {
      if (response.status !== 200) {
        cancel(new SessionError('Unable to push message', 'E_DELIVERY'));
      }
    })["catch"](function (error) {
      cancel(new SessionError("Unable to reach link service (" + (error.message || String(error)) + ")", 'E_DELIVERY'));
    });
  };

  _proto2.prepare = function prepare(request) {
    if (this.link.transport.prepare) {
      return this.link.transport.prepare(request, this);
    }

    return Promise.resolve(request);
  };

  _proto2.showLoading = function showLoading() {
    if (this.link.transport.showLoading) {
      return this.link.transport.showLoading();
    }
  };

  _proto2.makeSignatureProvider = function makeSignatureProvider() {
    return this.link.makeSignatureProvider([this.publicKey], this);
  };

  _proto2.makeAuthorityProvider = function makeAuthorityProvider() {
    return this.link.makeAuthorityProvider();
  };

  _proto2.transact = function transact(args, options) {
    return this.link.transact(args, options, this);
  };

  return LinkChannelSession;
}(LinkSession);
/**
 * Link session that sends every request over the transport.
 * @internal
 */

var LinkFallbackSession = /*#__PURE__*/function (_LinkSession2) {
  _inheritsLoose(LinkFallbackSession, _LinkSession2);

  function LinkFallbackSession(link, data, metadata) {
    var _this2;

    _this2 = _LinkSession2.call(this) || this;
    _this2.type = 'fallback';
    _this2.link = link;
    _this2.auth = data.auth;
    _this2.publicKey = data.publicKey;
    _this2.metadata = metadata || {};
    _this2.identifier = data.identifier;

    _this2.serialize = function () {
      return {
        type: _this2.type,
        data: data,
        metadata: _this2.metadata
      };
    };

    return _this2;
  }

  var _proto3 = LinkFallbackSession.prototype;

  _proto3.onSuccess = function onSuccess(request, result) {
    if (this.link.transport.onSuccess) {
      this.link.transport.onSuccess(request, result);
    }
  };

  _proto3.onFailure = function onFailure(request, error) {
    if (this.link.transport.onFailure) {
      this.link.transport.onFailure(request, error);
    }
  };

  _proto3.onRequest = function onRequest(request, cancel) {
    if (this.link.transport.onSessionRequest) {
      this.link.transport.onSessionRequest(this, request, cancel);
    } else {
      this.link.transport.onRequest(request, cancel);
    }
  };

  _proto3.prepare = function prepare(request) {
    if (this.link.transport.prepare) {
      return this.link.transport.prepare(request, this);
    }

    return Promise.resolve(request);
  };

  _proto3.showLoading = function showLoading() {
    if (this.link.transport.showLoading) {
      return this.link.transport.showLoading();
    }
  };

  _proto3.makeSignatureProvider = function makeSignatureProvider() {
    return this.link.makeSignatureProvider([this.publicKey], this);
  };

  _proto3.makeAuthorityProvider = function makeAuthorityProvider() {
    return this.link.makeAuthorityProvider();
  };

  _proto3.transact = function transact(args, options) {
    return this.link.transact(args, options, this);
  };

  return LinkFallbackSession;
}(LinkSession);

/**
 * Main class, also exposed as the default export of the library.
 *
 * Example:
 *
 * ```ts
 * import AnchorLink from 'anchor-link'
 * import ConsoleTransport from 'anchor-link-console-transport'
 *
 * const link = new AnchorLink({
 *     transport: new ConsoleTransport()
 * })
 *
 * const result = await link.transact({actions: myActions})
 * ```
 */

var Link = /*#__PURE__*/function () {
  /** Create a new link instance. */
  function Link(options) {
    this.abiCache = new Map();
    this.pendingAbis = new Map();
    this.walletType = '';

    if (typeof options !== 'object') {
      throw new TypeError('Missing options object');
    }

    if (!options.transport) {
      throw new TypeError('options.transport is required, see https://github.com/greymass/anchor-link#transports');
    }

    if (options.rpc === undefined || typeof options.rpc === 'string') {
      this.rpc = new JsonRpc(options.rpc || defaults.rpc);
    } else {
      this.rpc = options.rpc;
    }

    if (options.chainId) {
      this.chainId = typeof options.chainId === 'number' ? nameToId(options.chainId) : options.chainId;
    } else {
      this.chainId = defaults.chainId;
    }

    this.serviceAddress = (options.service || defaults.service).trim().replace(/\/$/, '');
    this.transport = options.transport;

    if (options.storage !== null) {
      this.storage = options.storage;
    }

    this.requestOptions = {
      abiProvider: this,
      zlib: zlib,
      scheme: options.scheme
    };

    if (options.walletType && options.walletType.length > 0) {
      this.walletType = options.walletType || '';
    }
  }
  /**
   * Fetch the ABI for given account, cached.
   * @internal
   */


  var _proto = Link.prototype;

  _proto.getAbi =
  /*#__PURE__*/
  function () {
    var _getAbi = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(account) {
      var rv, _getAbi2;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              rv = this.abiCache.get(account);

              if (rv) {
                _context.next = 9;
                break;
              }

              _getAbi2 = this.pendingAbis.get(account);

              if (!_getAbi2) {
                _getAbi2 = this.rpc.get_abi(account);
                this.pendingAbis.set(account, _getAbi2);
              }

              _context.next = 6;
              return _getAbi2;

            case 6:
              rv = _context.sent.abi;
              this.pendingAbis["delete"](account);

              if (rv) {
                this.abiCache.set(account, rv);
              }

            case 9:
              return _context.abrupt("return", rv);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getAbi(_x) {
      return _getAbi.apply(this, arguments);
    }

    return getAbi;
  }()
  /**
   * Create a new unique buoy callback url.
   * @internal
   */
  ;

  _proto.createCallbackUrl = function createCallbackUrl() {
    return this.serviceAddress + "/" + v4();
  }
  /**
   * Create a SigningRequest instance configured for this link.
   * @internal
   */
  ;

  _proto.createRequest =
  /*#__PURE__*/
  function () {
    var _createRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(args, transport) {
      var t, request;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              t = transport || this.transport; // generate unique callback url

              _context2.next = 3;
              return SigningRequest.create(_extends({}, args, {
                chainId: this.chainId,
                broadcast: false,
                callback: {
                  url: this.createCallbackUrl(),
                  background: true
                }
              }), this.requestOptions);

            case 3:
              request = _context2.sent;

              if (!t.prepare) {
                _context2.next = 8;
                break;
              }

              _context2.next = 7;
              return t.prepare(request);

            case 7:
              request = _context2.sent;

            case 8:
              return _context2.abrupt("return", request);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function createRequest(_x2, _x3) {
      return _createRequest.apply(this, arguments);
    }

    return createRequest;
  }()
  /**
   * Send a SigningRequest instance using this link.
   * @internal
   */
  ;

  _proto.sendRequest =
  /*#__PURE__*/
  function () {
    var _sendRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(request, transport, broadcast) {
      var t, linkUrl, ctx, socket, cancel, payload, signer, signatures, resolved, info, serializedTransaction, transaction, result, res;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (broadcast === void 0) {
                broadcast = false;
              }

              t = transport || this.transport;
              _context3.prev = 2;
              linkUrl = request.data.callback;

              if (linkUrl.startsWith(this.serviceAddress)) {
                _context3.next = 6;
                break;
              }

              throw new Error('Request must have a link callback');

            case 6:
              if (!(request.data.flags !== 2)) {
                _context3.next = 8;
                break;
              }

              throw new Error('Invalid request flags');

            case 8:
              // wait for callback or user cancel
              ctx = {};
              socket = waitForCallback(linkUrl, ctx).then(function (data) {
                if (typeof data.rejected === 'string') {
                  throw new CancelError("Rejected by wallet: " + data.rejected);
                }

                return data;
              });
              cancel = new Promise(function (_, reject) {
                t.onRequest(request, function (reason) {
                  if (ctx.cancel) {
                    ctx.cancel();
                  }

                  if (typeof reason === 'string') {
                    reject(new CancelError(reason));
                  } else {
                    reject(reason);
                  }
                });
              });
              _context3.next = 13;
              return Promise.race([socket, cancel]);

            case 13:
              payload = _context3.sent;
              signer = {
                actor: payload.sa,
                permission: payload.sp
              };
              signatures = Object.keys(payload).filter(function (key) {
                return key.startsWith('sig') && key !== 'sig0';
              }).map(function (key) {
                return payload[key];
              }); // recreate transaction from request response

              _context3.next = 18;
              return ResolvedSigningRequest.fromPayload(payload, this.requestOptions);

            case 18:
              resolved = _context3.sent;
              info = resolved.request.getInfo();

              if (info['fuel_sig']) {
                signatures.unshift(info['fuel_sig']);
              }

              serializedTransaction = resolved.serializedTransaction, transaction = resolved.transaction;
              result = {
                request: resolved.request,
                serializedTransaction: serializedTransaction,
                transaction: transaction,
                signatures: signatures,
                payload: payload,
                signer: signer
              };

              if (!broadcast) {
                _context3.next = 28;
                break;
              }

              _context3.next = 26;
              return this.rpc.push_transaction({
                signatures: result.signatures,
                serializedTransaction: result.serializedTransaction
              });

            case 26:
              res = _context3.sent;
              result.processed = res.processed;

            case 28:
              if (!result.request.isIdentity()) {
                _context3.next = 31;
                break;
              }

              _context3.next = 31;
              return this.checkIdentity(result);

            case 31:
              if (t.onSuccess) {
                t.onSuccess(request, result);
              }

              return _context3.abrupt("return", result);

            case 35:
              _context3.prev = 35;
              _context3.t0 = _context3["catch"](2);

              if (t.onFailure) {
                t.onFailure(request, _context3.t0);
              }

              throw _context3.t0;

            case 39:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[2, 35]]);
    }));

    function sendRequest(_x4, _x5, _x6) {
      return _sendRequest.apply(this, arguments);
    }

    return sendRequest;
  }()
  /**
   * Sign and optionally broadcast a EOSIO transaction, action or actions.
   *
   * Example:
   *
   * ```ts
   * let result = await myLink.transact({transaction: myTx})
   * ```
   *
   * @param args The action, actions or transaction to use.
   * @param options Options for this transact call.
   * @param transport Transport override, for internal use.
   */
  ;

  _proto.transact =
  /*#__PURE__*/
  function () {
    var _transact = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(args, options, transport) {
      var t, broadcast, anyArgs, request, result;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              t = transport || this.transport;
              broadcast = options ? options.broadcast !== false : true; // Initialize the loading state of the transport

              if (t && t.showLoading) {
                t.showLoading();
              } // eosjs transact compat: upgrade to transaction if args have any header fields


              anyArgs = args;

              if (args.actions && (anyArgs.expiration || anyArgs.ref_block_num || anyArgs.ref_block_prefix || anyArgs.max_net_usage_words || anyArgs.max_cpu_usage_ms || anyArgs.delay_sec)) {
                args = {
                  transaction: _extends({
                    expiration: '1970-01-01T00:00:00',
                    ref_block_num: 0,
                    ref_block_prefix: 0,
                    max_net_usage_words: 0,
                    max_cpu_usage_ms: 0,
                    delay_sec: 0
                  }, anyArgs)
                };
              }

              _context4.next = 7;
              return this.createRequest(args, t);

            case 7:
              request = _context4.sent;
              _context4.next = 10;
              return this.sendRequest(request, t, broadcast);

            case 10:
              result = _context4.sent;
              return _context4.abrupt("return", result);

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function transact(_x7, _x8, _x9) {
      return _transact.apply(this, arguments);
    }

    return transact;
  }()
  /**
   * Send an identity request and verify the identity proof.
   * Errors thrown in this function will not be shown via the onFailure modal from browser transport, but will still be lifted up to the frontend
   * To catch these errors, place the ConnectWallet function call from @protonprotocal/proton-web-sdk into a try/catch block in the frontend
   * In the case of a thrown error in this function, the sendRequest will still show the onSuccess modal
   * @param requestPermission Optional request permission if the request is for a specific account or permission.
   * @param info Metadata to add to the request.
   * @note This is for advanced use-cases, you probably want to use [[Link.login]] instead.
   */
  ;

  _proto.identify =
  /*#__PURE__*/
  function () {
    var _identify = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(requestPermission, info) {
      var request, res, message, signer, signerKey, account;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.createRequest({
                identity: {
                  permission: requestPermission || null
                },
                info: info
              });

            case 2:
              request = _context5.sent;
              _context5.next = 5;
              return this.sendRequest(request);

            case 5:
              res = _context5.sent;

              if (res.request.isIdentity()) {
                _context5.next = 8;
                break;
              }

              throw new IdentityError("Unexpected response");

            case 8:
              message = Buffer.concat([Buffer.from(request.getChainId(), 'hex'), Buffer.from(res.serializedTransaction), Buffer.alloc(32)]);
              signer = res.signer;
              signerKey = Key.Signature.fromString(res.signatures[0]).recover(message).toLegacyString();
              _context5.next = 13;
              return this.rpc.get_account(signer.actor);

            case 13:
              account = _context5.sent;

              if (!requestPermission) {
                _context5.next = 17;
                break;
              }

              if (!(requestPermission.actor !== PlaceholderName && requestPermission.actor !== signer.actor || requestPermission.permission !== PlaceholderPermission && requestPermission.permission !== signer.permission)) {
                _context5.next = 17;
                break;
              }

              throw new IdentityError("Unexpected identity proof from " + formatAuth(signer) + ", expected " + formatAuth(requestPermission) + " ");

            case 17:
              return _context5.abrupt("return", _extends({}, res, {
                account: account,
                signerKey: signerKey
              }));

            case 18:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function identify(_x10, _x11) {
      return _identify.apply(this, arguments);
    }

    return identify;
  }()
  /**
   * The error checks in this function were taken out of Identify() to check for identity errors before onSuccess() is called in sendRequest()
   * Using this function in sendRequest will allow any identity errors checked here to be shown via the brower transport onFailure modal
   * @param res compliled result in sendRequest function
   */
  ;

  _proto.checkIdentity =
  /*#__PURE__*/
  function () {
    var _checkIdentity = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(res) {
      var request, message, signer, signerKey, account, permission, auth, keyAuth;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              request = res.request;
              message = Buffer.concat([Buffer.from(request.getChainId(), 'hex'), Buffer.from(res.serializedTransaction), Buffer.alloc(32)]);
              signer = res.signer;
              signerKey = Key.Signature.fromString(res.signatures[0]).recover(message).toLegacyString();
              _context6.next = 6;
              return this.rpc.get_account(signer.actor);

            case 6:
              account = _context6.sent;

              if (account) {
                _context6.next = 9;
                break;
              }

              throw new IdentityError("Signature from unknown account: " + signer.actor);

            case 9:
              permission = account.permissions.find(function (_ref) {
                var perm_name = _ref.perm_name;
                return perm_name === signer.permission;
              });

              if (permission) {
                _context6.next = 12;
                break;
              }

              throw new IdentityError(signer.actor + " signed for unknown permission: " + signer.permission);

            case 12:
              auth = permission.required_auth;
              keyAuth = auth.keys.find(function (_ref2) {
                var key = _ref2.key;
                return publicKeyEqual(key, signerKey);
              });

              if (keyAuth) {
                _context6.next = 16;
                break;
              }

              throw new IdentityError(formatAuth(signer) + " has no key matching id signature");

            case 16:
              if (!(auth.threshold > keyAuth.weight)) {
                _context6.next = 18;
                break;
              }

              throw new IdentityError(formatAuth(signer) + " signature does not reach auth threshold");

            case 18:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function checkIdentity(_x12) {
      return _checkIdentity.apply(this, arguments);
    }

    return checkIdentity;
  }()
  /**
   * Login and create a persistent session.
   * @param identifier The session identifier, an EOSIO name (`[a-z1-5]{1,12}`).
   *                   Should be set to the contract account if applicable.
   */
  ;

  _proto.login =
  /*#__PURE__*/
  function () {
    var _login = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(identifier) {
      var privateKey, requestKey, createInfo, res, metadata, session, _yield$this$rpc$get_t, rows;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return generatePrivateKey();

            case 2:
              privateKey = _context7.sent;
              requestKey = Key.PrivateKey.fromString(privateKey).getPublicKey().toLegacyString();
              createInfo = {
                session_name: identifier,
                request_key: requestKey
              };
              _context7.next = 7;
              return this.identify(undefined, {
                link: abiEncode(createInfo, 'link_create')
              });

            case 7:
              res = _context7.sent;
              metadata = {
                sameDevice: res.request.getRawInfo()['return_path'] !== undefined
              };

              if (res.payload.link_ch && res.payload.link_key && res.payload.link_name) {
                session = new LinkChannelSession(this, {
                  identifier: identifier,
                  auth: res.signer,
                  publicKey: res.signerKey,
                  channel: {
                    url: res.payload.link_ch,
                    key: res.payload.link_key,
                    name: res.payload.link_name
                  },
                  requestKey: privateKey
                }, metadata);
              } else {
                session = new LinkFallbackSession(this, {
                  identifier: identifier,
                  auth: res.signer,
                  publicKey: res.signerKey
                }, metadata);
              }

              if (!this.storage) {
                _context7.next = 13;
                break;
              }

              _context7.next = 13;
              return this.storeSession(identifier, session);

            case 13:
              if (!session.auth.actor) {
                _context7.next = 22;
                break;
              }

              _context7.next = 16;
              return this.rpc.get_table_rows({
                scope: 'eosio.proton',
                code: 'eosio.proton',
                json: true,
                table: 'usersinfo',
                lower_bound: session.auth.actor,
                upper_bound: session.auth.actor
              });

            case 16:
              _yield$this$rpc$get_t = _context7.sent;
              rows = _yield$this$rpc$get_t.rows;

              if (!(rows && rows.length > 0)) {
                _context7.next = 22;
                break;
              }

              _context7.next = 21;
              return this.rpc.isLightKYCVerified(rows);

            case 21:
              session.accountData = _context7.sent;

            case 22:
              // once successfully logged in, set wallet type so restore session can work properly
              if (this.walletType.length > 0) {
                this.storage.write('wallet-type', this.walletType);
              }

              return _context7.abrupt("return", _extends({}, res, {
                session: session
              }));

            case 24:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function login(_x13) {
      return _login.apply(this, arguments);
    }

    return login;
  }()
  /**
   * Restore previous session, see [[Link.login]] to create a new session.
   * @param identifier The session identifier, should be same as what was used when creating the session with [[Link.login]].
   * @param auth A specific session auth to restore, if omitted the most recently used session will be restored.
   * @returns A [[LinkSession]] instance or null if no session can be found.
   * @throws If no [[LinkStorage]] adapter is configured or there was an error retrieving the session data.
   **/
  ;

  _proto.restoreSession =
  /*#__PURE__*/
  function () {
    var _restoreSession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(identifier, auth) {
      var key, latest, data, sessionData, session, _yield$this$rpc$get_t2, rows;

      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (this.storage) {
                _context8.next = 2;
                break;
              }

              throw new Error('Unable to restore session: No storage adapter configured');

            case 2:
              if (!auth) {
                _context8.next = 6;
                break;
              }

              key = this.sessionKey(identifier, formatAuth(auth));
              _context8.next = 12;
              break;

            case 6:
              _context8.next = 8;
              return this.listSessions(identifier);

            case 8:
              latest = _context8.sent[0];

              if (latest) {
                _context8.next = 11;
                break;
              }

              return _context8.abrupt("return", null);

            case 11:
              key = this.sessionKey(identifier, formatAuth(latest));

            case 12:
              _context8.next = 14;
              return this.storage.read(key);

            case 14:
              data = _context8.sent;

              if (data) {
                _context8.next = 17;
                break;
              }

              return _context8.abrupt("return", null);

            case 17:
              _context8.prev = 17;
              sessionData = JSON.parse(data);
              _context8.next = 24;
              break;

            case 21:
              _context8.prev = 21;
              _context8.t0 = _context8["catch"](17);
              throw new Error("Unable to restore session: Stored JSON invalid (" + (_context8.t0.message || String(_context8.t0)) + ")");

            case 24:
              session = LinkSession.restore(this, sessionData);

              if (!auth) {
                _context8.next = 28;
                break;
              }

              _context8.next = 28;
              return this.touchSession(identifier, auth);

            case 28:
              if (!session.auth.actor) {
                _context8.next = 37;
                break;
              }

              _context8.next = 31;
              return this.rpc.get_table_rows({
                scope: 'eosio.proton',
                code: 'eosio.proton',
                json: true,
                table: 'usersinfo',
                lower_bound: session.auth.actor,
                upper_bound: session.auth.actor
              });

            case 31:
              _yield$this$rpc$get_t2 = _context8.sent;
              rows = _yield$this$rpc$get_t2.rows;

              if (!(rows && rows.length > 0)) {
                _context8.next = 37;
                break;
              }

              _context8.next = 36;
              return this.rpc.isLightKYCVerified(rows);

            case 36:
              session.accountData = _context8.sent;

            case 37:
              return _context8.abrupt("return", session);

            case 38:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[17, 21]]);
    }));

    function restoreSession(_x14, _x15) {
      return _restoreSession.apply(this, arguments);
    }

    return restoreSession;
  }()
  /**
   * List stored session auths for given identifier.
   * The most recently used session is at the top (index 0).
   * @throws If no [[LinkStorage]] adapter is configured or there was an error retrieving the session list.
   **/
  ;

  _proto.listSessions =
  /*#__PURE__*/
  function () {
    var _listSessions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(identifier) {
      var key, list;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (this.storage) {
                _context9.next = 2;
                break;
              }

              throw new Error('Unable to list sessions: No storage adapter configured');

            case 2:
              key = this.sessionKey(identifier, 'list');
              _context9.prev = 3;
              _context9.t0 = JSON;
              _context9.next = 7;
              return this.storage.read(key);

            case 7:
              _context9.t1 = _context9.sent;

              if (_context9.t1) {
                _context9.next = 10;
                break;
              }

              _context9.t1 = '[]';

            case 10:
              _context9.t2 = _context9.t1;
              list = _context9.t0.parse.call(_context9.t0, _context9.t2);
              _context9.next = 17;
              break;

            case 14:
              _context9.prev = 14;
              _context9.t3 = _context9["catch"](3);
              throw new Error("Unable to list sessions: Stored JSON invalid (" + (_context9.t3.message || String(_context9.t3)) + ")");

            case 17:
              return _context9.abrupt("return", list);

            case 18:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[3, 14]]);
    }));

    function listSessions(_x16) {
      return _listSessions.apply(this, arguments);
    }

    return listSessions;
  }()
  /**
   * Remove stored session for given identifier and auth.
   * @throws If no [[LinkStorage]] adapter is configured or there was an error removing the session data.
   */
  ;

  _proto.removeSession =
  /*#__PURE__*/
  function () {
    var _removeSession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(identifier, auth) {
      var key;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (this.storage) {
                _context10.next = 2;
                break;
              }

              throw new Error('Unable to remove session: No storage adapter configured');

            case 2:
              key = this.sessionKey(identifier, formatAuth(auth));
              _context10.next = 5;
              return this.storage.remove(key);

            case 5:
              _context10.next = 7;
              return this.touchSession(identifier, auth, true);

            case 7:
              _context10.next = 9;
              return this.storage.read('wallet-type');

            case 9:
              if (!_context10.sent) {
                _context10.next = 11;
                break;
              }

              this.storage.remove('wallet-type');

            case 11:
              _context10.next = 13;
              return this.storage.read('user-auth');

            case 13:
              if (!_context10.sent) {
                _context10.next = 15;
                break;
              }

              this.storage.remove('user-auth');

            case 15:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function removeSession(_x17, _x18) {
      return _removeSession.apply(this, arguments);
    }

    return removeSession;
  }()
  /**
   * Remove all stored sessions for given identifier.
   * @throws If no [[LinkStorage]] adapter is configured or there was an error removing the session data.
   */
  ;

  _proto.clearSessions =
  /*#__PURE__*/
  function () {
    var _clearSessions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(identifier) {
      var _iterator, _step, auth;

      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (this.storage) {
                _context11.next = 2;
                break;
              }

              throw new Error('Unable to clear sessions: No storage adapter configured');

            case 2:
              _context11.t0 = _createForOfIteratorHelperLoose;
              _context11.next = 5;
              return this.listSessions(identifier);

            case 5:
              _context11.t1 = _context11.sent;
              _iterator = (0, _context11.t0)(_context11.t1);

            case 7:
              if ((_step = _iterator()).done) {
                _context11.next = 13;
                break;
              }

              auth = _step.value;
              _context11.next = 11;
              return this.removeSession(identifier, auth);

            case 11:
              _context11.next = 7;
              break;

            case 13:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function clearSessions(_x19) {
      return _clearSessions.apply(this, arguments);
    }

    return clearSessions;
  }()
  /**
   * Create an eosjs compatible signature provider using this link.
   * @param availableKeys Keys the created provider will claim to be able to sign for.
   * @param transport (internal) Transport override for this call.
   * @note We don't know what keys are available so those have to be provided,
   *       to avoid this use [[LinkSession.makeSignatureProvider]] instead. Sessions can be created with [[Link.login]].
   */
  ;

  _proto.makeSignatureProvider = function makeSignatureProvider(availableKeys, transport) {
    var _this = this;

    return {
      getAvailableKeys: function () {
        var _getAvailableKeys = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
          return runtime_1.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  return _context12.abrupt("return", availableKeys);

                case 1:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));

        function getAvailableKeys() {
          return _getAvailableKeys.apply(this, arguments);
        }

        return getAvailableKeys;
      }(),
      sign: function () {
        var _sign = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(args) {
          var t, request, _yield$_this$sendRequ, serializedTransaction, signatures;

          return runtime_1.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  t = transport || _this.transport;
                  request = SigningRequest.fromTransaction(args.chainId, args.serializedTransaction, _this.requestOptions);
                  request.setCallback(_this.createCallbackUrl(), true);
                  request.setBroadcast(false);

                  if (!t.prepare) {
                    _context13.next = 8;
                    break;
                  }

                  _context13.next = 7;
                  return t.prepare(request);

                case 7:
                  request = _context13.sent;

                case 8:
                  _context13.next = 10;
                  return _this.sendRequest(request, t);

                case 10:
                  _yield$_this$sendRequ = _context13.sent;
                  serializedTransaction = _yield$_this$sendRequ.serializedTransaction;
                  signatures = _yield$_this$sendRequ.signatures;
                  return _context13.abrupt("return", _extends({}, args, {
                    serializedTransaction: serializedTransaction,
                    signatures: signatures
                  }));

                case 14:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13);
        }));

        function sign(_x20) {
          return _sign.apply(this, arguments);
        }

        return sign;
      }()
    };
  }
  /**
   * Create an eosjs authority provider using this link.
   * @note Uses the configured RPC Node's `/v1/chain/get_required_keys` API to resolve keys.
   */
  ;

  _proto.makeAuthorityProvider = function makeAuthorityProvider() {
    var rpc = this.rpc;
    return {
      getRequiredKeys: function getRequiredKeys(args) {
        return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
          var availableKeys, transaction, result;
          return runtime_1.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  availableKeys = args.availableKeys, transaction = args.transaction;
                  _context14.next = 3;
                  return rpc.post('/v1/chain/get_required_keys', {
                    transaction: transaction,
                    available_keys: availableKeys.map(normalizePublicKey)
                  });

                case 3:
                  result = _context14.sent;
                  return _context14.abrupt("return", result.required_keys.map(normalizePublicKey));

                case 5:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14);
        }))();
      }
    };
  }
  /** Makes sure session is in storage list of sessions and moves it to top (most recently used). */
  ;

  _proto.touchSession =
  /*#__PURE__*/
  function () {
    var _touchSession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(identifier, auth, remove) {
      var auths, formattedAuth, existing, key;
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (remove === void 0) {
                remove = false;
              }

              _context15.next = 3;
              return this.listSessions(identifier);

            case 3:
              auths = _context15.sent;
              formattedAuth = formatAuth(auth);
              existing = auths.findIndex(function (a) {
                return formatAuth(a) === formattedAuth;
              });

              if (existing >= 0) {
                auths.splice(existing, 1);
              }

              key = this.sessionKey(identifier, 'list');

              if (!(remove === true)) {
                _context15.next = 13;
                break;
              }

              _context15.next = 11;
              return this.storage.remove(key);

            case 11:
              _context15.next = 16;
              break;

            case 13:
              auths.unshift(auth);
              _context15.next = 16;
              return this.storage.write(key, JSON.stringify(auths));

            case 16:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function touchSession(_x21, _x22, _x23) {
      return _touchSession.apply(this, arguments);
    }

    return touchSession;
  }()
  /** Makes sure session is in storage list of sessions and moves it to top (most recently used). */
  ;

  _proto.storeSession =
  /*#__PURE__*/
  function () {
    var _storeSession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(identifier, session) {
      var key, data;
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              key = this.sessionKey(identifier, formatAuth(session.auth));
              data = JSON.stringify(session.serialize());
              _context16.next = 4;
              return this.storage.write(key, data);

            case 4:
              _context16.next = 6;
              return this.touchSession(identifier, session.auth);

            case 6:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function storeSession(_x24, _x25) {
      return _storeSession.apply(this, arguments);
    }

    return storeSession;
  }()
  /** Session storage key for identifier and suffix. */
  ;

  _proto.sessionKey = function sessionKey(identifier, suffix) {
    return [this.chainId, identifier, suffix].join('-');
  };

  return Link;
}();
/**
 * Connect to a WebSocket channel and wait for a message.
 * @internal
 */

function waitForCallback(url, ctx) {
  return new Promise(function (resolve, reject) {
    var active = true;
    var retries = 0;
    var socketUrl = url.replace(/^http/, 'ws');

    var handleResponse = function handleResponse(response) {
      try {
        resolve(JSON.parse(response));
      } catch (error) {
        error.message = 'Unable to parse callback JSON: ' + error.message;
        reject(error);
      }
    };

    var connect = function connect() {
      var socket = new WebSocket(socketUrl);

      ctx.cancel = function () {
        active = false;

        if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {
          socket.close();
        }
      };

      socket.onmessage = function (event) {
        active = false;

        if (socket.readyState === WebSocket.OPEN) {
          socket.close();
        }

        if (typeof Blob !== 'undefined' && event.data instanceof Blob) {
          var reader = new FileReader();

          reader.onload = function () {
            handleResponse(reader.result);
          };

          reader.onerror = function (error) {
            reject(error);
          };

          reader.readAsText(event.data);
        } else {
          if (typeof event.data === 'string') {
            handleResponse(event.data);
          } else if (event.data instanceof ArrayBuffer) {
            handleResponse(Buffer.from(event.data).toString());
          } else {
            handleResponse(event.data.toString());
          }
        }
      };

      socket.onopen = function () {
        retries = 0;
      };

      socket.onerror = function (_) {};

      socket.onclose = function (_) {
        if (active) {
          setTimeout(connect, backoff(retries++));
        }
      };
    };

    connect();
  });
}
/**
 * Exponential backoff function that caps off at 10s after 10 tries.
 * https://i.imgur.com/IrUDcJp.png
 * @internal
 */


function backoff(tries) {
  return Math.min(Math.pow(tries * 10, 2), 10 * 1000);
}
/**
 * Format a EOSIO permission level in the format `actor@permission` taking placeholders into consideration.
 * @internal
 */


function formatAuth(auth) {
  var actor = auth.actor,
      permission = auth.permission;

  if (actor === PlaceholderName) {
    actor = '<any>';
  }

  if (permission === PlaceholderName || permission === PlaceholderPermission) {
    permission = '<any>';
  }

  return actor + "@" + permission;
}

export default Link;
export { CancelError, IdentityError, Link, LinkChannelSession, LinkFallbackSession, LinkSession, SessionError };
//# sourceMappingURL=link.esm.js.map
