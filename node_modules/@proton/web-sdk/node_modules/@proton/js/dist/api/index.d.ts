import { AbiProvider, ActionSerializerType, AuthorityProvider, BinaryAbi, CachedAbi, ContextFreeGroupCallback, Query, QueryConfig, SignatureProvider, TransactConfig, TransactResult } from './types';
import { JsonRpc } from '../rpc';
import { Abi, PushTransactionArgs } from '../rpc/types';
import * as ser from './serialize';
export declare class Api {
    /** Issues RPC calls */
    rpc: JsonRpc;
    /** Get subset of `availableKeys` needed to meet authorities in a `transaction` */
    authorityProvider: AuthorityProvider;
    /** Supplies ABIs in raw form (binary) */
    abiProvider: AbiProvider;
    /** Signs transactions */
    signatureProvider?: SignatureProvider;
    /** Converts abi files between binary and structured form (`abi.abi.json`) */
    abiTypes: Map<string, ser.Type>;
    /** Converts transactions between binary and structured form (`transaction.abi.json`) */
    transactionTypes: Map<string, ser.Type>;
    /** Holds information needed to serialize contract actions */
    contracts: Map<string, ser.Contract>;
    /** Fetched abis */
    cachedAbis: Map<string, CachedAbi>;
    /**
     * @param args
     *    * `rpc`: Issues RPC calls
     *    * `authorityProvider`: Get public keys needed to meet authorities in a transaction
     *    * `abiProvider`: Supplies ABIs in raw form (binary)
     *    * `signatureProvider`: Signs transactions
     */
    constructor(args: {
        rpc: JsonRpc;
        authorityProvider?: AuthorityProvider;
        abiProvider?: AbiProvider;
        signatureProvider?: SignatureProvider;
    });
    /** Decodes an abi as Uint8Array into json. */
    rawAbiToJson(rawAbi: Uint8Array): Abi;
    /** Encodes a json abi as Uint8Array. */
    jsonToRawAbi(jsonAbi: Abi): Uint8Array;
    /** Get abi in both binary and structured forms. Fetch when needed. */
    getCachedAbi(accountName: string, reload?: boolean): Promise<CachedAbi>;
    /** Get abi in structured form. Fetch when needed. */
    getAbi(accountName: string, reload?: boolean): Promise<Abi>;
    /** Get abis needed by a transaction */
    getTransactionAbis(transaction: any, reload?: boolean): Promise<BinaryAbi[]>;
    /** Get data needed to serialize actions in a contract */
    getContract(accountName: string, reload?: boolean): Promise<ser.Contract>;
    /** Convert `value` to binary form. `type` must be a built-in abi type or in `transaction.abi.json`. */
    serialize(buffer: ser.SerialBuffer, type: string, value: any): void;
    /** Convert data in `buffer` to structured form. `type` must be a built-in abi type or in `transaction.abi.json`. */
    deserialize(buffer: ser.SerialBuffer, type: string): any;
    /** Convert a transaction to binary */
    serializeTransaction(transaction: any): Uint8Array;
    /** Serialize context-free data */
    serializeContextFreeData(contextFreeData: Uint8Array[]): Uint8Array | undefined;
    /** Convert a transaction from binary. Leaves actions in hex. */
    deserializeTransaction(transaction: Uint8Array): any;
    /** Convert actions to hex */
    serializeActions(actions: ser.Action[]): Promise<ser.SerializedAction[]>;
    /** Convert actions from hex */
    deserializeActions(actions: ser.Action[]): Promise<ser.Action[]>;
    deserializeActionsSync(actions: ser.Action[]): Promise<ser.Action[]>;
    /** Convert a transaction from binary. Also deserializes actions. */
    deserializeTransactionWithActions(transaction: Uint8Array | string): Promise<any>;
    /** Deflate a serialized object */
    deflateSerializedArray(serializedArray: Uint8Array): Uint8Array;
    /** Inflate a compressed serialized object */
    inflateSerializedArray(compressedSerializedArray: Uint8Array): Uint8Array;
    /**
     * Create and optionally broadcast a transaction.
     *
     * Named Parameters:
     *    * `broadcast`: broadcast this transaction?
     *    * `sign`: sign this transaction?
     *    * `compression`: compress this transaction?
     *    * If both `blocksBehind` and `expireSeconds` are present,
     *      then fetch the block which is `blocksBehind` behind head block,
     *      use it as a reference for TAPoS, and expire the transaction
     *      `expireSeconds` after that block's time.
     *    * If both `useLastIrreversible` and `expireSeconds` are present,
     *      then fetch the last irreversible block, use it as a reference for TAPoS,
     *      and expire the transaction `expireSeconds` after that block's time.
     *
     * @returns node response if `broadcast`, `{signatures, serializedTransaction}` if `!broadcast`
     */
    transact(transaction: any, { broadcast, sign, compression, blocksBehind, useLastIrreversible, expireSeconds, requiredKeys, // When you will sign later
    transactionHeader }?: TransactConfig): Promise<any>;
    transactWithDelay(transaction: any, params: TransactConfig | undefined, delay: number): Promise<any>;
    query(account: string, short: boolean, query: Query, { sign, requiredKeys, authorization }: QueryConfig): Promise<any>;
    /** Broadcast a signed transaction */
    pushSignedTransaction({ signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs): Promise<TransactResult>;
    pushCompressedSignedTransaction({ signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs): Promise<TransactResult>;
    private generateTapos;
    private hasRequiredTaposFields;
    private tryGetBlockHeaderState;
    private tryGetBlockInfo;
    private tryRefBlockFromGetInfo;
    with(accountName: string): ActionBuilder;
    buildTransaction(cb?: (tx: TransactionBuilder) => void): void | TransactionBuilder;
    getAccountKeys(actor: string, permission: string): Promise<any>;
    checkIfKeysMatchTransaction({ actor, permission, transaction, signatures, chainId }: {
        actor: string;
        permission: string;
        transaction: any;
        signatures: string[];
        chainId?: string;
    }): Promise<any>;
}
export declare class TransactionBuilder {
    private api;
    private actions;
    private contextFreeGroups;
    constructor(api: Api);
    with(accountName: string): ActionBuilder;
    associateContextFree(contextFreeGroup: ContextFreeGroupCallback): this;
    send(config?: TransactConfig): Promise<PushTransactionArgs | TransactResult>;
}
export declare class ActionBuilder {
    private api;
    private readonly accountName;
    serializedData: ser.SerializedAction | undefined;
    constructor(api: Api, accountName: string);
    as(actorName?: string | ser.Authorization[]): ActionSerializerType;
}
