{"version":3,"file":"js.esm.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/api/numeric.ts","../src/api/serialize.ts","../src/cryptography/conversions.ts","../src/cryptography/publicKey.ts","../src/cryptography/signature.ts","../src/cryptography/privateKey.ts","../src/cryptography/key.ts","../src/cryptography/jsSignatureProvider.ts","../src/api/transactionAbi.ts","../src/api/index.ts","../src/api/types.ts","../src/rpc/chain.ts","../src/rpc/history.ts","../src/rpc/db.ts","../src/rpc/types.ts","../src/rpc/proton/countryOptions.ts","../src/rpc/proton/kyc.ts","../src/rpc/proton/parsers.ts","../src/rpc/proton/metal.ts","../src/rpc/proton/otc.ts","../src/rpc/proton/wrap.ts","../src/rpc/tables.ts","../src/rpc/utils.ts","../src/rpc/pushTransaction.ts","../src/rpc/abiCode.ts","../src/rpc/error.ts","../src/rpc/index.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/**\n * @module Numeric\n */\nimport { sha256 } from 'hash.js';\nimport RIPEMD160 from 'ripemd-ts'\nimport * as bs58 from 'bs58'\n\nconst ripemd160 = RIPEMD160.hash as (a: Uint8Array) => ArrayBuffer;\nconst base58Chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nconst create_base58_map = () => {\n    const base58M = Array(256).fill(-1) as number[];\n    for (let i = 0; i < base58Chars.length; ++i) {\n        base58M[base58Chars.charCodeAt(i)] = i;\n    }\n    return base58M;\n};\n\nconst base58Map = create_base58_map();\n\nconst create_base64_map = () => {\n    const base64M = Array(256).fill(-1) as number[];\n    for (let i = 0; i < base64Chars.length; ++i) {\n        base64M[base64Chars.charCodeAt(i)] = i;\n    }\n    base64M['='.charCodeAt(0)] = 0;\n    return base64M;\n};\n\nconst base64Map = create_base64_map();\n\n/** Is `bignum` a negative number? */\nexport const isNegative = (bignum: Uint8Array) => {\n    return (bignum[bignum.length - 1] & 0x80) !== 0;\n};\n\n/** Negate `bignum` */\nexport const negate = (bignum: Uint8Array) => {\n    let carry = 1;\n    for (let i = 0; i < bignum.length; ++i) {\n        const x = (~bignum[i] & 0xff) + carry;\n        bignum[i] = x;\n        carry = x >> 8;\n    }\n};\n\n/**\n * Convert an unsigned decimal number in `s` to a bignum\n *\n * @param size bignum size (bytes)\n */\nexport const decimalToBinary = (size: number, s: string) => {\n    const result = new Uint8Array(size);\n    for (let i = 0; i < s.length; ++i) {\n        const srcDigit = s.charCodeAt(i);\n        if (srcDigit < '0'.charCodeAt(0) || srcDigit > '9'.charCodeAt(0)) {\n            throw new Error('invalid number');\n        }\n        let carry = srcDigit - '0'.charCodeAt(0);\n        for (let j = 0; j < size; ++j) {\n            const x = result[j] * 10 + carry;\n            result[j] = x;\n            carry = x >> 8;\n        }\n        if (carry) {\n            throw new Error('number is out of range');\n        }\n    }\n    return result;\n};\n\n/**\n * Convert a signed decimal number in `s` to a bignum\n *\n * @param size bignum size (bytes)\n */\nexport const signedDecimalToBinary = (size: number, s: string) => {\n    const negative = s[0] === '-';\n    if (negative) {\n        s = s.substr(1);\n    }\n    const result = decimalToBinary(size, s);\n    if (negative) {\n        negate(result);\n        if (!isNegative(result)) {\n            throw new Error('number is out of range');\n        }\n    } else if (isNegative(result)) {\n        throw new Error('number is out of range');\n    }\n    return result;\n};\n\n/**\n * Convert `bignum` to an unsigned decimal number\n *\n * @param minDigits 0-pad result to this many digits\n */\nexport const binaryToDecimal = (bignum: Uint8Array, minDigits = 1) => {\n    const result = Array(minDigits).fill('0'.charCodeAt(0)) as number[];\n    for (let i = bignum.length - 1; i >= 0; --i) {\n        let carry = bignum[i];\n        for (let j = 0; j < result.length; ++j) {\n            const x = ((result[j] - '0'.charCodeAt(0)) << 8) + carry;\n            result[j] = '0'.charCodeAt(0) + x % 10;\n            carry = (x / 10) | 0;\n        }\n        while (carry) {\n            result.push('0'.charCodeAt(0) + carry % 10);\n            carry = (carry / 10) | 0;\n        }\n    }\n    result.reverse();\n    return String.fromCharCode(...result);\n};\n\n/**\n * Convert `bignum` to a signed decimal number\n *\n * @param minDigits 0-pad result to this many digits\n */\nexport const signedBinaryToDecimal = (bignum: Uint8Array, minDigits = 1) => {\n    if (isNegative(bignum)) {\n        const x = bignum.slice();\n        negate(x);\n        return '-' + binaryToDecimal(x, minDigits);\n    }\n    return binaryToDecimal(bignum, minDigits);\n};\n\nconst base58ToBinaryVarSize = (s: string) => {\n    const result = [] as number[];\n    for (let i = 0; i < s.length; ++i) {\n        let carry = base58Map[s.charCodeAt(i)];\n        if (carry < 0) {\n            throw new Error('invalid base-58 value');\n        }\n        for (let j = 0; j < result.length; ++j) {\n            const x = result[j] * 58 + carry;\n            result[j] = x & 0xff;\n            carry = x >> 8;\n        }\n        if (carry) {\n            result.push(carry);\n        }\n    }\n    for (const ch of s) {\n        if (ch === '1') {\n            result.push(0);\n        } else {\n            break;\n        }\n    }\n    result.reverse();\n    return new Uint8Array(result);\n};\n\n/**\n * Convert an unsigned base-58 number in `s` to a bignum\n *\n * @param size bignum size (bytes)\n */\nexport const base58ToBinary = (size: number, s: string) => {\n    if (!size) {\n        return base58ToBinaryVarSize(s);\n    }\n    const result = new Uint8Array(size);\n    for (let i = 0; i < s.length; ++i) {\n        let carry = base58Map[s.charCodeAt(i)];\n        if (carry < 0) {\n            throw new Error('invalid base-58 value');\n        }\n        for (let j = 0; j < size; ++j) {\n            const x = result[j] * 58 + carry;\n            result[j] = x;\n            carry = x >> 8;\n        }\n        if (carry) {\n            throw new Error('base-58 value is out of range');\n        }\n    }\n    result.reverse();\n    return result;\n};\n\n/**\n * Convert `bignum` to a base-58 number\n *\n * @param minDigits 0-pad result to this many digits\n */\nexport const binaryToBase58 = (bignum: Uint8Array) => {\n    const result = [] as number[];\n    for (const byte of bignum) {\n        let carry = byte;\n        for (let j = 0; j < result.length; ++j) {\n            const x = (base58Map[result[j]] << 8) + carry;\n            result[j] = base58Chars.charCodeAt(x % 58);\n            carry = (x / 58) | 0;\n        }\n        while (carry) {\n            result.push(base58Chars.charCodeAt(carry % 58));\n            carry = (carry / 58) | 0;\n        }\n    }\n    for (const byte of bignum) {\n        if (byte) {\n            break;\n        } else {\n            result.push('1'.charCodeAt(0));\n        }\n    }\n    result.reverse();\n    return String.fromCharCode(...result);\n};\n\n/** Convert an unsigned base-64 number in `s` to a bignum */\nexport const base64ToBinary = (s: string) => {\n    let len = s.length;\n    if ((len & 3) === 1 && s[len - 1] === '=') {\n        len -= 1;\n    } // fc appends an extra '='\n    if ((len & 3) !== 0) {\n        throw new Error('base-64 value is not padded correctly');\n    }\n    const groups = len >> 2;\n    let bytes = groups * 3;\n    if (len > 0 && s[len - 1] === '=') {\n        if (s[len - 2] === '=') {\n            bytes -= 2;\n        } else {\n            bytes -= 1;\n        }\n    }\n    const result = new Uint8Array(bytes);\n\n    for (let group = 0; group < groups; ++group) {\n        const digit0 = base64Map[s.charCodeAt(group * 4 + 0)];\n        const digit1 = base64Map[s.charCodeAt(group * 4 + 1)];\n        const digit2 = base64Map[s.charCodeAt(group * 4 + 2)];\n        const digit3 = base64Map[s.charCodeAt(group * 4 + 3)];\n        result[group * 3 + 0] = (digit0 << 2) | (digit1 >> 4);\n        if (group * 3 + 1 < bytes) {\n            result[group * 3 + 1] = ((digit1 & 15) << 4) | (digit2 >> 2);\n        }\n        if (group * 3 + 2 < bytes) {\n            result[group * 3 + 2] = ((digit2 & 3) << 6) | digit3;\n        }\n    }\n    return result;\n};\n\n/** Key types this library supports */\nexport enum KeyType {\n    k1 = 0,\n    r1 = 1,\n    wa = 2,\n}\n\n/** Public key data size, excluding type field */\nexport const publicKeyDataSize = 33;\n\n/** Private key data size, excluding type field */\nexport const privateKeyDataSize = 32;\n\n/** Signature data size, excluding type field */\nexport const signatureDataSize = 65;\n\n/** Public key, private key, or signature in binary form */\nexport interface Key {\n    type: KeyType;\n    data: Uint8Array;\n}\n\nconst digestSuffixRipemd160 = (data: Uint8Array, suffix: string) => {\n    const d = new Uint8Array(data.length + suffix.length);\n    for (let i = 0; i < data.length; ++i) {\n        d[i] = data[i];\n    }\n    for (let i = 0; i < suffix.length; ++i) {\n        d[data.length + i] = suffix.charCodeAt(i);\n    }\n    return ripemd160(d);\n};\n\nconst stringToKey = (s: string, type: KeyType, size: number, suffix: string): Key => {\n    const whole = base58ToBinary(size ? size + 4 : 0, s);\n    const result = { type, data: new Uint8Array(whole.buffer, 0, whole.length - 4) };\n    const digest = new Uint8Array(digestSuffixRipemd160(result.data, suffix));\n    if (digest[0] !== whole[whole.length - 4] || digest[1] !== whole[whole.length - 3]\n        || digest[2] !== whole[whole.length - 2] || digest[3] !== whole[whole.length - 1]) {\n        throw new Error('checksum doesn\\'t match');\n    }\n    return result;\n};\n\nconst keyToString = (key: Key, suffix: string, prefix: string) => {\n    const digest = new Uint8Array(digestSuffixRipemd160(key.data, suffix));\n    const whole = new Uint8Array(key.data.length + 4);\n    for (let i = 0; i < key.data.length; ++i) {\n        whole[i] = key.data[i];\n    }\n    for (let i = 0; i < 4; ++i) {\n        whole[i + key.data.length] = digest[i];\n    }\n    return prefix + binaryToBase58(whole);\n};\n\n/** Convert key in `s` to binary form */\nexport const stringToPublicKey = (s: string, prefix = 'EOS'): Key => {\n    if (typeof s !== 'string') {\n        throw new Error('expected string containing public key');\n    }\n    if (s.substr(0, 3) === prefix) {\n        const whole = base58ToBinary(publicKeyDataSize + 4, s.substr(3));\n        const key = { type: KeyType.k1, data: new Uint8Array(publicKeyDataSize) };\n        for (let i = 0; i < publicKeyDataSize; ++i) {\n            key.data[i] = whole[i];\n        }\n        const digest = new Uint8Array(ripemd160(key.data));\n        if (digest[0] !== whole[publicKeyDataSize] || digest[1] !== whole[34]\n            || digest[2] !== whole[35] || digest[3] !== whole[36]) {\n            throw new Error('checksum doesn\\'t match');\n        }\n        return key;\n    } else if (s.substr(0, 7) === 'PUB_K1_') {\n        return stringToKey(s.substr(7), KeyType.k1, publicKeyDataSize, 'K1');\n    } else if (s.substr(0, 7) === 'PUB_R1_') {\n        return stringToKey(s.substr(7), KeyType.r1, publicKeyDataSize, 'R1');\n    } else if (s.substr(0, 7) === 'PUB_WA_') {\n        return stringToKey(s.substr(7), KeyType.wa, 0, 'WA');\n    } else {\n        throw new Error('unrecognized public key format');\n    }\n};\n\n/** Convert public `key` to legacy string (base-58) form */\nexport const publicKeyToLegacyString = (key: Key, prefix: string = 'EOS') => {\n    if (key.type === KeyType.k1 && key.data.length === publicKeyDataSize) {\n        return keyToString(key, '', prefix);\n    } else if (key.type === KeyType.r1 || key.type === KeyType.wa) {\n        throw new Error('Key format not supported in legacy conversion');\n    } else {\n        throw new Error('unrecognized public key format');\n    }\n};\n\n/** Convert `key` to string (base-58) form */\nexport const publicKeyToString = (key: Key) => {\n    if (key.type === KeyType.k1 && key.data.length === publicKeyDataSize) {\n        return keyToString(key, 'K1', 'PUB_K1_');\n    } else if (key.type === KeyType.r1 && key.data.length === publicKeyDataSize) {\n        return keyToString(key, 'R1', 'PUB_R1_');\n    } else if (key.type === KeyType.wa) {\n        return keyToString(key, 'WA', 'PUB_WA_');\n    } else {\n        throw new Error('unrecognized public key format');\n    }\n};\n\n/** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).\n * Leaves other formats untouched\n */\nexport const convertLegacyPublicKey = (s: string, prefix = 'EOS') => {\n    if (s.substr(0, 3) === prefix) {\n        return publicKeyToString(stringToPublicKey(s, prefix));\n    }\n    return s;\n};\n\n\nexport const convertK1ToLegacyPublicKey = (publicKey: string, prefix = 'EOS') => {\n    const K1_PREFIX = 'PUB_K1_'\n\n    if (publicKey.substr(0, K1_PREFIX.length) !== K1_PREFIX) {\n      return publicKey\n    }\n\n    const nonPrefixPublicKey = publicKey.substr(K1_PREFIX.length)\n    const bytesWithChecksum = bs58.decode(nonPrefixPublicKey)\n    const bytes = bytesWithChecksum.slice(0, bytesWithChecksum.length - 4)\n    const suffixBytes = Buffer.from(ripemd160(bytes)).slice(0, 4)\n    const binaryPublicKey = Buffer.from([...bytes, ...suffixBytes])\n    return `${prefix}${bs58.encode(binaryPublicKey)}`\n};\n\n/** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).\n * Leaves other formats untouched\n */\nexport const convertLegacyPublicKeys = (keys: string[], prefix = 'EOS') => {\n    return keys.map((key: string) => convertLegacyPublicKey(key, prefix));\n};\n\n/** Convert key in `s` to binary form */\nexport const stringToPrivateKey = (s: string): Key => {\n    if (typeof s !== 'string') {\n        throw new Error('expected string containing private key');\n    }\n    if (s.substr(0, 7) === 'PVT_R1_') {\n        return stringToKey(s.substr(7), KeyType.r1, privateKeyDataSize, 'R1');\n    } else if (s.substr(0, 7) === 'PVT_K1_') {\n        return stringToKey(s.substr(7), KeyType.k1, privateKeyDataSize, 'K1');\n    } else {\n        // todo: Verify checksum: sha256(sha256(key.data)).\n        //       Not critical since a bad key will fail to produce a\n        //       valid signature anyway.\n        const whole = base58ToBinary(privateKeyDataSize + 5, s);\n        const key = { type: KeyType.k1, data: new Uint8Array(privateKeyDataSize) };\n        if (whole[0] !== 0x80) {\n            throw new Error('unrecognized private key type');\n        }\n        for (let i = 0; i < privateKeyDataSize; ++i) {\n            key.data[i] = whole[i + 1];\n        }\n        return key;\n    }\n};\n\n/** Convert private `key` to legacy string (base-58) form */\nexport const privateKeyToLegacyString = (key: Key) => {\n    if (key.type === KeyType.k1 && key.data.length === privateKeyDataSize) {\n        const whole = [] as number[];\n        whole.push(128);\n        key.data.forEach((byte) => whole.push(byte));\n        const digest = new Uint8Array(\n            sha256().update(\n                sha256().update(whole).digest()\n            ).digest()\n        );\n\n        const result = new Uint8Array(privateKeyDataSize + 5);\n        for (let i = 0; i < whole.length; i++) {\n            result[i] = whole[i];\n        }\n        for (let i = 0; i < 4; i++) {\n            result[i + whole.length] = digest[i];\n        }\n        return binaryToBase58(result);\n    } else if (key.type === KeyType.r1 || key.type === KeyType.wa) {\n        throw new Error('Key format not supported in legacy conversion');\n    } else {\n        throw new Error('unrecognized public key format');\n    }\n};\n\n/** Convert `key` to string (base-58) form */\nexport const privateKeyToString = (key: Key) => {\n    if (key.type === KeyType.r1) {\n        return keyToString(key, 'R1', 'PVT_R1_');\n    } else if (key.type === KeyType.k1) {\n        return keyToString(key, 'K1', 'PVT_K1_');\n    } else {\n        throw new Error('unrecognized private key format');\n    }\n};\n\n/** Convert key in `s` to binary form */\nexport const stringToSignature = (s: string): Key => {\n    if (typeof s !== 'string') {\n        throw new Error('expected string containing signature');\n    }\n    if (s.substr(0, 7) === 'SIG_K1_') {\n        return stringToKey(s.substr(7), KeyType.k1, signatureDataSize, 'K1');\n    } else if (s.substr(0, 7) === 'SIG_R1_') {\n        return stringToKey(s.substr(7), KeyType.r1, signatureDataSize, 'R1');\n    } else if (s.substr(0, 7) === 'SIG_WA_') {\n        return stringToKey(s.substr(7), KeyType.wa, 0, 'WA');\n    } else {\n        throw new Error('unrecognized signature format');\n    }\n};\n\n/** Convert `signature` to string (base-58) form */\nexport const signatureToString = (signature: Key) => {\n    if (signature.type === KeyType.k1) {\n        return keyToString(signature, 'K1', 'SIG_K1_');\n    } else if (signature.type === KeyType.r1) {\n        return keyToString(signature, 'R1', 'SIG_R1_');\n    } else if (signature.type === KeyType.wa) {\n        return keyToString(signature, 'WA', 'SIG_WA_');\n    } else {\n        throw new Error('unrecognized signature format');\n    }\n};\n","/**\n * @module Serialize\n */\n/* eslint-disable max-classes-per-file */\n/* eslint-disable jsdoc/check-indentation */\n\nimport * as numeric from './numeric';\nimport { Abi, BlockTaposInfo } from '../rpc/types';\nimport { Query } from './types';\nimport 'fast-text-encoding';\n\n/** A field in an abi */\nexport interface Field {\n    /** Field name */\n    name: string;\n\n    /** Type name in string form */\n    typeName: string;\n\n    /** Type of the field */\n    type?: Type;\n}\n\n/** Options for serialize() and deserialize() */\nexport interface SerializerOptions {\n    bytesAsUint8Array?: boolean;\n}\n\n/** State for serialize() and deserialize() */\nexport class SerializerState {\n    public options: SerializerOptions;\n\n    /** Have any binary extensions been skipped? */\n    public skippedBinaryExtension = false;\n\n    constructor(options: SerializerOptions = {}) {\n        this.options = options;\n    }\n}\n\n\n/**\n * An Anyvar (non-short form) may be any of the following:\n *  * null\n *  * string\n *  * number\n *    * Caution: assumes number is int32. Use {type, value} form for other numeric types\n *  * an array of anyvar\n *  * {type, value}\n *      * type is a string matching one of the predefined types in anyvarDefs\n *      * value:\n *          * If type === 'any_object', then value is an object. The values within the object are anyvar.\n *          * If type === 'any_array', then value is an array of anyvar.\n *          * Else, value must be eosjs-compatible with the specified type (e.g. uint64 should be a string\n *            containing the value in decimal).\n *  * Other object. The values within the object are anyvar.\n *\n * The short form is more convenient, but it can't be converted back to binary (serialized).\n * Wherever the anyvar would have {type, value}, it has just the value instead.\n */\nexport type Anyvar = null | string | number | Anyvar[] | { type: string, value: any } | {};\n\ninterface AnyvarDef {\n    index: number;\n    useShortForm: boolean;\n    type: {\n        name: string,\n        serialize(buffer: SerialBuffer, value: any): void,\n        deserialize(buffer: SerialBuffer, state?: SerializerState): any,\n    };\n}\n\n/** A type in an abi */\nexport interface Type {\n    /** Type name */\n    name: string;\n\n    /** Type name this is an alias of, if any */\n    aliasOfName: string;\n\n    /** Type this is an array of, if any */\n    arrayOf?: Type;\n\n    /** Type this is an optional of, if any */\n    optionalOf?: Type;\n\n    /** Marks binary extension fields */\n    extensionOf?: Type;\n\n    /** Base name of this type, if this is a struct */\n    baseName: string;\n\n    /** Base of this type, if this is a struct */\n    base?: Type;\n\n    /** Contained fields, if this is a struct */\n    fields: Field[];\n\n    /** Convert `data` to binary form and store in `buffer` */\n    serialize: (buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean) => void;\n\n    /** Convert data in `buffer` from binary form */\n    deserialize: (buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) => any;\n}\n\n/** Structural representation of a symbol */\nexport interface Symbol {\n    /** Name of the symbol, not including precision */\n    name: string;\n\n    /** Number of digits after the decimal point */\n    precision: number;\n}\n\nexport interface Contract {\n    actions: Map<string, Type>;\n    types: Map<string, Type>;\n}\n\nexport interface Authorization {\n    actor: string;\n    permission: string;\n}\n\n/** Action with data in structured form */\nexport interface Action {\n    account: string;\n    name: string;\n    authorization: Authorization[];\n    data: any;\n    hex_data?: string;\n}\n\n/** Action with data in serialized hex form */\nexport interface SerializedAction {\n    account: string;\n    name: string;\n    authorization: Authorization[];\n    data: string;\n}\n\n/** Serialize and deserialize data */\nexport class SerialBuffer {\n    /** Amount of valid data in `array` */\n    public length: number;\n\n    /** Data in serialized (binary) form */\n    public array: Uint8Array;\n\n    /** Current position while reading (deserializing) */\n    public readPos = 0;\n\n    public textEncoder: TextEncoder;\n    public textDecoder: TextDecoder;\n\n    /**\n     * @param __namedParameters\n     * `array`: `null` if serializing, or binary data to deserialize\n     * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser\n     * `textDecoder`: `TextDecider` instance to use. Pass in `null` if running in a browser\n     */\n    constructor({ array, textEncoder, textDecoder } = {} as { array?: Uint8Array, textEncoder?: TextEncoder, textDecoder?: TextDecoder }) {\n        this.array = array || new Uint8Array(1024);\n        this.length = array ? array.length : 0;\n        this.textEncoder = textEncoder || new TextEncoder()\n        this.textDecoder = textDecoder || new TextDecoder('utf-8')\n    }\n\n    /** Resize `array` if needed to have at least `size` bytes free */\n    public reserve(size: number) {\n        if (this.length + size <= this.array.length) {\n            return;\n        }\n        let l = this.array.length;\n        while (this.length + size > l) {\n            l = Math.ceil(l * 1.5);\n        }\n        const newArray = new Uint8Array(l);\n        newArray.set(this.array);\n        this.array = newArray;\n    }\n\n    /** Is there data available to read? */\n    public haveReadData() {\n        return this.readPos < this.length;\n    }\n\n    /** Restart reading from the beginning */\n    public restartRead() {\n        this.readPos = 0;\n    }\n\n    /** Return data with excess storage trimmed away */\n    public asUint8Array() {\n        return new Uint8Array(this.array.buffer, this.array.byteOffset, this.length);\n    }\n\n    /** Append bytes */\n    public pushArray(v: number[] | Uint8Array) {\n        this.reserve(v.length);\n        this.array.set(v, this.length);\n        this.length += v.length;\n    }\n\n    /** Append bytes */\n    public push(...v: number[]) {\n        this.pushArray(v);\n    }\n\n    /** Get a single byte */\n    public get() {\n        if (this.readPos < this.length) {\n            return this.array[this.readPos++];\n        }\n        throw new Error('Read past end of buffer');\n    }\n\n    /** Append bytes in `v`. Throws if `len` doesn't match `v.length` */\n    public pushUint8ArrayChecked(v: Uint8Array, len: number) {\n        if (v.length !== len) {\n            throw new Error('Binary data has incorrect size');\n        }\n        this.pushArray(v);\n    }\n\n    /** Get `len` bytes */\n    public getUint8Array(len: number) {\n        if (this.readPos + len > this.length) {\n            throw new Error('Read past end of buffer');\n        }\n        const result = new Uint8Array(this.array.buffer, this.array.byteOffset + this.readPos, len);\n        this.readPos += len;\n        return result;\n    }\n\n    /** Skip `len` bytes */\n    public skip(len: number) {\n        if (this.readPos + len > this.length) {\n            throw new Error('Read past end of buffer');\n        }\n        this.readPos += len;\n    }\n\n    /** Append a `uint16` */\n    public pushUint16(v: number) {\n        this.push((v >> 0) & 0xff, (v >> 8) & 0xff);\n    }\n\n    /** Get a `uint16` */\n    public getUint16() {\n        let v = 0;\n        v |= this.get() << 0;\n        v |= this.get() << 8;\n        return v;\n    }\n\n    /** Append a `uint32` */\n    public pushUint32(v: number) {\n        this.push((v >> 0) & 0xff, (v >> 8) & 0xff, (v >> 16) & 0xff, (v >> 24) & 0xff);\n    }\n\n    /** Get a `uint32` */\n    public getUint32() {\n        let v = 0;\n        v |= this.get() << 0;\n        v |= this.get() << 8;\n        v |= this.get() << 16;\n        v |= this.get() << 24;\n        return v >>> 0;\n    }\n\n    /** Append a `uint64`. *Caution*: `number` only has 53 bits of precision */\n    public pushNumberAsUint64(v: number) {\n        this.pushUint32(v >>> 0);\n        this.pushUint32(Math.floor(v / 0x10000_0000) >>> 0);\n    }\n\n    /**\n     * Get a `uint64` as a `number`. *Caution*: `number` only has 53 bits of precision; some values will change.\n     * `numeric.binaryToDecimal(serialBuffer.getUint8Array(8))` recommended instead\n     */\n    public getUint64AsNumber() {\n        const low = this.getUint32();\n        const high = this.getUint32();\n        return (high >>> 0) * 0x10000_0000 + (low >>> 0);\n    }\n\n    /** Append a `varuint32` */\n    public pushVaruint32(v: number) {\n        while (true) {\n            if (v >>> 7) {\n                this.push(0x80 | (v & 0x7f));\n                v = v >>> 7;\n            } else {\n                this.push(v);\n                break;\n            }\n        }\n    }\n\n    /** Get a `varuint32` */\n    public getVaruint32() {\n        let v = 0;\n        let bit = 0;\n        while (true) {\n            const b = this.get();\n            v |= (b & 0x7f) << bit;\n            bit += 7;\n            if (!(b & 0x80)) {\n                break;\n            }\n        }\n        return v >>> 0;\n    }\n\n    /** Append a `varint32` */\n    public pushVarint32(v: number) {\n        this.pushVaruint32((v << 1) ^ (v >> 31));\n    }\n\n    /** Get a `varint32` */\n    public getVarint32() {\n        const v = this.getVaruint32();\n        if (v & 1) {\n            return ((~v) >> 1) | 0x8000_0000;\n        } else {\n            return v >>> 1;\n        }\n    }\n\n    /** Append a `float32` */\n    public pushFloat32(v: number) {\n        this.pushArray(new Uint8Array((new Float32Array([v])).buffer));\n    }\n\n    /** Get a `float32` */\n    public getFloat32() {\n        return new Float32Array(this.getUint8Array(4).slice().buffer)[0];\n    }\n\n    /** Append a `float64` */\n    public pushFloat64(v: number) {\n        this.pushArray(new Uint8Array((new Float64Array([v])).buffer));\n    }\n\n    /** Get a `float64` */\n    public getFloat64() {\n        return new Float64Array(this.getUint8Array(8).slice().buffer)[0];\n    }\n\n    /** Append a `name` */\n    public pushName(s: string) {\n        if (typeof s !== 'string') {\n            throw new Error('Expected string containing name');\n        }\n        const regex = new RegExp(/^[.1-5a-z]{0,12}[.1-5a-j]?$/);\n        if (!regex.test(s)) {\n            throw new Error('Name should be less than 13 characters, or less than 14 if last character is between 1-5 or a-j, and only contain the following symbols .12345abcdefghijklmnopqrstuvwxyz'); // eslint-disable-line\n        }\n        const charToSymbol = (c: number) => {\n            if (c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)) {\n                return (c - 'a'.charCodeAt(0)) + 6;\n            }\n            if (c >= '1'.charCodeAt(0) && c <= '5'.charCodeAt(0)) {\n                return (c - '1'.charCodeAt(0)) + 1;\n            }\n            return 0;\n        };\n        const a = new Uint8Array(8);\n        let bit = 63;\n        for (let i = 0; i < s.length; ++i) {\n            let c = charToSymbol(s.charCodeAt(i));\n            if (bit < 5) {\n                c = c << 1;\n            }\n            for (let j = 4; j >= 0; --j) {\n                if (bit >= 0) {\n                    a[Math.floor(bit / 8)] |= ((c >> j) & 1) << (bit % 8);\n                    --bit;\n                }\n            }\n        }\n        this.pushArray(a);\n    }\n\n    /** Get a `name` */\n    public getName() {\n        const a = this.getUint8Array(8);\n        let result = '';\n        for (let bit = 63; bit >= 0;) {\n            let c = 0;\n            for (let i = 0; i < 5; ++i) {\n                if (bit >= 0) {\n                    c = (c << 1) | ((a[Math.floor(bit / 8)] >> (bit % 8)) & 1);\n                    --bit;\n                }\n            }\n            if (c >= 6) {\n                result += String.fromCharCode(c + 'a'.charCodeAt(0) - 6);\n            } else if (c >= 1) {\n                result += String.fromCharCode(c + '1'.charCodeAt(0) - 1);\n            } else {\n                result += '.';\n            }\n        }\n        while (result.endsWith('.')) {\n            result = result.substr(0, result.length - 1);\n        }\n        return result;\n    }\n\n    /** Append length-prefixed binary data */\n    public pushBytes(v: number[] | Uint8Array) {\n        this.pushVaruint32(v.length);\n        this.pushArray(v);\n    }\n\n    /** Get length-prefixed binary data */\n    public getBytes() {\n        return this.getUint8Array(this.getVaruint32());\n    }\n\n    /** Append a string */\n    public pushString(v: string) {\n        this.pushBytes(this.textEncoder.encode(v));\n    }\n\n    /** Get a string */\n    public getString() {\n        return this.textDecoder.decode(this.getBytes());\n    }\n\n    /** Append a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n    public pushSymbolCode(name: string) {\n        if (typeof name !== 'string') {\n            throw new Error('Expected string containing symbol_code');\n        }\n        const a = [];\n        a.push(...this.textEncoder.encode(name));\n        while (a.length < 8) {\n            a.push(0);\n        }\n        this.pushArray(a.slice(0, 8));\n    }\n\n    /** Get a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n    public getSymbolCode() {\n        const a = this.getUint8Array(8);\n        let len;\n        for (len = 0; len < a.length; ++len) {\n            if (!a[len]) {\n                break;\n            }\n        }\n        const name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n        return name;\n    }\n\n    /** Append a `symbol` */\n    public pushSymbol({ name, precision }: { name: string, precision: number }) {\n        if (!/^[A-Z]{1,7}$/.test(name)) {\n            throw new Error('Expected symbol to be A-Z and between one and seven characters');\n        }\n        const a = [precision & 0xff];\n        a.push(...this.textEncoder.encode(name));\n        while (a.length < 8) {\n            a.push(0);\n        }\n        this.pushArray(a.slice(0, 8));\n    }\n\n    /** Get a `symbol` */\n    public getSymbol(): { name: string, precision: number } {\n        const precision = this.get();\n        const a = this.getUint8Array(7);\n        let len;\n        for (len = 0; len < a.length; ++len) {\n            if (!a[len]) {\n                break;\n            }\n        }\n        const name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n        return { name, precision };\n    }\n\n    /** Append an asset */\n    public pushAsset(s: string) {\n        if (typeof s !== 'string') {\n            throw new Error('Expected string containing asset');\n        }\n        s = s.trim();\n        let pos = 0;\n        let amount = '';\n        let precision = 0;\n        if (s[pos] === '-') {\n            amount += '-';\n            ++pos;\n        }\n        let foundDigit = false;\n        while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n            foundDigit = true;\n            amount += s[pos];\n            ++pos;\n        }\n        if (!foundDigit) {\n            throw new Error('Asset must begin with a number');\n        }\n        if (s[pos] === '.') {\n            ++pos;\n            while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n                amount += s[pos];\n                ++precision;\n                ++pos;\n            }\n        }\n        const name = s.substr(pos).trim();\n        this.pushArray(numeric.signedDecimalToBinary(8, amount));\n        this.pushSymbol({ name, precision });\n    }\n\n    /** Get an asset */\n    public getAsset() {\n        const amount = this.getUint8Array(8);\n        const { name, precision } = this.getSymbol();\n        let s = numeric.signedBinaryToDecimal(amount, precision + 1);\n        if (precision) {\n            s = s.substr(0, s.length - precision) + '.' + s.substr(s.length - precision);\n        }\n        return s + ' ' + name;\n    }\n\n    /** Append a public key */\n    public pushPublicKey(s: string) {\n        const key = numeric.stringToPublicKey(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    }\n\n    /** Get a public key */\n    public getPublicKey() {\n        const type = this.get();\n        let data: Uint8Array;\n        if (type === numeric.KeyType.wa) {\n            const begin = this.readPos;\n            this.skip(34);\n            this.skip(this.getVaruint32());\n            data = new Uint8Array(this.array.buffer, this.array.byteOffset + begin, this.readPos - begin);\n        } else {\n            data = this.getUint8Array(numeric.publicKeyDataSize);\n        }\n        return numeric.publicKeyToString({ type, data });\n    }\n\n    /** Append a private key */\n    public pushPrivateKey(s: string) {\n        const key = numeric.stringToPrivateKey(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    }\n\n    /** Get a private key */\n    public getPrivateKey() {\n        const type = this.get();\n        const data = this.getUint8Array(numeric.privateKeyDataSize);\n        return numeric.privateKeyToString({ type, data });\n    }\n\n    /** Append a signature */\n    public pushSignature(s: string) {\n        const key = numeric.stringToSignature(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    }\n\n    /** Get a signature */\n    public getSignature() {\n        const type = this.get();\n        let data: Uint8Array;\n        if (type === numeric.KeyType.wa) {\n            const begin = this.readPos;\n            this.skip(65);\n            this.skip(this.getVaruint32());\n            this.skip(this.getVaruint32());\n            data = new Uint8Array(this.array.buffer, this.array.byteOffset + begin, this.readPos - begin);\n        } else {\n            data = this.getUint8Array(numeric.signatureDataSize);\n        }\n        return numeric.signatureToString({ type, data });\n    }\n} // SerialBuffer\n\n/** Is this a supported ABI version? */\nexport const supportedAbiVersion = (version: string) => {\n    return version.startsWith('eosio::abi/1.');\n};\n\nconst checkDateParse = (date: string) => {\n    const result = Date.parse(date);\n    if (Number.isNaN(result)) {\n        throw new Error('Invalid time format');\n    }\n    return result;\n};\n\n/** Convert date in ISO format to `time_point` (miliseconds since epoch) */\nexport const dateToTimePoint = (date: string) => {\n    return Math.round(checkDateParse(date + 'Z') * 1000);\n};\n\n/** Convert `time_point` (miliseconds since epoch) to date in ISO format */\nexport const timePointToDate = (us: number) => {\n    const s = (new Date(us / 1000)).toISOString();\n    return s.substr(0, s.length - 1);\n};\n\n/** Convert date in ISO format to `time_point_sec` (seconds since epoch) */\nexport const dateToTimePointSec = (date: string) => {\n    return Math.round(checkDateParse(date + 'Z') / 1000);\n};\n\n/** Convert `time_point_sec` (seconds since epoch) to to date in ISO format */\nexport const timePointSecToDate = (sec: number) => {\n    const s = (new Date(sec * 1000)).toISOString();\n    return s.substr(0, s.length - 1);\n};\n\n/** Convert date in ISO format to `block_timestamp_type` (half-seconds since a different epoch) */\nexport const dateToBlockTimestamp = (date: string) => {\n    return Math.round((checkDateParse(date + 'Z') - 946684800000) / 500);\n};\n\n/** Convert `block_timestamp_type` (half-seconds since a different epoch) to to date in ISO format */\nexport const blockTimestampToDate = (slot: number) => {\n    const s = (new Date(slot * 500 + 946684800000)).toISOString();\n    return s.substr(0, s.length - 1);\n};\n\n/** Convert `string` to `Symbol`. format: `precision,NAME`. */\nexport const stringToSymbol = (s: string): { name: string, precision: number } => {\n    if (typeof s !== 'string') {\n        throw new Error('Expected string containing symbol');\n    }\n    const m = s.match(/^([0-9]+),([A-Z]+)$/);\n    if (!m) {\n        throw new Error('Invalid symbol');\n    }\n    return { name: m[2], precision: +m[1] };\n};\n\n/** Convert `Symbol` to `string`. format: `precision,NAME`. */\nexport const symbolToString = ({ name, precision }: { name: string, precision: number }) => {\n    return precision + ',' + name;\n};\n\n/** Convert binary data to hex */\nexport const arrayToHex = (data: Uint8Array) => {\n    let result = '';\n    for (const x of data) {\n        result += ('00' + x.toString(16)).slice(-2);\n    }\n    return result.toUpperCase();\n};\n\n/** Convert hex to binary data */\nexport const hexToUint8Array = (hex: string) => {\n    if (typeof hex !== 'string') {\n        throw new Error('Expected string containing hex digits');\n    }\n    if (hex.length % 2) {\n        throw new Error('Odd number of hex digits');\n    }\n    const l = hex.length / 2;\n    const result = new Uint8Array(l);\n    for (let i = 0; i < l; ++i) {\n        const x = parseInt(hex.substr(i * 2, 2), 16);\n        if (Number.isNaN(x)) {\n            throw new Error('Expected hex string');\n        }\n        result[i] = x;\n    }\n    return result;\n};\n\nfunction serializeUnknown (this: Type, _: SerialBuffer, __: any): SerialBuffer {\n    throw new Error('Don\\'t know how to serialize ' + this.name);\n}\n\nfunction deserializeUnknown (this: Type, _: SerialBuffer): SerialBuffer {\n    throw new Error('Don\\'t know how to deserialize ' + this.name);\n}\n\nfunction serializeStruct(\n    this: Type, buffer: SerialBuffer, data: any, state = new SerializerState(), allowExtensions = true\n) {\n    if (typeof data !== 'object') {\n        throw new Error('expected object containing data: ' + JSON.stringify(data));\n    }\n    if (this.base) {\n        this.base.serialize(buffer, data, state, allowExtensions);\n    }\n    for (const field of this.fields) {\n        if (field.name in data) {\n            if (state.skippedBinaryExtension) {\n                throw new Error('unexpected ' + this.name + '.' + field.name);\n            }\n            field.type!.serialize(\n                buffer, data[field.name], state, allowExtensions && field === this.fields[this.fields.length - 1]);\n        } else {\n            if (allowExtensions && field.type!.extensionOf) {\n                state.skippedBinaryExtension = true;\n            } else {\n                throw new Error('missing ' + this.name + '.' + field.name + ' (type=' + field.type!.name + ')');\n            }\n        }\n    }\n}\n\nfunction deserializeStruct(this: Type, buffer: SerialBuffer, state = new SerializerState(), allowExtensions = true) {\n    let result;\n    if (this.base) {\n        result = this.base.deserialize(buffer, state, allowExtensions);\n    } else {\n        result = {};\n    }\n    for (const field of this.fields) {\n        if (allowExtensions && field.type!.extensionOf && !buffer.haveReadData()) {\n            state.skippedBinaryExtension = true;\n        } else {\n            result[field.name] = field.type!.deserialize(buffer, state, allowExtensions);\n        }\n    }\n    return result;\n}\n\nfunction serializeVariant(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n) {\n    if (!Array.isArray(data) || data.length !== 2 || typeof data[0] !== 'string') {\n        throw new Error('expected variant: [\"type\", value]');\n    }\n    const i = this.fields.findIndex((field: Field) => field.name === data[0]);\n    if (i < 0) {\n        throw new Error(`type \"${data[0]}\" is not valid for variant`);\n    }\n    buffer.pushVaruint32(i);\n    this.fields[i].type!.serialize(buffer, data[1], state, allowExtensions);\n}\n\nfunction deserializeVariant(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) {\n    const i = buffer.getVaruint32();\n    if (i >= this.fields.length) {\n        throw new Error(`type index ${i} is not valid for variant`);\n    }\n    const field = this.fields[i];\n    return [field.name, field.type!.deserialize(buffer, state, allowExtensions)];\n}\n\nfunction serializeArray(\n    this: Type, buffer: SerialBuffer, data: any[], state?: SerializerState /*, allowExtensions?: boolean */\n) {\n    buffer.pushVaruint32(data.length);\n    for (const item of data) {\n        this.arrayOf!.serialize(buffer, item, state, false);\n    }\n}\n\nfunction deserializeArray(this: Type, buffer: SerialBuffer, state?: SerializerState /*, allowExtensions?: boolean */) {\n    const len = buffer.getVaruint32();\n    const result = [];\n    for (let i = 0; i < len; ++i) {\n        result.push(this.arrayOf!.deserialize(buffer, state, false));\n    }\n    return result;\n}\n\nfunction serializeOptional(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n) {\n    if (data === null || data === undefined) {\n        buffer.push(0);\n    } else {\n        buffer.push(1);\n        this.optionalOf!.serialize(buffer, data, state, allowExtensions);\n    }\n}\n\nfunction deserializeOptional(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) {\n    if (buffer.get()) {\n        return this.optionalOf!.deserialize(buffer, state, allowExtensions);\n    } else {\n        return null;\n    }\n}\n\nfunction serializeExtension(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n) {\n    this.extensionOf!.serialize(buffer, data, state, allowExtensions);\n}\n\nfunction deserializeExtension(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) {\n    return this.extensionOf!.deserialize(buffer, state, allowExtensions);\n}\n\nfunction serializeObject(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n) {\n    const entries = Object.entries(data);\n    buffer.pushVaruint32(entries.length);\n    for (const [key, value] of entries) {\n        const keyType = this.fields[0].type;\n        const dataType = this.fields[1].type;\n        keyType!.serialize(buffer, key, state, allowExtensions);\n        dataType!.serialize(buffer, value, state, allowExtensions);\n    }\n}\n\nfunction deserializeObject(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) {\n    const len = buffer.getVaruint32();\n    const result = {} as any;\n    for (let i = 0; i < len; ++i) {\n        const keyType = this.fields[0].type;\n        const dataType = this.fields[1].type;\n        const key = keyType!.deserialize(buffer, state, allowExtensions);\n        (result as any)[key] = dataType!.deserialize(buffer, state, allowExtensions);\n    }\n    return result;\n}\n\ninterface CreateTypeArgs {\n    name?: string;\n    aliasOfName?: string;\n    arrayOf?: Type;\n    optionalOf?: Type;\n    extensionOf?: Type;\n    baseName?: string;\n    base?: Type;\n    fields?: Field[];\n    serialize?: (buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean) => void;\n    deserialize?: (buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) => any;\n}\n\nconst createType = (attrs: CreateTypeArgs): Type => {\n    return {\n        name: '<missing name>',\n        aliasOfName: '',\n        arrayOf: undefined,\n        optionalOf: undefined,\n        extensionOf: undefined,\n        baseName: '',\n        base: undefined,\n        fields: [],\n        serialize: serializeUnknown,\n        deserialize: deserializeUnknown,\n        ...attrs,\n    };\n};\n\nconst checkRange = (orig: number, converted: number) => {\n    if (Number.isNaN(+orig) || Number.isNaN(+converted) || (typeof orig !== 'number' && typeof orig !== 'string')) {\n        throw new Error('Expected number');\n    }\n    if (+orig !== +converted) {\n        throw new Error('Number is out of range');\n    }\n    return +orig;\n};\n\n/** Create the set of types built-in to the abi format */\nexport const createInitialTypes = (): Map<string, Type> => {\n    const result: Map<string, Type> = new Map(Object.entries({\n        bool: createType({\n            name: 'bool',\n            serialize: (buffer: SerialBuffer, data: boolean) => {\n                if ( !(typeof data === 'boolean' || typeof data === 'number' && ( data === 1 || data === 0))) {\n                    throw new Error('Expected boolean or number equal to 1 or 0');\n                }\n                buffer.push(data ? 1 : 0);\n            },\n            deserialize: (buffer: SerialBuffer) => { return !!buffer.get(); },\n        }),\n        uint8: createType({\n            name: 'uint8',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.push(checkRange(data, data & 0xff)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.get(); },\n        }),\n        int8: createType({\n            name: 'int8',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.push(checkRange(data, data << 24 >> 24)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.get() << 24 >> 24; },\n        }),\n        uint16: createType({\n            name: 'uint16',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint16(checkRange(data, data & 0xffff)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint16(); },\n        }),\n        int16: createType({\n            name: 'int16',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint16(checkRange(data, data << 16 >> 16)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint16() << 16 >> 16; },\n        }),\n        uint32: createType({\n            name: 'uint32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint32(checkRange(data, data >>> 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint32(); },\n        }),\n        uint64: createType({\n            name: 'uint64',\n            serialize: (buffer: SerialBuffer, data: string | number) => {\n                buffer.pushArray(numeric.decimalToBinary(8, '' + data));\n            },\n            deserialize: (buffer: SerialBuffer) => { return numeric.binaryToDecimal(buffer.getUint8Array(8)); },\n        }),\n        int64: createType({\n            name: 'int64',\n            serialize: (buffer: SerialBuffer, data: string | number) => {\n                buffer.pushArray(numeric.signedDecimalToBinary(8, '' + data));\n            },\n            deserialize: (buffer: SerialBuffer) => { return numeric.signedBinaryToDecimal(buffer.getUint8Array(8)); },\n        }),\n        int32: createType({\n            name: 'int32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint32(checkRange(data, data | 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint32() | 0; },\n        }),\n        varuint32: createType({\n            name: 'varuint32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushVaruint32(checkRange(data, data >>> 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getVaruint32(); },\n        }),\n        varint32: createType({\n            name: 'varint32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushVarint32(checkRange(data, data | 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getVarint32(); },\n        }),\n        uint128: createType({\n            name: 'uint128',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushArray(numeric.decimalToBinary(16, '' + data)); },\n            deserialize: (buffer: SerialBuffer) => { return numeric.binaryToDecimal(buffer.getUint8Array(16)); },\n        }),\n        int128: createType({\n            name: 'int128',\n            serialize: (buffer: SerialBuffer, data: string) => {\n                buffer.pushArray(numeric.signedDecimalToBinary(16, '' + data));\n            },\n            deserialize: (buffer: SerialBuffer) => { return numeric.signedBinaryToDecimal(buffer.getUint8Array(16)); },\n        }),\n        float32: createType({\n            name: 'float32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushFloat32(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getFloat32(); },\n        }),\n        float64: createType({\n            name: 'float64',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushFloat64(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getFloat64(); },\n        }),\n        float128: createType({\n            name: 'float128',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 16); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(16)); },\n        }),\n\n        bytes: createType({\n            name: 'bytes',\n            serialize: (buffer: SerialBuffer, data: string | Uint8Array | number[]) => {\n                if (data instanceof Uint8Array || Array.isArray(data)) {\n                    buffer.pushBytes(data);\n                } else {\n                    buffer.pushBytes(hexToUint8Array(data));\n                }\n            },\n            deserialize: (buffer: SerialBuffer, state?: SerializerState) => {\n                if (state && state.options.bytesAsUint8Array) {\n                    return buffer.getBytes();\n                } else {\n                    return arrayToHex(buffer.getBytes());\n                }\n            },\n        }),\n        string: createType({\n            name: 'string',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushString(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getString(); },\n        }),\n        name: createType({\n            name: 'name',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushName(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getName(); },\n        }),\n        time_point: createType({\n            name: 'time_point',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushNumberAsUint64(dateToTimePoint(data)); },\n            deserialize: (buffer: SerialBuffer) => { return timePointToDate(buffer.getUint64AsNumber()); },\n        }),\n        time_point_sec: createType({\n            name: 'time_point_sec',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint32(dateToTimePointSec(data)); },\n            deserialize: (buffer: SerialBuffer) => { return timePointSecToDate(buffer.getUint32()); },\n        }),\n        block_timestamp_type: createType({\n            name: 'block_timestamp_type',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint32(dateToBlockTimestamp(data)); },\n            deserialize: (buffer: SerialBuffer) => { return blockTimestampToDate(buffer.getUint32()); },\n        }),\n        symbol_code: createType({\n            name: 'symbol_code',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushSymbolCode(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getSymbolCode(); },\n        }),\n        symbol: createType({\n            name: 'symbol',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushSymbol(stringToSymbol(data)); },\n            deserialize: (buffer: SerialBuffer) => { return symbolToString(buffer.getSymbol()); },\n        }),\n        asset: createType({\n            name: 'asset',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushAsset(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getAsset(); },\n        }),\n        checksum160: createType({\n            name: 'checksum160',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 20); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(20)); },\n        }),\n        checksum256: createType({\n            name: 'checksum256',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 32); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(32)); },\n        }),\n        checksum512: createType({\n            name: 'checksum512',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 64); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(64)); },\n        }),\n        public_key: createType({\n            name: 'public_key',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushPublicKey(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getPublicKey(); },\n        }),\n        private_key: createType({\n            name: 'private_key',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushPrivateKey(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getPrivateKey(); },\n        }),\n        signature: createType({\n            name: 'signature',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushSignature(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getSignature(); },\n        }),\n    }));\n\n    result.set('extended_asset', createType({\n        name: 'extended_asset',\n        baseName: '',\n        fields: [\n            { name: 'quantity', typeName: 'asset', type: result.get('asset') },\n            { name: 'contract', typeName: 'name', type: result.get('name') },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n\n    return result;\n}; // createInitialTypes()\n\nexport const createAbiTypes = (): Map<string, Type> => {\n    const initialTypes = createInitialTypes();\n    initialTypes.set('extensions_entry', createType({\n        name: 'extensions_entry',\n        baseName: '',\n        fields: [\n            { name: 'tag', typeName: 'uint16', type: undefined },\n            { name: 'value', typeName: 'bytes', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('type_def', createType({\n        name: 'type_def',\n        baseName: '',\n        fields: [\n            { name: 'new_type_name', typeName: 'string', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('field_def', createType({\n        name: 'field_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'string', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('struct_def', createType({\n        name: 'struct_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'string', type: undefined },\n            { name: 'base', typeName: 'string', type: undefined },\n            { name: 'fields', typeName: 'field_def[]', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('action_def', createType({\n        name: 'action_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined },\n            { name: 'ricardian_contract', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('table_def', createType({\n        name: 'table_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'index_type', typeName: 'string', type: undefined },\n            { name: 'key_names', typeName: 'string[]', type: undefined },\n            { name: 'key_types', typeName: 'string[]', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('clause_pair', createType({\n        name: 'clause_pair',\n        baseName: '',\n        fields: [\n            { name: 'id', typeName: 'string', type: undefined },\n            { name: 'body', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('error_message', createType({\n        name: 'error_message',\n        baseName: '',\n        fields: [\n            { name: 'error_code', typeName: 'uint64', type: undefined },\n            { name: 'error_msg', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('variant_def', createType({\n        name: 'variant_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'string', type: undefined },\n            { name: 'types', typeName: 'string[]', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('action_result', createType({\n        name: 'action_result',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'result_type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('primary_key_index_def', createType({\n        name: 'primary_key_index_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('secondary_index_def', createType({\n        name: 'secondary_index_def',\n        baseName: '',\n        fields: [\n            { name: 'type', typeName: 'string', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('secondary_indices', createType({\n        name: 'secondary_indices',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'secondary_index_def', typeName: 'secondary_index_def', type: undefined }\n        ],\n        serialize: serializeObject,\n        deserialize: deserializeObject,\n    }));\n    initialTypes.set('kv_table_entry_def', createType({\n        name: 'kv_table_entry_def',\n        baseName: '',\n        fields: [\n            { name: 'type', typeName: 'string', type: undefined },\n            { name: 'primary_index', typeName: 'primary_key_index_def', type: undefined },\n            { name: 'secondary_indices', typeName: 'secondary_indices', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('kv_table', createType({\n        name: 'kv_table',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'kv_table_entry_def', typeName: 'kv_table_entry_def', type: undefined }\n        ],\n        serialize: serializeObject,\n        deserialize: deserializeObject\n    }));\n    initialTypes.set('abi_def', createType({\n        name: 'abi_def',\n        baseName: '',\n        fields: [\n            { name: 'version', typeName: 'string', type: undefined },\n            { name: 'types', typeName: 'type_def[]', type: undefined },\n            { name: 'structs', typeName: 'struct_def[]', type: undefined },\n            { name: 'actions', typeName: 'action_def[]', type: undefined },\n            { name: 'tables', typeName: 'table_def[]', type: undefined },\n            { name: 'ricardian_clauses', typeName: 'clause_pair[]', type: undefined },\n            { name: 'error_messages', typeName: 'error_message[]', type: undefined },\n            { name: 'abi_extensions', typeName: 'extensions_entry[]', type: undefined },\n            { name: 'variants', typeName: 'variant_def[]$', type: undefined },\n            { name: 'action_results', typeName: 'action_result[]$', type: undefined },\n            { name: 'kv_tables', typeName: 'kv_table$', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    return initialTypes;\n};\n\n/** Get type from `types` */\nexport const getType = (types: Map<string, Type>, name: string): Type => {\n    const type = types.get(name);\n    if (type && type.aliasOfName) {\n        return getType(types, type.aliasOfName);\n    }\n    if (type) {\n        return type;\n    }\n    if (name.endsWith('[]')) {\n        return createType({\n            name,\n            arrayOf: getType(types, name.substr(0, name.length - 2)),\n            serialize: serializeArray,\n            deserialize: deserializeArray,\n        });\n    }\n    if (name.endsWith('?')) {\n        return createType({\n            name,\n            optionalOf: getType(types, name.substr(0, name.length - 1)),\n            serialize: serializeOptional,\n            deserialize: deserializeOptional,\n        });\n    }\n    if (name.endsWith('$')) {\n        return createType({\n            name,\n            extensionOf: getType(types, name.substr(0, name.length - 1)),\n            serialize: serializeExtension,\n            deserialize: deserializeExtension,\n        });\n    }\n    throw new Error('Unknown type: ' + name);\n};\n\n/**\n * Get types from abi\n *\n * @param initialTypes Set of types to build on.\n * In most cases, it's best to fill this from a fresh call to `getTypesFromAbi()`.\n */\nexport const getTypesFromAbi = (initialTypes: Map<string, Type>, abi?: Abi) => {\n    const types = new Map(initialTypes);\n    if (abi && abi.types) {\n        for (const { new_type_name, type } of abi.types) {\n            types.set(new_type_name,\n                createType({ name: new_type_name, aliasOfName: type }));\n        }\n    }\n    if (abi && abi.structs) {\n        for (const { name, base, fields } of abi.structs) {\n            types.set(name, createType({\n                name,\n                baseName: base,\n                fields: fields.map(({ name: n, type }) => ({ name: n, typeName: type, type: undefined })),\n                serialize: serializeStruct,\n                deserialize: deserializeStruct,\n            }));\n        }\n    }\n    if (abi && abi.variants) {\n        for (const { name, types: t } of abi.variants) {\n            types.set(name, createType({\n                name,\n                fields: t.map((s) => ({ name: s, typeName: s, type: undefined })),\n                serialize: serializeVariant,\n                deserialize: deserializeVariant,\n            }));\n        }\n    }\n    for (const [/*name*/ _, type] of types) {\n        if (type.baseName) {\n            type.base = getType(types, type.baseName);\n        }\n        for (const field of type.fields) {\n            field.type = getType(types, field.typeName);\n        }\n    }\n    return types;\n}; // getTypesFromAbi\n\nconst reverseHex = (h: string) => {\n    return h.substr(6, 2) + h.substr(4, 2) + h.substr(2, 2) + h.substr(0, 2);\n};\n\n/** TAPoS: Return transaction fields which reference `refBlock` and expire `expireSeconds` after `timestamp` */\nexport const transactionHeader = (refBlock: BlockTaposInfo, expireSeconds: number) => {\n    const timestamp = refBlock.header ? refBlock.header.timestamp : refBlock.timestamp;\n    const prefix = parseInt(reverseHex(refBlock.id.substr(16, 8)), 16);\n\n    return {\n        expiration: timePointSecToDate(dateToTimePointSec(timestamp as string) + expireSeconds),\n        ref_block_num: refBlock.block_num & 0xffff,\n        ref_block_prefix: prefix,\n    };\n};\n\n/** Convert action data to serialized form (hex) */\nexport const serializeActionData = (\n    contract: Contract, account: string, name: string, data: any\n): string => {\n    const action = contract.actions.get(name);\n    if (!action) {\n        throw new Error(`Unknown action ${name} in contract ${account}`);\n    }\n    const buffer = new SerialBuffer();\n    action.serialize(buffer, data);\n    return arrayToHex(buffer.asUint8Array());\n};\n\n/** Return action in serialized form */\nexport const serializeAction = (\n    contract: Contract, account: string, name: string, authorization: Authorization[],\n    data: any\n): SerializedAction => {\n    return {\n        account,\n        name,\n        authorization,\n        data: serializeActionData(contract, account, name, data),\n    };\n};\n\n/** Deserialize action data. If `data` is a `string`, then it's assumed to be in hex. */\nexport const deserializeActionData = (\n    contract: Contract, account: string, name: string, data: string | Uint8Array | number[]\n): any => {\n    const action = contract.actions.get(name);\n    if (typeof data === 'string') {\n        data = hexToUint8Array(data);\n    }\n    if (!action) {\n        throw new Error(`Unknown action ${name} in contract ${account}`);\n    }\n    const buffer = new SerialBuffer();\n    buffer.pushArray(data);\n    return action.deserialize(buffer);\n};\n\n/** Deserialize action. If `data` is a `string`, then it's assumed to be in hex. */\nexport const deserializeAction = (\n    contract: Contract, account: string, name: string, authorization: Authorization[],\n    data: string | Uint8Array | number[]\n): Action => {\n    return {\n        account,\n        name,\n        authorization,\n        data: deserializeActionData(contract, account, name, data),\n    };\n};\n\nexport const serializeAnyvar = (buffer: SerialBuffer, anyvar: Anyvar) => {\n    let def: AnyvarDef;\n    let value: any;\n    if (anyvar === null) {\n        [def, value] = [anyvarDefs.null_t, anyvar] as any;\n    } else if (typeof anyvar === 'string') {\n        [def, value] = [anyvarDefs.string, anyvar] as any;\n    } else if (typeof anyvar === 'number') {\n        [def, value] = [anyvarDefs.int32, anyvar] as any;\n    } else if (anyvar instanceof Uint8Array) {\n        [def, value] = [anyvarDefs.bytes, anyvar] as any;\n    } else if (Array.isArray(anyvar)) {\n        [def, value] = [anyvarDefs.any_array, anyvar] as any;\n    } else if (Object.keys(anyvar).length === 2 && anyvar.hasOwnProperty('type') && anyvar.hasOwnProperty('value')) {\n        [def, value] = [(anyvarDefs as any)[(anyvar as any).type] as AnyvarDef, (anyvar as any).value] as any;\n    } else {\n        [def, value] = [anyvarDefs.any_object, anyvar] as any;\n    }\n    buffer.pushVaruint32(def.index);\n    def.type.serialize(buffer, value);\n};\n\nexport const deserializeAnyvar = (buffer: SerialBuffer, state?: SerializerState) => {\n    const defIndex = buffer.getVaruint32();\n    if (defIndex >= anyvarDefsByIndex.length) {\n        throw new Error('Tried to deserialize unknown anyvar type');\n    }\n    const def = anyvarDefsByIndex[defIndex];\n    const value = def.type!.deserialize(buffer, state);\n    if (state && (state.options as any).useShortForm || def.useShortForm) {\n        return value;\n    } else {\n        return { type: def.type!.name, value };\n    }\n};\n\nexport const deserializeAnyvarShort = (buffer: SerialBuffer) => {\n    return deserializeAnyvar(buffer, new SerializerState({ useShortForm: true } as any));\n};\n\nexport const serializeAnyObject = (buffer: SerialBuffer, obj: any) => {\n    const entries = Object.entries(obj);\n    buffer.pushVaruint32(entries.length);\n    for (const [key, value] of entries) {\n        buffer.pushString(key);\n        serializeAnyvar(buffer, value as Anyvar);\n    }\n};\n\nexport const deserializeAnyObject = (buffer: SerialBuffer, state?: SerializerState) => {\n    const len = buffer.getVaruint32();\n    const result = {};\n    for (let i = 0; i < len; ++i) {\n        let key = buffer.getString();\n        if (key in result) {\n            let j = 1;\n            while (key + '_' + j in result) {\n                ++j;\n            }\n            key = key + '_' + j;\n        }\n        (result as any)[key] = deserializeAnyvar(buffer, state);\n    }\n    return result;\n};\n\nexport const serializeAnyArray = (buffer: SerialBuffer, arr: Anyvar[]) => {\n    buffer.pushVaruint32(arr.length);\n    for (const x of arr) {\n        serializeAnyvar(buffer, x);\n    }\n};\n\nexport const deserializeAnyArray = (buffer: SerialBuffer, state?: SerializerState) => {\n    const len = buffer.getVaruint32();\n    const result = [];\n    for (let i = 0; i < len; ++i) {\n        result.push(deserializeAnyvar(buffer, state));\n    }\n    return result;\n};\n\nconst addAdditionalTypes = (): Map<string, Type> => {\n    const initialTypes = createInitialTypes();\n    initialTypes.set('null_t', createType({\n        name: 'null_t',\n        serialize: (_: SerialBuffer, __: Anyvar) => {},\n        deserialize: (_: SerialBuffer, __?: SerializerState) => {}\n    }));\n    initialTypes.set('any_object', createType({\n        name: 'any_object',\n        serialize: serializeAnyObject,\n        deserialize: deserializeAnyObject\n    }));\n    initialTypes.set('any_array', createType({\n        name: 'any_array',\n        serialize: serializeAnyArray,\n        deserialize: deserializeAnyArray\n    }));\n    return initialTypes;\n};\n\nconst additionalTypes = addAdditionalTypes();\n\nconst anyvarDefs = {\n    null_t: { index: 0, useShortForm: true, type: additionalTypes.get('null_t') },\n    int64: { index: 1, useShortForm: false, type: additionalTypes.get('int64') },\n    uint64: { index: 2, useShortForm: false, type: additionalTypes.get('uint64') },\n    int32: { index: 3, useShortForm: true, type: additionalTypes.get('int32') },\n    uint32: { index: 4, useShortForm: false, type: additionalTypes.get('uint32') },\n    int16: { index: 5, useShortForm: false, type: additionalTypes.get('int16') },\n    uint16: { index: 6, useShortForm: false, type: additionalTypes.get('uint16') },\n    int8: { index: 7, useShortForm: false, type: additionalTypes.get('int8') },\n    uint8: { index: 8, useShortForm: false, type: additionalTypes.get('uint8') },\n    time_point: { index: 9, useShortForm: false, type: additionalTypes.get('time_point') },\n    checksum256: { index: 10, useShortForm: false, type: additionalTypes.get('checksum256') },\n    float64: { index: 11, useShortForm: false, type: additionalTypes.get('float64') },\n    string: { index: 12, useShortForm: true, type: additionalTypes.get('string') },\n    any_object: { index: 13, useShortForm: true, type: additionalTypes.get('any_object') },\n    any_array: { index: 14, useShortForm: true, type: additionalTypes.get('any_array') },\n    bytes: { index: 15, useShortForm: false, type: additionalTypes.get('bytes') },\n    symbol: { index: 16, useShortForm: false, type: additionalTypes.get('symbol') },\n    symbol_code: { index: 17, useShortForm: false, type: additionalTypes.get('symbol_code') },\n    asset: { index: 18, useShortForm: false, type: additionalTypes.get('asset') },\n};\n\nconst anyvarDefsByIndex = [\n    anyvarDefs.null_t,\n    anyvarDefs.int64,\n    anyvarDefs.uint64,\n    anyvarDefs.int32,\n    anyvarDefs.uint32,\n    anyvarDefs.int16,\n    anyvarDefs.uint16,\n    anyvarDefs.int8,\n    anyvarDefs.uint8,\n    anyvarDefs.time_point,\n    anyvarDefs.checksum256,\n    anyvarDefs.float64,\n    anyvarDefs.string,\n    anyvarDefs.any_object,\n    anyvarDefs.any_array,\n    anyvarDefs.bytes,\n    anyvarDefs.symbol,\n    anyvarDefs.symbol_code,\n    anyvarDefs.asset,\n];\n\nexport const serializeQuery = (buffer: SerialBuffer, query: Query) => {\n    let method: string;\n    let arg: Anyvar;\n    let filter: Query[];\n    if (typeof query === 'string') {\n        method = query;\n    } else if (Array.isArray(query) && query.length === 2) {\n        [method, filter] = query;\n    } else if (Array.isArray(query) && query.length === 3) {\n        [method, arg, filter] = query;\n    } else {\n        [method, arg, filter] = [query.method, query.arg, query.filter] as any;\n    }\n    buffer.pushString(method);\n\n    // @ts-ignore\n    if (arg === undefined) {\n        buffer.push(0);\n    } else {\n        buffer.push(1);\n        serializeAnyvar(buffer, arg);\n    }\n\n    // @ts-ignore\n    if (filter === undefined) {\n        buffer.push(0);\n    } else {\n        buffer.pushVaruint32(filter.length);\n        for (const q of filter) {\n            serializeQuery(buffer, q);\n        }\n    }\n};\n","import {ec as EC} from 'elliptic';\nimport * as hash from 'hash.js';\nimport {KeyType} from '../api/numeric';\n\n/** Construct the elliptic curve object based on key type */\nexport const constructElliptic = (type: KeyType): EC => {\n    if (type === KeyType.k1) {\n        return new EC('secp256k1');\n    }\n    return new EC('p256');\n};\n\nexport const sha256 = (data: string|Buffer): string => {\n    return hash.sha256().update(data).digest('hex');\n};\n","import { ec as EC } from 'elliptic';\nimport {\n    Key,\n    KeyType,\n    publicKeyToLegacyString,\n    publicKeyToString,\n    stringToPublicKey,\n} from '../api/numeric';\nimport { constructElliptic } from './conversions';\n\n/** Represents/stores a public key and provides easy conversion for use with `elliptic` lib */\nexport class PublicKey {\n    constructor(private key: Key, private ec: EC) {}\n\n    /** Instantiate public key from an EOSIO-format public key */\n    public static fromString(publicKeyStr: string, ec?: EC): PublicKey {\n        const key = stringToPublicKey(publicKeyStr);\n        if (!ec) {\n            ec = constructElliptic(key.type);\n        }\n        return new PublicKey(key, ec);\n    }\n\n    /** Instantiate public key from an `elliptic`-format public key */\n    public static fromElliptic(publicKey: EC.KeyPair, keyType: KeyType, ec?: EC): PublicKey {\n        const x = publicKey.getPublic().getX().toArray('be', 32);\n        const y = publicKey.getPublic().getY().toArray('be', 32);\n        if (!ec) {\n            ec = constructElliptic(keyType);\n        }\n        return new PublicKey({\n            type: keyType,\n            data: new Uint8Array([(y[31] & 1) ? 3 : 2].concat(x)),\n        }, ec);\n    }\n\n    /** Export public key as EOSIO-format public key */\n    public toString(): string {\n        return publicKeyToString(this.key);\n    }\n\n    /** Export public key as Legacy EOSIO-format public key */\n    public toLegacyString(prefix?: string): string {\n        return publicKeyToLegacyString(this.key, prefix);\n    }\n\n    /** Export public key as `elliptic`-format public key */\n    public toElliptic(): EC.KeyPair {\n        return this.ec.keyPair({\n            pub: Buffer.from(this.key.data),\n        });\n    }\n\n    /** Get key type from key */\n    public getType(): KeyType {\n        return this.key.type;\n    }\n\n    /** Validate a public key */\n    public isValid(): boolean {\n        try {\n            const ellipticPublicKey = this.toElliptic();\n            const validationObj = ellipticPublicKey.validate();\n            return validationObj.result;\n        } catch {\n            return false;\n        }\n    }\n}\n","import { BNInput, ec as EC } from 'elliptic';\nconst BN = require('bn.js');\n\nimport {\n    Key,\n    KeyType,\n    signatureToString,\n    stringToSignature,\n} from '../api/numeric';\nimport { constructElliptic } from './conversions';\nimport { PublicKey } from './publicKey'\n\n/** Represents/stores a Signature and provides easy conversion for use with `elliptic` lib */\nexport class Signature {\n    constructor(private signature: Key, private ec: EC) {}\n\n    /** Instantiate Signature from an EOSIO-format Signature */\n    public static fromString(sig: string, ec?: EC): Signature {\n        const signature = stringToSignature(sig);\n        if (!ec) {\n            ec = constructElliptic(signature.type);\n        }\n        return new Signature(signature, ec);\n    }\n\n    /** Instantiate Signature from an `elliptic`-format Signature */\n    public static fromElliptic(ellipticSig: EC.Signature, keyType: KeyType, ec?: EC): Signature {\n        if (!ellipticSig.recoveryParam) {\n            ellipticSig.recoveryParam = 0\n        }\n\n        const r = ellipticSig.r.toArray('be', 32);\n        const s = ellipticSig.s.toArray('be', 32);\n        let eosioRecoveryParam;\n        if (keyType === KeyType.k1 || keyType === KeyType.r1) {\n            eosioRecoveryParam = ellipticSig.recoveryParam + 27;\n            if (ellipticSig.recoveryParam <= 3) {\n                eosioRecoveryParam += 4;\n            }\n        } else if (keyType === KeyType.wa) {\n            eosioRecoveryParam = ellipticSig.recoveryParam;\n        }\n        const sigData = new Uint8Array([eosioRecoveryParam].concat(r, s) as any);\n        if (!ec) {\n            ec = constructElliptic(keyType);\n        }\n        return new Signature({\n            type: keyType,\n            data: sigData,\n        }, ec);\n    }\n\n    /** Export Signature as `elliptic`-format Signature\n     * NOTE: This isn't an actual elliptic-format Signature, as ec.Signature is not exported by the library.\n     * That's also why the return type is `any`.  We're *actually* returning an object with the 3 params\n     * not an ec.Signature.\n     * Further NOTE: @types/elliptic shows ec.Signature as exported; it is *not*.  Hence the `any`.\n     */\n    public toElliptic(): any {\n        const lengthOfR = 32;\n        const lengthOfS = 32;\n        const r = new BN(this.signature.data.slice(1, lengthOfR + 1));\n        const s = new BN(this.signature.data.slice(lengthOfR + 1, lengthOfR + lengthOfS + 1));\n\n        let ellipticRecoveryBitField;\n        if (this.signature.type === KeyType.k1 || this.signature.type === KeyType.r1) {\n            ellipticRecoveryBitField = this.signature.data[0] - 27;\n            if (ellipticRecoveryBitField > 3) {\n                ellipticRecoveryBitField -= 4;\n            }\n        } else if (this.signature.type === KeyType.wa) {\n            ellipticRecoveryBitField = this.signature.data[0];\n        } else {\n            ellipticRecoveryBitField = 0\n        }\n        const recoveryParam = ellipticRecoveryBitField & 3;\n        return { r, s, recoveryParam };\n    }\n\n    /** Export Signature as EOSIO-format Signature */\n    public toString(): string {\n        return signatureToString(this.signature);\n    }\n\n    /** Export Signature in binary format */\n    public toBinary(): Uint8Array {\n        return this.signature.data;\n    }\n\n    /** Get key type from signature */\n    public getType(): KeyType {\n        return this.signature.type;\n    }\n\n    /** Verify a signature with a message or hashed message digest and public key */\n    public verify(data: BNInput, publicKey: PublicKey, shouldHash: boolean = true, encoding: BufferEncoding = 'utf8'): boolean {\n        if (shouldHash) {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            data = this.ec.hash().update(data).digest();\n        }\n        const ellipticSignature = this.toElliptic();\n        const ellipticPublicKey = publicKey.toElliptic();\n        return this.ec.verify(data, ellipticSignature, ellipticPublicKey, encoding);\n    }\n\n    /** Recover a public key from a message or hashed message digest and signature */\n    public recover(data: BNInput, shouldHash: boolean = true, encoding: BufferEncoding = 'utf8'): PublicKey {\n        if (shouldHash) {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            data = this.ec.hash().update(data).digest();\n        }\n        const ellipticSignature = this.toElliptic();\n        const recoveredPublicKey = this.ec.recoverPubKey(\n            data,\n            ellipticSignature,\n            ellipticSignature.recoveryParam,\n            encoding\n        );\n        const ellipticKPub = this.ec.keyFromPublic(recoveredPublicKey);\n        return PublicKey.fromElliptic(ellipticKPub, this.getType(), this.ec);\n    }\n}\n","import { BNInput, ec as EC } from 'elliptic';\nimport {\n    Key,\n    KeyType,\n    privateKeyToLegacyString,\n    privateKeyToString,\n    stringToPrivateKey,\n} from '../api/numeric';\nimport { constructElliptic } from './conversions';\nimport { PublicKey } from './publicKey'\nimport { Signature } from './signature'\n\n/** Represents/stores a private key and provides easy conversion for use with `elliptic` lib */\nexport class PrivateKey {\n    constructor(private key: Key, private ec: EC) {}\n\n    /** Instantiate private key from an `elliptic`-format private key */\n    public static fromElliptic(privKey: EC.KeyPair, keyType: KeyType, ec?: EC): PrivateKey {\n        if (!ec) {\n            ec = constructElliptic(keyType);\n        }\n        return new PrivateKey({\n            type: keyType,\n            data: privKey.getPrivate().toArrayLike(Buffer, 'be', 32),\n        }, ec);\n    }\n\n    /** Instantiate private key from an EOSIO-format private key */\n    public static fromString(keyString: string, ec?: EC): PrivateKey {\n        const privateKey = stringToPrivateKey(keyString);\n        if (!ec) {\n            ec = constructElliptic(privateKey.type);\n        }\n        return new PrivateKey(privateKey, ec);\n    }\n\n    /** Export private key as `elliptic`-format private key */\n    public toElliptic() {\n        return this.ec.keyFromPrivate(this.key.data);\n    }\n\n    public toLegacyString(): string {\n        return privateKeyToLegacyString(this.key);\n    }\n\n    /** Export private key as EOSIO-format private key */\n    public toString(): string {\n        return privateKeyToString(this.key);\n    }\n\n    /** Get key type from key */\n    public getType(): KeyType {\n        return this.key.type;\n    }\n\n    /** Retrieve the public key from a private key */\n    public getPublicKey(): PublicKey {\n        const ellipticPrivateKey = this.toElliptic();\n        return PublicKey.fromElliptic(ellipticPrivateKey, this.getType(), this.ec);\n    }\n\n    /** Sign a message or hashed message digest with private key */\n    public sign(data: BNInput, shouldHash: boolean = true, encoding: BufferEncoding = 'utf8'): Signature {\n        if (shouldHash) {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            data = this.ec.hash().update(data).digest();\n        }\n        let tries = 0;\n        let signature: Signature;\n        const isCanonical = (sigData: Uint8Array) =>\n            !(sigData[1] & 0x80) && !(sigData[1] === 0 && !(sigData[2] & 0x80))\n            && !(sigData[33] & 0x80) && !(sigData[33] === 0 && !(sigData[34] & 0x80));\n        const constructSignature = (options: EC.SignOptions) => {\n            const ellipticPrivateKey = this.toElliptic();\n            const ellipticSignature = ellipticPrivateKey.sign(data, options);\n            return Signature.fromElliptic(ellipticSignature, this.getType(), this.ec);\n        };\n\n        if (this.key.type === KeyType.k1) {\n            do {\n                signature = constructSignature({canonical: true, pers: [++tries]});\n            } while (!isCanonical(signature.toBinary()));\n        } else {\n            signature = constructSignature({canonical: true});\n        }\n        return signature;\n    }\n\n    /** Validate a private key */\n    public isValid(): boolean {\n        try {\n            const ellipticPrivateKey = this.toElliptic();\n            const validationObj = ellipticPrivateKey.validate();\n            return validationObj.result;\n        } catch {\n            return false;\n        }\n    }\n}\n","import { PrivateKey } from './privateKey';\nimport { PublicKey } from './publicKey';\nimport { ec as EC } from 'elliptic';\nimport {KeyType} from '../api/numeric';\n\nexport { PrivateKey } from './privateKey';\nexport { PublicKey } from './publicKey';\nexport { Signature } from './signature';\nexport { constructElliptic } from './conversions';\n\nexport const generateKeyPair = (\n    type: KeyType, options: { secureEnv?: boolean, ecOptions?: EC.GenKeyPairOptions } = {}\n): { publicKey: PublicKey, privateKey: PrivateKey } => {\n    if (!options.secureEnv) {\n        throw new Error('Key generation is completely INSECURE in production environments in the browser. ' +\n            'If you are absolutely certain this does NOT describe your environment, set `secureEnv` in your ' +\n            'options to `true`.  If this does describe your environment and you set `secureEnv` to `true`, ' +\n            'YOU DO SO AT YOUR OWN RISK AND THE RISK OF YOUR USERS.');\n    }\n    let ec;\n    if (type === KeyType.k1) {\n        ec = new EC('secp256k1') as any;\n    } else {\n        ec = new EC('p256') as any;\n    }\n    const ellipticKeyPair = ec.genKeyPair(options.ecOptions);\n    const publicKey = PublicKey.fromElliptic(ellipticKeyPair, type, ec);\n    const privateKey = PrivateKey.fromElliptic(ellipticKeyPair, type, ec);\n    return {publicKey, privateKey};\n};","/**\n * @module JS-Sig\n */\n// copyright defined in eosjs/LICENSE.txt\n\nimport { ec } from 'elliptic';\n\nimport { SignatureProvider, SignatureProviderArgs } from '../api/types';\nimport {\n    PrivateKey,\n    PublicKey,\n    Signature,\n} from './key';\nimport { convertLegacyPublicKey } from '../api/numeric';\n\n/** expensive to construct; so we do it once and reuse it */\nconst defaultEc = new ec('secp256k1');\n\n/** Construct the digest from transaction details */\nconst digestFromSerializedData = (\n    chainId: string,\n    serializedTransaction: Uint8Array,\n    serializedContextFreeData?: Uint8Array,\n    e = defaultEc) => {\n    const signBuf = Buffer.concat([\n        Buffer.from(chainId, 'hex'),\n        Buffer.from(serializedTransaction),\n        Buffer.from(\n            serializedContextFreeData ?\n                new Uint8Array(e.hash().update(serializedContextFreeData).digest()) :\n                new Uint8Array(32)\n        ),\n    ]);\n    return e.hash().update(signBuf).digest();\n};\n\n/** Signs transactions using in-process private keys */\nclass JsSignatureProvider implements SignatureProvider {\n    /** map public to private keys */\n    public keys = new Map<string, ec.KeyPair>();\n\n    /** public keys */\n    public availableKeys = [] as string[];\n\n    /** @param privateKeys private keys to sign with */\n    constructor(privateKeys: string[]) {\n        for (const k of privateKeys) {\n            const priv = PrivateKey.fromString(k);\n            const privElliptic = priv.toElliptic();\n            const pubStr = priv.getPublicKey().toString();\n            this.keys.set(pubStr, privElliptic);\n            this.availableKeys.push(pubStr);\n        }\n    }\n\n    /** Public keys associated with the private keys that the `SignatureProvider` holds */\n    public async getAvailableKeys() {\n        return this.availableKeys;\n    }\n\n    /** Sign a transaction */\n    public async sign(\n        { chainId, requiredKeys, serializedTransaction, serializedContextFreeData }: SignatureProviderArgs,\n    ) {\n        const digest = digestFromSerializedData( chainId, serializedTransaction, serializedContextFreeData, defaultEc);\n\n        const signatures = [] as string[];\n        for (const key of requiredKeys) {\n            const publicKey = PublicKey.fromString(key);\n            const ellipticPrivateKey = this.keys.get(convertLegacyPublicKey(key));\n            if (ellipticPrivateKey) {\n                const privateKey = PrivateKey.fromElliptic(ellipticPrivateKey, publicKey.getType());\n                const signature = privateKey.sign(digest, false);\n                signatures.push(signature.toString());\n            }\n        }\n\n        return { signatures, serializedTransaction, serializedContextFreeData };\n    }\n}\n\nexport {\n    PrivateKey,\n    PublicKey,\n    Signature,\n    digestFromSerializedData,\n    JsSignatureProvider,\n};\n","import { Abi } from \"../rpc/types\"\n\nconst abi: Abi = {\n    \"version\": \"eosio::abi/1.0\",\n    \"types\": [\n        {\n            \"new_type_name\": \"account_name\",\n            \"type\": \"name\"\n        },\n        {\n            \"new_type_name\": \"action_name\",\n            \"type\": \"name\"\n        },\n        {\n            \"new_type_name\": \"permission_name\",\n            \"type\": \"name\"\n        }\n    ],\n    \"structs\": [\n        {\n            \"name\": \"permission_level\",\n            \"base\": \"\",\n            \"fields\": [\n                {\n                    \"name\": \"actor\",\n                    \"type\": \"account_name\"\n                },\n                {\n                    \"name\": \"permission\",\n                    \"type\": \"permission_name\"\n                }\n            ]\n        },\n        {\n            \"name\": \"action\",\n            \"base\": \"\",\n            \"fields\": [\n                {\n                    \"name\": \"account\",\n                    \"type\": \"account_name\"\n                },\n                {\n                    \"name\": \"name\",\n                    \"type\": \"action_name\"\n                },\n                {\n                    \"name\": \"authorization\",\n                    \"type\": \"permission_level[]\"\n                },\n                {\n                    \"name\": \"data\",\n                    \"type\": \"bytes\"\n                }\n            ]\n        },\n        {\n            \"name\": \"extension\",\n            \"base\": \"\",\n            \"fields\": [\n                {\n                    \"name\": \"type\",\n                    \"type\": \"uint16\"\n                },\n                {\n                    \"name\": \"data\",\n                    \"type\": \"bytes\"\n                }\n            ]\n        },\n        {\n            \"name\": \"transaction_header\",\n            \"base\": \"\",\n            \"fields\": [\n                {\n                    \"name\": \"expiration\",\n                    \"type\": \"time_point_sec\"\n                },\n                {\n                    \"name\": \"ref_block_num\",\n                    \"type\": \"uint16\"\n                },\n                {\n                    \"name\": \"ref_block_prefix\",\n                    \"type\": \"uint32\"\n                },\n                {\n                    \"name\": \"max_net_usage_words\",\n                    \"type\": \"varuint32\"\n                },\n                {\n                    \"name\": \"max_cpu_usage_ms\",\n                    \"type\": \"uint8\"\n                },\n                {\n                    \"name\": \"delay_sec\",\n                    \"type\": \"varuint32\"\n                }\n            ]\n        },\n        {\n            \"name\": \"transaction\",\n            \"base\": \"transaction_header\",\n            \"fields\": [\n                {\n                    \"name\": \"context_free_actions\",\n                    \"type\": \"action[]\"\n                },\n                {\n                    \"name\": \"actions\",\n                    \"type\": \"action[]\"\n                },\n                {\n                    \"name\": \"transaction_extensions\",\n                    \"type\": \"extension[]\"\n                }\n            ]\n        }\n    ],\n    actions: [],\n    tables: [],\n    ricardian_clauses: [],\n    error_messages: [],\n    abi_extensions: [],\n}\n\nexport default abi","/* eslint-disable max-classes-per-file */\n\nimport { inflate, deflate } from 'pako';\n\nimport {\n    AbiProvider,\n    ActionSerializerType,\n    AuthorityProvider,\n    BinaryAbi,\n    CachedAbi,\n    ContextFreeGroupCallback,\n    Query,\n    QueryConfig,\n    SignatureProvider,\n    TransactConfig,\n    Transaction,\n    TransactResult,\n} from './types';\nimport { JsonRpc } from '../rpc';\nimport {\n    Abi,\n    BlockTaposInfo,\n    GetInfoResult,\n    PushTransactionArgs,\n    GetBlockHeaderStateResult,\n    GetBlockInfoResult,\n    GetBlockResult\n} from '../rpc/types';\nimport * as ser from './serialize';\nimport { digestFromSerializedData } from '../cryptography/jsSignatureProvider'\nimport { PublicKey, Signature } from '../cryptography/key' \nimport transactionAbi from './transactionAbi'\n\nexport class Api {\n    /** Issues RPC calls */\n    public rpc: JsonRpc;\n\n    /** Get subset of `availableKeys` needed to meet authorities in a `transaction` */\n    public authorityProvider: AuthorityProvider;\n\n    /** Supplies ABIs in raw form (binary) */\n    public abiProvider: AbiProvider;\n\n    /** Signs transactions */\n    public signatureProvider?: SignatureProvider;\n\n    /** Converts abi files between binary and structured form (`abi.abi.json`) */\n    public abiTypes: Map<string, ser.Type>;\n\n    /** Converts transactions between binary and structured form (`transaction.abi.json`) */\n    public transactionTypes: Map<string, ser.Type>;\n\n    /** Holds information needed to serialize contract actions */\n    public contracts = new Map<string, ser.Contract>();\n\n    /** Fetched abis */\n    public cachedAbis = new Map<string, CachedAbi>();\n\n    /**\n     * @param args\n     *    * `rpc`: Issues RPC calls\n     *    * `authorityProvider`: Get public keys needed to meet authorities in a transaction\n     *    * `abiProvider`: Supplies ABIs in raw form (binary)\n     *    * `signatureProvider`: Signs transactions\n     */\n    constructor(args: {\n        rpc: JsonRpc,\n        authorityProvider?: AuthorityProvider,\n        abiProvider?: AbiProvider,\n        signatureProvider?: SignatureProvider\n    }) {\n        this.rpc = args.rpc;\n        this.authorityProvider = args.authorityProvider || args.rpc;\n        this.abiProvider = args.abiProvider || args.rpc;\n        if (args.signatureProvider) {\n            this.signatureProvider = args.signatureProvider;\n        }\n\n        this.abiTypes = ser.getTypesFromAbi(ser.createAbiTypes());\n        this.transactionTypes = ser.getTypesFromAbi(ser.createInitialTypes(), transactionAbi);\n    }\n\n    /** Decodes an abi as Uint8Array into json. */\n    public rawAbiToJson(rawAbi: Uint8Array): Abi {\n        const buffer = new ser.SerialBuffer({\n            array: rawAbi\n        });\n        if (!ser.supportedAbiVersion(buffer.getString())) {\n            throw new Error('Unsupported abi version');\n        }\n        buffer.restartRead();\n        return this.abiTypes.get('abi_def')!.deserialize(buffer);\n    }\n\n    /** Encodes a json abi as Uint8Array. */\n    public jsonToRawAbi(jsonAbi: Abi): Uint8Array {\n        const buffer = new ser.SerialBuffer();\n        this.abiTypes.get('abi_def')!.serialize(buffer, jsonAbi);\n        if (!ser.supportedAbiVersion(buffer.getString())) {\n            throw new Error('Unsupported abi version');\n        }\n        return buffer.asUint8Array();\n    }\n\n    /** Get abi in both binary and structured forms. Fetch when needed. */\n    public async getCachedAbi(accountName: string, reload = false): Promise<CachedAbi> {\n        if (!reload && this.cachedAbis.get(accountName)) {\n            return this.cachedAbis.get(accountName) as CachedAbi;\n        }\n        let cachedAbi: CachedAbi;\n        try {\n            const rawAbi = (await this.abiProvider.getRawAbi(accountName)).abi\n            const abi = this.rawAbiToJson(rawAbi);\n            cachedAbi = { rawAbi, abi };\n        } catch (e) {\n            e.message = `fetching abi for ${accountName}: ${e.message}`;\n            throw e;\n        }\n        if (!cachedAbi) {\n            throw new Error(`Missing abi for ${accountName}`);\n        }\n        this.cachedAbis.set(accountName, cachedAbi);\n        return cachedAbi;\n    }\n\n    /** Get abi in structured form. Fetch when needed. */\n    public async getAbi(accountName: string, reload = false): Promise<Abi> {\n        return (await this.getCachedAbi(accountName, reload)).abi;\n    }\n\n    /** Get abis needed by a transaction */\n    public async getTransactionAbis(transaction: any, reload = false): Promise<BinaryAbi[]> {\n        const actions = (transaction.context_free_actions || []).concat(transaction.actions);\n        const accounts: string[] = actions.map((action: ser.Action): string => action.account);\n        const uniqueAccounts: Set<string> = new Set(accounts);\n        const actionPromises: Promise<BinaryAbi>[] = Array.from(uniqueAccounts).map(\n            async (account: string): Promise<BinaryAbi> => {\n                const { rawAbi } = await this.getCachedAbi(account, reload)\n                return {\n                    accountName: account,\n                    abi: rawAbi\n                }\n            }\n        );\n        return Promise.all(actionPromises);\n    }\n\n    /** Get data needed to serialize actions in a contract */\n    public async getContract(accountName: string, reload = false): Promise<ser.Contract> {\n        if (!reload && this.contracts.get(accountName)) {\n            return this.contracts.get(accountName) as ser.Contract;\n        }\n        const abi = await this.getAbi(accountName, reload);\n        const types = ser.getTypesFromAbi(ser.createInitialTypes(), abi);\n        const actions = new Map<string, ser.Type>();\n        for (const { name, type } of abi.actions) {\n            actions.set(name, ser.getType(types, type));\n        }\n        const result = { types, actions };\n        this.contracts.set(accountName, result);\n        return result;\n    }\n\n    /** Convert `value` to binary form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n    public serialize(buffer: ser.SerialBuffer, type: string, value: any): void {\n        this.transactionTypes.get(type)!.serialize(buffer, value);\n    }\n\n    /** Convert data in `buffer` to structured form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n    public deserialize(buffer: ser.SerialBuffer, type: string): any {\n        return this.transactionTypes.get(type)!.deserialize(buffer);\n    }\n\n    /** Convert a transaction to binary */\n    public serializeTransaction(transaction: any): Uint8Array {\n        const buffer = new ser.SerialBuffer();\n        this.serialize(buffer, 'transaction', {\n            max_net_usage_words: 0,\n            max_cpu_usage_ms: 0,\n            delay_sec: 0,\n            context_free_actions: [],\n            actions: [],\n            transaction_extensions: [],\n            ...transaction,\n        });\n        return buffer.asUint8Array();\n    }\n\n    /** Serialize context-free data */\n    public serializeContextFreeData(contextFreeData: Uint8Array[]): Uint8Array | undefined {\n        if (!contextFreeData || !contextFreeData.length) {\n            return undefined;\n        }\n        const buffer = new ser.SerialBuffer();\n        buffer.pushVaruint32(contextFreeData.length);\n        for (const data of contextFreeData) {\n            buffer.pushBytes(data);\n        }\n        return buffer.asUint8Array();\n    }\n\n    /** Convert a transaction from binary. Leaves actions in hex. */\n    public deserializeTransaction(transaction: Uint8Array): any {\n        const buffer = new ser.SerialBuffer();\n        buffer.pushArray(transaction);\n        return this.deserialize(buffer, 'transaction');\n    }\n\n    /** Convert actions to hex */\n    public async serializeActions(actions: ser.Action[]): Promise<ser.SerializedAction[]> {\n        return await Promise.all(actions.map(async (action) => {\n            const { account, name, authorization, data } = action;\n            const contract = await this.getContract(account);\n            if (typeof data !== 'object') {\n                return action;\n            }\n            return ser.serializeAction(\n                contract, account, name, authorization, data);\n        }));\n    }\n\n    /** Convert actions from hex */\n    public async deserializeActions(actions: ser.Action[]): Promise<ser.Action[]> {\n        return await Promise.all(actions.map(async ({ account, name, authorization, data }) => {\n            const contract = await this.getContract(account);\n            return ser.deserializeAction(\n                contract, account, name, authorization, data);\n        }));\n    }\n\n    public async deserializeActionsSync(actions: ser.Action[]): Promise<ser.Action[]> {\n        let deserializedActions = []\n        for (const { account, name, authorization, data } of actions) {\n            const contract = await this.getContract(account);\n            deserializedActions.push(\n                ser.deserializeAction(\n                    contract, account, name, authorization, data\n                )\n            )\n        }\n        return deserializedActions\n    }\n\n    /** Convert a transaction from binary. Also deserializes actions. */\n    public async deserializeTransactionWithActions(transaction: Uint8Array | string): Promise<any> {\n        if (typeof transaction === 'string') {\n            transaction = ser.hexToUint8Array(transaction);\n        }\n        const deserializedTransaction = this.deserializeTransaction(transaction);\n        const deserializedCFActions = await this.deserializeActionsSync(deserializedTransaction.context_free_actions);\n        const deserializedActions = await this.deserializeActionsSync(deserializedTransaction.actions);\n        return {\n            ...deserializedTransaction, context_free_actions: deserializedCFActions, actions: deserializedActions\n        };\n    }\n\n    /** Deflate a serialized object */\n    public deflateSerializedArray(serializedArray: Uint8Array): Uint8Array {\n        return deflate(serializedArray, { level: 9 });\n    }\n\n    /** Inflate a compressed serialized object */\n    public inflateSerializedArray(compressedSerializedArray: Uint8Array): Uint8Array {\n        return inflate(compressedSerializedArray);\n    }\n\n    /**\n     * Create and optionally broadcast a transaction.\n     *\n     * Named Parameters:\n     *    * `broadcast`: broadcast this transaction?\n     *    * `sign`: sign this transaction?\n     *    * `compression`: compress this transaction?\n     *    * If both `blocksBehind` and `expireSeconds` are present,\n     *      then fetch the block which is `blocksBehind` behind head block,\n     *      use it as a reference for TAPoS, and expire the transaction\n     *      `expireSeconds` after that block's time.\n     *    * If both `useLastIrreversible` and `expireSeconds` are present,\n     *      then fetch the last irreversible block, use it as a reference for TAPoS,\n     *      and expire the transaction `expireSeconds` after that block's time.\n     *\n     * @returns node response if `broadcast`, `{signatures, serializedTransaction}` if `!broadcast`\n     */\n    public async transact(transaction: any, {\n        broadcast = true,\n        sign = true,\n        compression,\n        blocksBehind,\n        useLastIrreversible,\n        expireSeconds,\n        requiredKeys, // When you will sign later\n        transactionHeader\n    }: TransactConfig = {}): Promise<any> {\n        const info: GetInfoResult = await this.rpc.get_info();;\n\n        // Calculate header if not provided\n        if (!transactionHeader) {\n            if (typeof blocksBehind === 'number' && useLastIrreversible) {\n                throw new Error('Use either blocksBehind or useLastIrreversible');\n            } else if (typeof blocksBehind !== 'number' && !useLastIrreversible) {\n                throw new Error('Must provide one blocksBehind or useLastIrreversible');\n            } else if (!expireSeconds) {\n                throw new Error('Must provide expireSeconds');\n            } else {\n                transactionHeader = await this.generateTapos(info, transaction, blocksBehind, useLastIrreversible, expireSeconds);;\n            }\n\n            if (!this.hasRequiredTaposFields(transactionHeader)) {\n                throw new Error('Required configuration or TAPOS fields are not present');\n            }\n        }\n\n        const abis: BinaryAbi[] = await this.getTransactionAbis(transaction);\n        transaction = {\n            ...transactionHeader,\n            context_free_actions: await this.serializeActions(transaction.context_free_actions || []),\n            actions: await this.serializeActions(transaction.actions)\n        };\n        const serializedTransaction = this.serializeTransaction(transaction);\n        const serializedContextFreeData = this.serializeContextFreeData(transaction.context_free_data);\n        let pushTransactionArgs: PushTransactionArgs = {\n            serializedTransaction, serializedContextFreeData, signatures: []\n        };\n\n        if (sign) {\n            if (!this.signatureProvider) {\n                throw new Error('No signature provider available')\n            }\n            \n            if (!requiredKeys) {\n                const availableKeys = await this.signatureProvider.getAvailableKeys();\n                requiredKeys = await this.authorityProvider.getRequiredKeys({ transaction, availableKeys });\n            }\n\n            pushTransactionArgs = await this.signatureProvider.sign({\n                chainId: info.chain_id,\n                requiredKeys,\n                serializedTransaction,\n                serializedContextFreeData,\n                abis,\n            });\n        }\n        if (broadcast) {\n            if (compression) {\n                return this.pushCompressedSignedTransaction(pushTransactionArgs) as Promise<TransactResult>;\n            }\n            return this.pushSignedTransaction(pushTransactionArgs) as Promise<TransactResult>;\n        }\n        return {\n            ...pushTransactionArgs,\n            transactionHeader //\n        };\n    }\n\n    public async transactWithDelay(transaction: any, params: TransactConfig = {}, delay: number): Promise<any> {\n        async function wait (ms: number) {\n            return new Promise(resolve => {\n              setTimeout(resolve, ms);\n            });\n        }\n\n        const success = await this.transact(transaction, params)\n        await wait(delay)\n        return success\n    }\n\n    public async query(\n        account: string, short: boolean, query: Query,\n        { sign, requiredKeys, authorization = [] }: QueryConfig\n    ): Promise<any> {\n        const info = await this.rpc.get_info();\n        const refBlock = await this.tryRefBlockFromGetInfo(info);\n        const queryBuffer = new ser.SerialBuffer();\n        ser.serializeQuery(queryBuffer, query);\n\n        const transaction = {\n            ...ser.transactionHeader(refBlock, 60 * 30),\n            context_free_actions: [] as ser.Action[],\n            actions: [{\n                account,\n                name: 'queryit',\n                authorization,\n                data: ser.arrayToHex(queryBuffer.asUint8Array()),\n            }],\n        };\n\n        const serializedTransaction = this.serializeTransaction(transaction);\n        let signatures: string[] = [];\n        if (sign) {\n            if (!this.signatureProvider) {\n                throw new Error('No signature provider available')\n            }\n    \n            const abis: BinaryAbi[] = await this.getTransactionAbis(transaction);\n            if (!requiredKeys) {\n                const availableKeys = await this.signatureProvider.getAvailableKeys();\n                requiredKeys = await this.authorityProvider.getRequiredKeys({ transaction, availableKeys });\n            }\n\n            const signResponse = await this.signatureProvider.sign({\n                chainId: info.chain_id,\n                requiredKeys,\n                serializedTransaction,\n                serializedContextFreeData: undefined,\n                abis,\n            });\n\n            signatures = signResponse.signatures;\n        }\n\n        const response = await this.rpc.send_transaction({\n            signatures,\n            compression: 0,\n            serializedTransaction\n        });\n\n        const returnBuffer = new ser.SerialBuffer({\n            array: ser.hexToUint8Array(response.processed.action_traces[0][1].return_value)\n        });\n        if (short) {\n            return ser.deserializeAnyvarShort(returnBuffer);\n        } else {\n            return ser.deserializeAnyvar(returnBuffer);\n        }\n    }\n\n    /** Broadcast a signed transaction */\n    public async pushSignedTransaction(\n        { signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs\n    ): Promise<TransactResult> {\n        return this.rpc.push_transaction({\n            signatures,\n            serializedTransaction,\n            serializedContextFreeData\n        });\n    }\n\n    public async pushCompressedSignedTransaction(\n        { signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs\n    ): Promise<TransactResult> {\n        const compressedSerializedTransaction = this.deflateSerializedArray(serializedTransaction);\n        const compressedSerializedContextFreeData =\n            this.deflateSerializedArray(serializedContextFreeData || new Uint8Array(0));\n\n        return this.rpc.push_transaction({\n            signatures,\n            compression: 1,\n            serializedTransaction: compressedSerializedTransaction,\n            serializedContextFreeData: compressedSerializedContextFreeData\n        });\n    }\n\n    private async generateTapos(\n        info: GetInfoResult | undefined,\n        transaction: Transaction,\n        blocksBehind: number = 3,\n        useLastIrreversible: boolean | undefined,\n        expireSeconds: number\n    ) {\n        if (!info) {\n            info = await this.rpc.get_info();\n        }\n        if (useLastIrreversible) {\n            const block = await this.tryRefBlockFromGetInfo(info);\n            return { ...ser.transactionHeader(block, expireSeconds), ...transaction };\n        }\n\n        const taposBlockNumber: number = info.head_block_num - blocksBehind;\n\n        const refBlock: GetBlockHeaderStateResult | GetBlockResult = // await this.tryGetBlockInfo(taposBlockNumber)\n            taposBlockNumber <= info.last_irreversible_block_num\n                ? await this.tryGetBlockInfo(taposBlockNumber)\n                : await this.tryGetBlockHeaderState(taposBlockNumber);\n\n        return { ...ser.transactionHeader(refBlock, expireSeconds), ...transaction };\n    }\n\n    // eventually break out into TransactionValidator class\n    private hasRequiredTaposFields({ expiration, ref_block_num, ref_block_prefix }: any): boolean {\n        return !!(expiration && typeof(ref_block_num) === 'number' && typeof(ref_block_prefix) === 'number');\n    }\n\n    private async tryGetBlockHeaderState(taposBlockNumber: number): Promise<GetBlockHeaderStateResult | GetBlockResult>\n    {\n        try {\n            return await this.rpc.get_block_header_state(taposBlockNumber);\n        } catch (error) {\n            return await this.tryGetBlockInfo(taposBlockNumber);\n        }\n    }\n\n    private async tryGetBlockInfo(blockNumber: number): Promise<GetBlockInfoResult | GetBlockResult> {\n        try {\n            return await this.rpc.get_block_info(blockNumber);\n        } catch (error) {\n            return await this.rpc.get_block(blockNumber);\n        }\n    }\n\n    private async tryRefBlockFromGetInfo(info: GetInfoResult): Promise<BlockTaposInfo | GetBlockInfoResult | GetBlockResult> {\n        if (\n            info.hasOwnProperty('last_irreversible_block_id') &&\n            info.hasOwnProperty('last_irreversible_block_num') &&\n            info.hasOwnProperty('last_irreversible_block_time')\n        ) {\n            return {\n                block_num: info.last_irreversible_block_num,\n                id: info.last_irreversible_block_id,\n                timestamp: info.last_irreversible_block_time,\n            };\n        } else {\n            const block = await this.tryGetBlockInfo(info.last_irreversible_block_num);\n            return {\n                block_num: block.block_num,\n                id: block.id,\n                timestamp: block.timestamp,\n            };\n        }\n    }\n\n    public with(accountName: string): ActionBuilder {\n        return new ActionBuilder(this, accountName);\n    }\n\n    public buildTransaction(cb?: (tx: TransactionBuilder) => void) {\n        const tx = new TransactionBuilder(this);\n        if (cb) {\n            return cb(tx);\n        }\n        return tx as TransactionBuilder;\n    }\n\n    public async getAccountKeys (actor: string, permission: string) {\n        try {\n            const { permissions } = await this.rpc.get_account(actor)\n            const relevantPermission = permissions.find(({ perm_name }: any) => perm_name === permission)\n            if (relevantPermission) {\n                return relevantPermission.required_auth.keys.map(({ key }: any) => PublicKey.fromString(key).toString())\n            }\n        } catch (e) {\n            console.log(e)\n        }\n\n        return []\n    }\n\n    public async checkIfKeysMatchTransaction ({\n        actor,\n        permission,\n        transaction,\n        signatures,\n        chainId\n    }: {\n        actor: string,\n        permission: string,\n        transaction: any,\n        signatures: string[],\n        chainId?: string\n    }) {\n        if (!chainId) {\n            const info = await this.rpc.get_info()\n            chainId = info.chain_id\n        }\n        \n        const keys = await this.getAccountKeys(actor, permission)\n        transaction.context_free_actions = await this.serializeActions(transaction.context_free_actions || []),\n        transaction.actions = await this.serializeActions(transaction.actions)\n\n        const serializedTransaction = this.serializeTransaction(transaction);\n        const serializedContextFreeData = this.serializeContextFreeData(transaction.context_free_data);\n\n        const digest = digestFromSerializedData(chainId, serializedTransaction, serializedContextFreeData)\n        const verified = keys.some((key: string) => {\n            return Signature.fromString(signatures[0]).verify(digest, PublicKey.fromString(key), false)\n        })\n        return verified\n    }\n} // Api\n\nexport class TransactionBuilder {\n    private api: Api;\n    private actions: ActionBuilder[] = [];\n    private contextFreeGroups: any[] = [];\n    constructor(api: Api) {\n        this.api = api;\n    }\n\n    public with(accountName: string): ActionBuilder {\n        const actionBuilder = new ActionBuilder(this.api, accountName);\n        this.actions.push(actionBuilder);\n        return actionBuilder;\n    }\n\n    public associateContextFree(contextFreeGroup: ContextFreeGroupCallback) {\n        this.contextFreeGroups.push(contextFreeGroup);\n        return this;\n    }\n\n    public async send(config?: TransactConfig): Promise<PushTransactionArgs|TransactResult> {\n        const contextFreeDataSet: Uint8Array[] = [];\n        const contextFreeActions: ser.SerializedAction[] = [];\n        const actions: ser.SerializedAction[] = this.actions.map((actionBuilder) => actionBuilder.serializedData as ser.SerializedAction);\n        await Promise.all(this.contextFreeGroups.map(\n            async (contextFreeCallback: ContextFreeGroupCallback) => {\n                const { action, contextFreeAction, contextFreeData } = contextFreeCallback({\n                    cfd: contextFreeDataSet.length,\n                    cfa: contextFreeActions.length\n                });\n                if (action) {\n                    actions.push(action);\n                }\n                if (contextFreeAction) {\n                    contextFreeActions.push(contextFreeAction);\n                }\n                if (contextFreeData) {\n                    contextFreeDataSet.push(contextFreeData);\n                }\n            }\n        ));\n        this.contextFreeGroups = [];\n        this.actions = [];\n        return await this.api.transact({\n            context_free_data: contextFreeDataSet,\n            context_free_actions: contextFreeActions,\n            actions\n        }, config);\n    }\n}\n\nexport class ActionBuilder {\n    private api: Api;\n    private readonly accountName: string;\n    public serializedData: ser.SerializedAction | undefined;\n\n    constructor(api: Api, accountName: string) {\n        this.api = api;\n        this.accountName = accountName;\n    }\n\n    public as(actorName: string | ser.Authorization[] = []) {\n        let authorization: ser.Authorization[] = [];\n        if (actorName && typeof actorName === 'string') {\n            authorization = [{ actor: actorName, permission: 'active'}];\n        } else {\n            authorization = actorName as ser.Authorization[];\n        }\n\n        return new ActionSerializer(this, this.api, this.accountName, authorization) as ActionSerializerType;\n    }\n}\n\nclass ActionSerializer implements ActionSerializerType {\n    constructor(\n        parent: ActionBuilder,\n        api: Api,\n        accountName: string,\n        authorization: ser.Authorization[],\n    ) {\n        const jsonAbi = api.cachedAbis.get(accountName);\n        if (!jsonAbi) {\n            throw new Error('ABI must be cached before using ActionBuilder, run api.getAbi()');\n        }\n        const types = ser.getTypesFromAbi(ser.createInitialTypes(), jsonAbi.abi);\n        const actions = new Map<string, ser.Type>();\n        for (const { name, type } of jsonAbi.abi.actions) {\n            actions.set(name, ser.getType(types, type));\n        }\n        actions.forEach((type, name) => {\n            Object.assign(this, {\n                [name]: (...args: any[]) => {\n                    const data: { [key: string]: any } = {};\n                    args.forEach((arg, index) => {\n                        const field = type.fields[index];\n                        data[field.name] = arg;\n                    });\n                    const serializedData = ser.serializeAction(\n                        { types, actions },\n                        accountName,\n                        name,\n                        authorization,\n                        data\n                    );\n                    parent.serializedData = serializedData;\n                    return serializedData;\n                }\n            });\n        });\n    }\n}\n","/**\n * @module Javascript-API\n */\n\nimport { Abi, PushTransactionArgs } from '../rpc/types';\nimport { Anyvar, Authorization, Action, SerializedAction } from './serialize';\n\n/** Arguments to `getRequiredKeys` */\nexport interface AuthorityProviderArgs {\n    /** Transaction that needs to be signed */\n    transaction: any;\n\n    /** Public keys associated with the private keys that the `SignatureProvider` holds */\n    availableKeys: string[];\n}\n\n/** Get subset of `availableKeys` needed to meet authorities in `transaction` */\nexport interface AuthorityProvider {\n    /** Get subset of `availableKeys` needed to meet authorities in `transaction` */\n    getRequiredKeys: (args: AuthorityProviderArgs) => Promise<string[]>;\n}\n\n/** Retrieves raw ABIs for a specified accountName */\nexport interface AbiProvider {\n    /** Retrieve the BinaryAbi */\n    getRawAbi: (accountName: string) => Promise<BinaryAbi>;\n}\n\n/** Structure for the raw form of ABIs */\nexport interface BinaryAbi {\n    /** account which has deployed the ABI */\n    accountName: string;\n\n    /** abi in binary form */\n    abi: Uint8Array;\n}\n\n/** Holds a fetched abi */\nexport interface CachedAbi {\n    /** abi in binary form */\n    rawAbi: Uint8Array;\n\n    /** abi in structured form */\n    abi: Abi;\n}\n\n/** Arguments to `sign` */\nexport interface SignatureProviderArgs {\n    /** Chain transaction is for */\n    chainId: string;\n\n    /** Public keys associated with the private keys needed to sign the transaction */\n    requiredKeys: string[];\n\n    /** Transaction to sign */\n    serializedTransaction: Uint8Array;\n\n    /** Context-free data to sign */\n    serializedContextFreeData?: Uint8Array;\n\n    /** ABIs for all contracts with actions included in `serializedTransaction` */\n    abis: BinaryAbi[];\n}\n\n/** Signs transactions */\nexport interface SignatureProvider {\n    /** Public keys associated with the private keys that the `SignatureProvider` holds */\n    getAvailableKeys: () => Promise<string[]>;\n\n    /** Sign a transaction */\n    sign: (args: SignatureProviderArgs) => Promise<PushTransactionArgs>;\n}\n\nexport interface Extension {\n    type: number;\n    data: string;\n}\n\nexport interface Transaction {\n    expiration?: string;\n    ref_block_num?: number;\n    ref_block_prefix?: number;\n    max_net_usage_words?: number;\n    max_cpu_usage_ms?: number;\n    delay_sec?: number;\n    context_free_actions?: Action[];\n    context_free_data?: Uint8Array[];\n    actions: Action[];\n    transaction_extensions?: Extension[];\n}\n\nexport interface AccountDelta {\n    account: string;\n    delta: number;\n}\n\nexport interface AuthSequence {\n    account: string;\n    sequence: number;\n}\n\nexport interface ActionReceipt {\n    receiver: string;\n    act_digest: string;\n    global_sequence: number;\n    recv_sequence: number;\n    auth_sequence: AuthSequence[];\n    code_sequence: number;\n    abi_sequence: number;\n}\n\nexport interface ActionTrace {\n    action_ordinal: number;\n    creator_action_ordinal: number;\n    closest_unnotified_ancestor_action_ordinal: number;\n    receipt: ActionReceipt;\n    receiver: string;\n    act: Action;\n    context_free: boolean;\n    elapsed: number;\n    console: string;\n    trx_id: string;\n    block_num: number;\n    block_time: string;\n    producer_block_id: string|null;\n    account_ram_deltas: AccountDelta[];\n    account_disk_deltas: AccountDelta[];\n    except: any;\n    error_code: number|null;\n    return_value: any;\n    return_value_hex?: string;\n    return_value_data?: any;\n    inline_traces: ActionTrace[];\n}\n\nexport interface TransactionReceiptHeader {\n    status: string;\n    cpu_usage_us: number;\n    net_usage_words: number;\n}\n\nexport interface TransactionTrace {\n    id: string;\n    block_num: number;\n    block_time: string;\n    producer_block_id: string|null;\n    receipt: TransactionReceiptHeader|null;\n    elapsed: number;\n    net_usage: number;\n    scheduled: boolean;\n    action_traces: ActionTrace[];\n    account_ram_delta: AccountDelta|null;\n    except: string|null;\n    error_code: number|null;\n}\n\nexport interface TransactResult {\n    transaction_id?: string;\n    processed: TransactionTrace;\n}\n\n/** Optional query configuration object */\nexport interface QueryConfig {\n    sign?: boolean;\n    requiredKeys?: string[];\n    authorization?: Authorization[];\n}\n\n/**\n * A Query may be any of the following:\n * * string:                                           method\n * * [string, Query[]]:                                [method, filter]\n * * [string, Anyvar, Query[]]:                        [method, arg, filter]\n * * {method: string, arg?: Anyvar, filter?: Query[]}  explicit form\n */\nexport type Query =\n   string | [string, Query[]] | [string, Anyvar, Query[]] | { method: string, arg?: Anyvar, filter?: Query[] };\n\nexport type ContextFreeGroupCallback =\n    (index: {cfa: number, cfd: number}) => {\n        action?: SerializedAction;\n        contextFreeAction?: SerializedAction;\n        contextFreeData?: Uint8Array;\n    };\n\nexport interface ActionSerializerType {\n    [actionName: string]: any;\n};\n\n\n/** NEW: Optional transact configuration object */\nexport interface TransactConfig {\n    broadcast?: boolean;\n    sign?: boolean;\n    compression?: boolean;\n    blocksBehind?: number;\n    useLastIrreversible?: boolean;\n    expireSeconds?: number;\n    requiredKeys?: string[],\n    transactionHeader?: any\n}\n","import { JsonRpc } from './index'\nimport { AuthorityProviderArgs } from '../api/types';\nimport { convertLegacyPublicKeys } from '../api/numeric';\nimport {\n    GetBlockInfoResult,\n    GetBlockResult,\n    GetInfoResult,\n    GetBlockHeaderStateResult,\n    GetActivatedProtocolFeaturesResult\n} from './types';\n\n/** Raw call to `/v1/chain/get_account` */\nexport async function get_account(this: JsonRpc, accountName: string): Promise<any> {\n    return await this.post('/v1/chain/get_account', { account_name: accountName });\n}\n\n/** Raw call to `/v1/chain/get_block_header_state` */\nexport async function get_block_header_state(this: JsonRpc, blockNumOrId: number | string): Promise<GetBlockHeaderStateResult> {\n    return await this.post('/v1/chain/get_block_header_state', { block_num_or_id: blockNumOrId });\n}\n\nexport async function get_block_info(this: JsonRpc, blockNum: number): Promise<GetBlockInfoResult> {\n    return await this.post('/v1/chain/get_block_info', { block_num: blockNum });\n}\n\n/** Raw call to `/v1/chain/get_block` */\nexport async function get_block(this: JsonRpc, blockNumOrId: number | string): Promise<GetBlockResult> {\n    return await this.post('/v1/chain/get_block', { block_num_or_id: blockNumOrId });\n}\n\n/** Raw call to `/v1/chain/get_currency_balance` */\nexport async function get_currency_balance(this: JsonRpc, code: string, account: string, symbol: string | null = null): Promise<any> {\n    return await this.post('/v1/chain/get_currency_balance', { code, account, symbol });\n}\n\n/** Raw call to `/v1/chain/get_currency_stats` */\nexport async function get_currency_stats(this: JsonRpc, code: string, symbol: string): Promise<any> {\n    return await this.post('/v1/chain/get_currency_stats', { code, symbol });\n}\n\n/** Raw call to `/v1/chain/get_info` */\nexport async function get_info(this: JsonRpc): Promise<GetInfoResult> {\n    return await this.post('/v1/chain/get_info', {});\n}\n\n/** Raw call to `/v1/chain/get_producer_schedule` */\nexport async function get_producer_schedule(this: JsonRpc): Promise<any> {\n    return await this.post('/v1/chain/get_producer_schedule', {});\n}\n\n/** Raw call to `/v1/chain/get_producers` */\nexport async function get_producers(this: JsonRpc, json = true, lowerBound = '', limit = 50): Promise<any> {\n    return await this.post('/v1/chain/get_producers', { json, lower_bound: lowerBound, limit });\n}\n\n/** Raw call to `/v1/chain/get_scheduled_transactions` */\nexport async function get_scheduled_transactions(this: JsonRpc, json = true, lowerBound = '', limit = 50): Promise<any> {\n    return await this.post('/v1/chain/get_scheduled_transactions', { json, lower_bound: lowerBound, limit });\n}\n\n/** Raw call to `/v1/chain/get_activated_protocol_features` */\nexport async function get_activated_protocol_features(this: JsonRpc, limit = 100): Promise<GetActivatedProtocolFeaturesResult> {\n    return await this.post('/v1/chain/get_activated_protocol_features', { limit });\n}\n\n/** Get subset of `availableKeys` needed to meet authorities in `transaction`. Implements `AuthorityProvider` */\nexport async function getRequiredKeys(this: JsonRpc, args: AuthorityProviderArgs): Promise<string[]> {\n    const requiredKeys = await this.post('/v1/chain/get_required_keys', {\n        transaction: args.transaction,\n        available_keys: args.availableKeys,\n    })\n    return convertLegacyPublicKeys(requiredKeys.required_keys);\n}","import { JsonRpc } from './index'\n\n/** Raw call to `/v1/history/get_actions` */\nexport async function history_get_actions(this: JsonRpc, accountName: string, pos: number | null = null, offset: number | null = null) {\n    return await this.post('/v1/history/get_actions', { account_name: accountName, pos, offset });\n}\n\n/** Raw call to `/v1/history/get_transaction` */\nexport async function history_get_transaction(this: JsonRpc, id: string, blockNumHint: number | null = null) {\n    return await this.post('/v1/history/get_transaction', { id, block_num_hint: blockNumHint });\n}\n\n/** Raw call to `/v1/history/get_key_accounts` */\nexport async function history_get_key_accounts(this: JsonRpc, publicKey: string) {\n    return await this.post('/v1/history/get_key_accounts', { public_key: publicKey });\n}\n\n/** Raw call to `/v1/history/get_controlled_accounts` */\nexport async function history_get_controlled_accounts(this: JsonRpc, controllingAccount: string) {\n    return await this.post('/v1/history/get_controlled_accounts', { controlling_account: controllingAccount });\n}","import { JsonRpc } from './index'\n\n/** Raw call to `/v1/db_size/get` */\nexport async function db_size_get(this: JsonRpc) {\n    return await this.post('/v1/db_size/get', {});\n}","/**\n * @module RPC-API-Methods\n * copyright defined in eosjs/LICENSE.txt\n */\n\n/** Structured format for abis */\nexport interface Abi {\n    version: string;\n    types: { new_type_name: string, type: string }[];\n    structs: { name: string, base: string, fields: { name: string, type: string }[] }[];\n    actions: { name: string, type: string, ricardian_contract: string }[];\n    tables: { name: string, type: string, index_type: string, key_names: string[], key_types: string[] }[];\n    ricardian_clauses: { id: string, body: string }[];\n    error_messages: { error_code: string, error_msg: string }[];\n    abi_extensions: { tag: number, value: string }[];\n    variants?: { name: string, types: string[] }[];\n}\n\nexport interface BlockHeader {\n    timestamp: string;\n    producer: string;\n    confirmed: number;\n    previous: string;\n    transaction_mroot: string;\n    action_mroot: string;\n    schedule_version: number;\n    new_producers: any;\n    header_extensions: any;\n}\n\nexport interface SignedBlockHeader extends BlockHeader {\n    producer_signature: string;\n}\n\n/** Return value of `/v1/chain/get_abi` */\nexport interface GetAbiResult {\n    account_name: string;\n    abi: Abi;\n}\n\n/** Return value of `/v1/chain/get_block_info` */\nexport interface GetBlockInfoResult {\n    timestamp: string;\n    producer: string;\n    confirmed: number;\n    previous: string;\n    transaction_mroot: string;\n    action_mroot: string;\n    schedule_version: number;\n    producer_signature: string;\n    id: string;\n    block_num: number;\n    ref_block_prefix: number;\n}\n\n/** Return value of `/v1/chain/get_block` */\nexport interface GetBlockResult {\n    timestamp: string;\n    producer: string;\n    confirmed: number;\n    previous: string;\n    transaction_mroot: string;\n    action_mroot: string;\n    schedule_version: number;\n    producer_signature: string;\n    id: string;\n    block_num: number;\n    ref_block_prefix: number;\n}\n\n/** Used to calculate TAPoS fields in transactions */\nexport interface BlockTaposInfo {\n    block_num: number;\n    id: string;\n    timestamp?: string;\n    header?: BlockHeader;\n}\n\n/** Return value of `v1/chain/get_block_header_state */\nexport interface GetBlockHeaderStateResult {\n    id: string;\n    header: SignedBlockHeader;\n    pending_schedule: any;\n    activated_protocol_features: any;\n    block_num: number;\n    dpos_proposed_irreversible_blocknum: number;\n    dpos_irreversible_blocknum: number;\n    active_schedule: any;\n    blockroot_merkle: any;\n    producer_to_last_produced: any;\n    producer_to_last_implied_irb: any;\n    block_signing_key: string;\n    confirm_count: any;\n}\n\n/** Subset of `GetBlockHeaderStateResult` used to calculate TAPoS fields in transactions */\nexport interface BlockHeaderStateTaposInfo {\n    block_num: number;\n    id: string;\n    header: SignedBlockHeader;\n}\n\n/** Return value of `/v1/chain/get_code` */\nexport interface GetCodeResult {\n    account_name: string;\n    code_hash: string;\n    wast: string;\n    wasm: string;\n    abi: Abi;\n}\n\n/** Return value of `/v1/chain/get_info` */\nexport interface GetInfoResult {\n    server_version: string;\n    chain_id: string;\n    head_block_num: number;\n    last_irreversible_block_num: number;\n    last_irreversible_block_id: string;\n    last_irreversible_block_time: string;\n    head_block_id: string;\n    head_block_time: string;\n    head_block_producer: string;\n    virtual_block_cpu_limit: number;\n    virtual_block_net_limit: number;\n    block_cpu_limit: number;\n    block_net_limit: number;\n}\n\n/** Return value of `/v1/chain/get_raw_code_and_abi` */\nexport interface GetRawCodeAndAbiResult {\n    account_name: string;\n    wasm: string;\n    abi: string;\n}\n\n/** Return value of `/v1/chain/get_raw_abi` */\nexport interface GetRawAbiResult {\n    account_name: string;\n    code_hash: string;\n    abi_hash: string;\n    abi: string;\n}\n\n/** Arguments for `push_transaction` */\nexport interface PushTransactionArgs {\n    signatures: string[];\n    compression?: number;\n    serializedTransaction: Uint8Array;\n    serializedContextFreeData?: Uint8Array;\n}\n\n\n/** Return value of `/v1/chain/get_activated_protocol_features` */\nexport interface Specification {\n    name:  string;\n    value: string;\n}\n\nexport interface GetActivatedProtocolFeaturesResult {\n    feature_digest:        string;\n    activation_ordinal:    number;\n    activation_block_num:  number;\n    description_digest:    string;\n    dependencies:          any[];\n    protocol_feature_type: string;\n    specification:         Specification[];\n}\n\n/** Return value of `/v1/chain/get_account`  */\nexport type KycInfo = {\n    kyc_provider: string;\n    kyc_level: string;\n    kyc_date: number;\n}\n\n/** Return value of get_table_rows on kycproviders */\nexport type KycProvider = {\n    blisted: number;\n    desc: string;\n    iconurl: string;\n    kyc_provider: string;\n    name: string;\n    url: string;\n}\n\nexport type UserInfo = {\n    acc: string;\n    avatar: string;\n    date: number;\n    aacts: any[]; \n    ac: any[];\n    isLightKYCVerified?: boolean;\n    kyc: KycInfo[];\n    name: string;\n    raccs: any[];\n    verified: number;\n    verifiedon: number;\n    verifier: string;\n}\n\nexport interface Country {\n    id: string;\n    name: string;\n    region: string;\n    active: boolean;\n    localCurrency: string;\n}\n\nexport interface CountryOption {\n    key: string;\n    value: string;\n    flag: string;\n    text: string;\n}\n\nexport interface ApplyForKycParams {\n    chain: string;\n    actor: string;\n    permission: string;\n    transaction: any;\n    signatures: string[];\n    chainId: string;\n}\n  \nexport interface KycApplyResponse {\n    id:           string;\n    chainAccount: string;\n    status:       string;\n    tier:         number;\n    created:      Date;\n    updated:      Date;\n}\n  \nexport interface KycIpInfo {\n    ip:             string;\n    type:           string;\n    continent_code: string;\n    continent_name: string;\n    country_code:   string;\n    country_name:   string;\n    region_code:    string;\n    region_name:    string;\n    city:           string;\n    zip:            string;\n    latitude:       number;\n    longitude:      number;\n    location: {\n      geoname_id: number;\n      capital: string;\n      languages: {\n        code:   string;\n        name:   string;\n        native: string;\n      } [];\n      country_flag:               string;\n      country_flag_emoji:         string;\n      country_flag_emoji_unicode: string;\n      calling_code:               string;\n      is_eu:                      boolean;\n    };\n    time_zone: {\n      id:                 string;\n      current_time:       Date;\n      gmt_offset:         number;\n      code:               string;\n      is_daylight_saving: boolean;\n    };\n    currency: {\n      code:          string;\n      name:          string;\n      plural:        string;\n      symbol:        string;\n      symbol_native: string;\n    };\n    connection: {\n      asn: number;\n      isp: string;\n    };\n}\n\nexport enum KycStatus {\n    FAILED = \"FAILED\",\n    UNSUBMITTED = \"UNSUBMITTED\",\n    PENDING = \"PENDING\",\n    PASSED = \"PASSED\"\n}\n\nexport type KycStatusResponse = {\n    tier: string;\n    status: KycStatus;\n}[]\n","export default [\n  { key: 'AF', value: 'AF', flag: 'af', text: 'Afghanistan' },\n  { key: 'AX', value: 'AX', flag: 'ax', text: 'Aland Islands' },\n  { key: 'AL', value: 'AL', flag: 'al', text: 'Albania' },\n  { key: 'DZ', value: 'DZ', flag: 'dz', text: 'Algeria' },\n  { key: 'AS', value: 'AS', flag: 'as', text: 'American Samoa' },\n  { key: 'AD', value: 'AD', flag: 'ad', text: 'Andorra' },\n  { key: 'AO', value: 'AO', flag: 'ao', text: 'Angola' },\n  { key: 'AI', value: 'AI', flag: 'ai', text: 'Anguilla' },\n  { key: 'AG', value: 'AG', flag: 'ag', text: 'Antigua' },\n  { key: 'AR', value: 'AR', flag: 'ar', text: 'Argentina' },\n  { key: 'AM', value: 'AM', flag: 'am', text: 'Armenia' },\n  { key: 'AW', value: 'AW', flag: 'aw', text: 'Aruba' },\n  { key: 'AU', value: 'AU', flag: 'au', text: 'Australia' },\n  { key: 'AT', value: 'AT', flag: 'at', text: 'Austria' },\n  { key: 'AZ', value: 'AZ', flag: 'az', text: 'Azerbaijan' },\n  { key: 'BS', value: 'BS', flag: 'bs', text: 'Bahamas' },\n  { key: 'BH', value: 'BH', flag: 'bh', text: 'Bahrain' },\n  { key: 'BD', value: 'BD', flag: 'bd', text: 'Bangladesh' },\n  { key: 'BB', value: 'BB', flag: 'bb', text: 'Barbados' },\n  { key: 'BY', value: 'BY', flag: 'by', text: 'Belarus' },\n  { key: 'BE', value: 'BE', flag: 'be', text: 'Belgium' },\n  { key: 'BZ', value: 'BZ', flag: 'bz', text: 'Belize' },\n  { key: 'BJ', value: 'BJ', flag: 'bj', text: 'Benin' },\n  { key: 'BM', value: 'BM', flag: 'bm', text: 'Bermuda' },\n  { key: 'BT', value: 'BT', flag: 'bt', text: 'Bhutan' },\n  { key: 'BO', value: 'BO', flag: 'bo', text: 'Bolivia' },\n  { key: 'BA', value: 'BA', flag: 'ba', text: 'Bosnia' },\n  { key: 'BW', value: 'BW', flag: 'bw', text: 'Botswana' },\n  { key: 'BV', value: 'BV', flag: 'bv', text: 'Bouvet Island' },\n  { key: 'BR', value: 'BR', flag: 'br', text: 'Brazil' },\n  { key: 'VG', value: 'VG', flag: 'vg', text: 'British Virgin Islands' },\n  { key: 'BN', value: 'BN', flag: 'bn', text: 'Brunei' },\n  { key: 'BG', value: 'BG', flag: 'bg', text: 'Bulgaria' },\n  { key: 'BF', value: 'BF', flag: 'bf', text: 'Burkina Faso' },\n  { key: 'BI', value: 'BI', flag: 'bi', text: 'Burundi' },\n  { key: 'TC', value: 'TC', flag: 'tc', text: 'Caicos Islands' },\n  { key: 'KH', value: 'KH', flag: 'kh', text: 'Cambodia' },\n  { key: 'CM', value: 'CM', flag: 'cm', text: 'Cameroon' },\n  { key: 'CA', value: 'CA', flag: 'ca', text: 'Canada' },\n  { key: 'CV', value: 'CV', flag: 'cv', text: 'Cape Verde' },\n  { key: 'KY', value: 'KY', flag: 'ky', text: 'Cayman Islands' },\n  { key: 'CF', value: 'CF', flag: 'cf', text: 'Central African Republic' },\n  { key: 'TD', value: 'TD', flag: 'td', text: 'Chad' },\n  { key: 'CL', value: 'CL', flag: 'cl', text: 'Chile' },\n  { key: 'CN', value: 'CN', flag: 'cn', text: 'China' },\n  { key: 'CX', value: 'CX', flag: 'cx', text: 'Christmas Island' },\n  { key: 'CC', value: 'CC', flag: 'cc', text: 'Cocos Islands' },\n  { key: 'CO', value: 'CO', flag: 'co', text: 'Colombia' },\n  { key: 'KM', value: 'KM', flag: 'km', text: 'Comoros' },\n  { key: 'CG', value: 'CG', flag: 'cg', text: 'Congo Brazzaville' },\n  { key: 'CD', value: 'CD', flag: 'cd', text: 'Congo' },\n  { key: 'CK', value: 'CK', flag: 'ck', text: 'Cook Islands' },\n  { key: 'CR', value: 'CR', flag: 'cr', text: 'Costa Rica' },\n  { key: 'CI', value: 'CI', flag: 'ci', text: 'Cote Divoire' },\n  { key: 'HR', value: 'HR', flag: 'hr', text: 'Croatia' },\n  { key: 'CU', value: 'CU', flag: 'cu', text: 'Cuba' },\n  { key: 'CY', value: 'CY', flag: 'cy', text: 'Cyprus' },\n  { key: 'CZ', value: 'CZ', flag: 'cz', text: 'Czech Republic' },\n  { key: 'DK', value: 'DK', flag: 'dk', text: 'Denmark' },\n  { key: 'DJ', value: 'DJ', flag: 'dj', text: 'Djibouti' },\n  { key: 'DM', value: 'DM', flag: 'dm', text: 'Dominica' },\n  { key: 'DO', value: 'DO', flag: 'do', text: 'Dominican Republic' },\n  { key: 'EC', value: 'EC', flag: 'ec', text: 'Ecuador' },\n  { key: 'EG', value: 'EG', flag: 'eg', text: 'Egypt' },\n  { key: 'SV', value: 'SV', flag: 'sv', text: 'El Salvador' },\n  { key: 'GB', value: 'GB', flag: 'gb', text: 'England' },\n  { key: 'GQ', value: 'GQ', flag: 'gq', text: 'Equatorial Guinea' },\n  { key: 'ER', value: 'ER', flag: 'er', text: 'Eritrea' },\n  { key: 'EE', value: 'EE', flag: 'ee', text: 'Estonia' },\n  { key: 'ET', value: 'ET', flag: 'et', text: 'Ethiopia' },\n  { key: 'EU', value: 'EU', flag: 'eu', text: 'European Union' },\n  { key: 'FK', value: 'FK', flag: 'fk', text: 'Falkland Islands' },\n  { key: 'FO', value: 'FO', flag: 'fo', text: 'Faroe Islands' },\n  { key: 'FJ', value: 'FJ', flag: 'fj', text: 'Fiji' },\n  { key: 'FI', value: 'FI', flag: 'fi', text: 'Finland' },\n  { key: 'FR', value: 'FR', flag: 'fr', text: 'France' },\n  { key: 'GF', value: 'GF', flag: 'gf', text: 'French Guiana' },\n  { key: 'PF', value: 'PF', flag: 'pf', text: 'French Polynesia' },\n  { key: 'TF', value: 'TF', flag: 'tf', text: 'French Territories' },\n  { key: 'GA', value: 'GA', flag: 'ga', text: 'Gabon' },\n  { key: 'GM', value: 'GM', flag: 'gm', text: 'Gambia' },\n  { key: 'GE', value: 'GE', flag: 'ge', text: 'Georgia' },\n  { key: 'DE', value: 'DE', flag: 'de', text: 'Germany' },\n  { key: 'GH', value: 'GH', flag: 'gh', text: 'Ghana' },\n  { key: 'GI', value: 'GI', flag: 'gi', text: 'Gibraltar' },\n  { key: 'GR', value: 'GR', flag: 'gr', text: 'Greece' },\n  { key: 'GL', value: 'GL', flag: 'gl', text: 'Greenland' },\n  { key: 'GD', value: 'GD', flag: 'gd', text: 'Grenada' },\n  { key: 'GP', value: 'GP', flag: 'gp', text: 'Guadeloupe' },\n  { key: 'GU', value: 'GU', flag: 'gu', text: 'Guam' },\n  { key: 'GT', value: 'GT', flag: 'gt', text: 'Guatemala' },\n  { key: 'GW', value: 'GW', flag: 'gw', text: 'Guinea-Bissau' },\n  { key: 'GN', value: 'GN', flag: 'gn', text: 'Guinea' },\n  { key: 'GY', value: 'GY', flag: 'gy', text: 'Guyana' },\n  { key: 'HT', value: 'HT', flag: 'ht', text: 'Haiti' },\n  { key: 'HM', value: 'HM', flag: 'hm', text: 'Heard Island' },\n  { key: 'HN', value: 'HN', flag: 'hn', text: 'Honduras' },\n  { key: 'HK', value: 'HK', flag: 'hk', text: 'Hong Kong' },\n  { key: 'HU', value: 'HU', flag: 'hu', text: 'Hungary' },\n  { key: 'IS', value: 'IS', flag: 'is', text: 'Iceland' },\n  { key: 'IN', value: 'IN', flag: 'in', text: 'India' },\n  { key: 'IO', value: 'IO', flag: 'io', text: 'Indian Ocean Territory' },\n  { key: 'ID', value: 'ID', flag: 'id', text: 'Indonesia' },\n  { key: 'IR', value: 'IR', flag: 'ir', text: 'Iran' },\n  { key: 'IQ', value: 'IQ', flag: 'iq', text: 'Iraq' },\n  { key: 'IE', value: 'IE', flag: 'ie', text: 'Ireland' },\n  { key: 'IL', value: 'IL', flag: 'il', text: 'Israel' },\n  { key: 'IT', value: 'IT', flag: 'it', text: 'Italy' },\n  { key: 'JM', value: 'JM', flag: 'jm', text: 'Jamaica' },\n  { key: 'JP', value: 'JP', flag: 'jp', text: 'Japan' },\n  { key: 'JO', value: 'JO', flag: 'jo', text: 'Jordan' },\n  { key: 'KZ', value: 'KZ', flag: 'kz', text: 'Kazakhstan' },\n  { key: 'KE', value: 'KE', flag: 'ke', text: 'Kenya' },\n  { key: 'KI', value: 'KI', flag: 'ki', text: 'Kiribati' },\n  { key: 'KW', value: 'KW', flag: 'kw', text: 'Kuwait' },\n  { key: 'KG', value: 'KG', flag: 'kg', text: 'Kyrgyzstan' },\n  { key: 'LA', value: 'LA', flag: 'la', text: 'Laos' },\n  { key: 'LV', value: 'LV', flag: 'lv', text: 'Latvia' },\n  { key: 'LB', value: 'LB', flag: 'lb', text: 'Lebanon' },\n  { key: 'LS', value: 'LS', flag: 'ls', text: 'Lesotho' },\n  { key: 'LR', value: 'LR', flag: 'lr', text: 'Liberia' },\n  { key: 'LY', value: 'LY', flag: 'ly', text: 'Libya' },\n  { key: 'LI', value: 'LI', flag: 'li', text: 'Liechtenstein' },\n  { key: 'LT', value: 'LT', flag: 'lt', text: 'Lithuania' },\n  { key: 'LU', value: 'LU', flag: 'lu', text: 'Luxembourg' },\n  { key: 'MO', value: 'MO', flag: 'mo', text: 'Macau' },\n  { key: 'MK', value: 'MK', flag: 'mk', text: 'Macedonia' },\n  { key: 'MG', value: 'MG', flag: 'mg', text: 'Madagascar' },\n  { key: 'MW', value: 'MW', flag: 'mw', text: 'Malawi' },\n  { key: 'MY', value: 'MY', flag: 'my', text: 'Malaysia' },\n  { key: 'MV', value: 'MV', flag: 'mv', text: 'Maldives' },\n  { key: 'ML', value: 'ML', flag: 'ml', text: 'Mali' },\n  { key: 'MT', value: 'MT', flag: 'mt', text: 'Malta' },\n  { key: 'MH', value: 'MH', flag: 'mh', text: 'Marshall Islands' },\n  { key: 'MQ', value: 'MQ', flag: 'mq', text: 'Martinique' },\n  { key: 'MR', value: 'MR', flag: 'mr', text: 'Mauritania' },\n  { key: 'MU', value: 'MU', flag: 'mu', text: 'Mauritius' },\n  { key: 'YT', value: 'YT', flag: 'yt', text: 'Mayotte' },\n  { key: 'MX', value: 'MX', flag: 'mx', text: 'Mexico' },\n  { key: 'FM', value: 'FM', flag: 'fm', text: 'Micronesia' },\n  { key: 'MD', value: 'MD', flag: 'md', text: 'Moldova' },\n  { key: 'MC', value: 'MC', flag: 'mc', text: 'Monaco' },\n  { key: 'MN', value: 'MN', flag: 'mn', text: 'Mongolia' },\n  { key: 'ME', value: 'ME', flag: 'me', text: 'Montenegro' },\n  { key: 'MS', value: 'MS', flag: 'ms', text: 'Montserrat' },\n  { key: 'MA', value: 'MA', flag: 'ma', text: 'Morocco' },\n  { key: 'MZ', value: 'MZ', flag: 'mz', text: 'Mozambique' },\n  { key: 'NA', value: 'NA', flag: 'na', text: 'Namibia' },\n  { key: 'NR', value: 'NR', flag: 'nr', text: 'Nauru' },\n  { key: 'NP', value: 'NP', flag: 'np', text: 'Nepal' },\n  { key: 'AN', value: 'AN', flag: 'an', text: 'Netherlands Antilles' },\n  { key: 'NL', value: 'NL', flag: 'nl', text: 'Netherlands' },\n  { key: 'NC', value: 'NC', flag: 'nc', text: 'New Caledonia' },\n  { key: 'PG', value: 'PG', flag: 'pg', text: 'New Guinea' },\n  { key: 'NZ', value: 'NZ', flag: 'nz', text: 'New Zealand' },\n  { key: 'NI', value: 'NI', flag: 'ni', text: 'Nicaragua' },\n  { key: 'NE', value: 'NE', flag: 'ne', text: 'Niger' },\n  { key: 'NG', value: 'NG', flag: 'ng', text: 'Nigeria' },\n  { key: 'NU', value: 'NU', flag: 'nu', text: 'Niue' },\n  { key: 'NF', value: 'NF', flag: 'nf', text: 'Norfolk Island' },\n  { key: 'KP', value: 'KP', flag: 'kp', text: 'North Korea' },\n  { key: 'MP', value: 'MP', flag: 'mp', text: 'Northern Mariana Islands' },\n  { key: 'NO', value: 'NO', flag: 'no', text: 'Norway' },\n  { key: 'OM', value: 'OM', flag: 'om', text: 'Oman' },\n  { key: 'PK', value: 'PK', flag: 'pk', text: 'Pakistan' },\n  { key: 'PW', value: 'PW', flag: 'pw', text: 'Palau' },\n  { key: 'PS', value: 'PS', flag: 'ps', text: 'Palestine' },\n  { key: 'PA', value: 'PA', flag: 'pa', text: 'Panama' },\n  { key: 'PY', value: 'PY', flag: 'py', text: 'Paraguay' },\n  { key: 'PE', value: 'PE', flag: 'pe', text: 'Peru' },\n  { key: 'PH', value: 'PH', flag: 'ph', text: 'Philippines' },\n  { key: 'PN', value: 'PN', flag: 'pn', text: 'Pitcairn Islands' },\n  { key: 'PL', value: 'PL', flag: 'pl', text: 'Poland' },\n  { key: 'PT', value: 'PT', flag: 'pt', text: 'Portugal' },\n  { key: 'PR', value: 'PR', flag: 'pr', text: 'Puerto Rico' },\n  { key: 'QA', value: 'QA', flag: 'qa', text: 'Qatar' },\n  { key: 'RE', value: 'RE', flag: 're', text: 'Reunion' },\n  { key: 'RO', value: 'RO', flag: 'ro', text: 'Romania' },\n  { key: 'RU', value: 'RU', flag: 'ru', text: 'Russia' },\n  { key: 'RW', value: 'RW', flag: 'rw', text: 'Rwanda' },\n  { key: 'SH', value: 'SH', flag: 'sh', text: 'Saint Helena' },\n  { key: 'KN', value: 'KN', flag: 'kn', text: 'Saint Kitts and Nevis' },\n  { key: 'LC', value: 'LC', flag: 'lc', text: 'Saint Lucia' },\n  { key: 'PM', value: 'PM', flag: 'pm', text: 'Saint Pierre' },\n  { key: 'VC', value: 'VC', flag: 'vc', text: 'Saint Vincent' },\n  { key: 'WS', value: 'WS', flag: 'ws', text: 'Samoa' },\n  { key: 'SM', value: 'SM', flag: 'sm', text: 'San Marino' },\n  { key: 'GS', value: 'GS', flag: 'gs', text: 'Sandwich Islands' },\n  { key: 'ST', value: 'ST', flag: 'st', text: 'Sao Tome' },\n  { key: 'SA', value: 'SA', flag: 'sa', text: 'Saudi Arabia' },\n  { key: 'SN', value: 'SN', flag: 'sn', text: 'Senegal' },\n  { key: 'CS', value: 'CS', flag: 'cs', text: 'Serbia' },\n  { key: 'RS', value: 'RS', flag: 'rs', text: 'Serbia' },\n  { key: 'SC', value: 'SC', flag: 'sc', text: 'Seychelles' },\n  { key: 'SL', value: 'SL', flag: 'sl', text: 'Sierra Leone' },\n  { key: 'SG', value: 'SG', flag: 'sg', text: 'Singapore' },\n  { key: 'SK', value: 'SK', flag: 'sk', text: 'Slovakia' },\n  { key: 'SI', value: 'SI', flag: 'si', text: 'Slovenia' },\n  { key: 'SB', value: 'SB', flag: 'sb', text: 'Solomon Islands' },\n  { key: 'SO', value: 'SO', flag: 'so', text: 'Somalia' },\n  { key: 'ZA', value: 'ZA', flag: 'za', text: 'South Africa' },\n  { key: 'KR', value: 'KR', flag: 'kr', text: 'South Korea' },\n  { key: 'ES', value: 'ES', flag: 'es', text: 'Spain' },\n  { key: 'LK', value: 'LK', flag: 'lk', text: 'Sri Lanka' },\n  { key: 'SD', value: 'SD', flag: 'sd', text: 'Sudan' },\n  { key: 'SR', value: 'SR', flag: 'sr', text: 'Suriname' },\n  { key: 'SJ', value: 'SJ', flag: 'sj', text: 'Svalbard' },\n  { key: 'SZ', value: 'SZ', flag: 'sz', text: 'Swaziland' },\n  { key: 'SE', value: 'SE', flag: 'se', text: 'Sweden' },\n  { key: 'CH', value: 'CH', flag: 'ch', text: 'Switzerland' },\n  { key: 'SY', value: 'SY', flag: 'sy', text: 'Syria' },\n  { key: 'TW', value: 'TW', flag: 'tw', text: 'Taiwan' },\n  { key: 'TJ', value: 'TJ', flag: 'tj', text: 'Tajikistan' },\n  { key: 'TZ', value: 'TZ', flag: 'tz', text: 'Tanzania' },\n  { key: 'TH', value: 'TH', flag: 'th', text: 'Thailand' },\n  { key: 'TL', value: 'TL', flag: 'tl', text: 'Timorleste' },\n  { key: 'TG', value: 'TG', flag: 'tg', text: 'Togo' },\n  { key: 'TK', value: 'TK', flag: 'tk', text: 'Tokelau' },\n  { key: 'TO', value: 'TO', flag: 'to', text: 'Tonga' },\n  { key: 'TT', value: 'TT', flag: 'tt', text: 'Trinidad' },\n  { key: 'TN', value: 'TN', flag: 'tn', text: 'Tunisia' },\n  { key: 'TR', value: 'TR', flag: 'tr', text: 'Turkey' },\n  { key: 'TM', value: 'TM', flag: 'tm', text: 'Turkmenistan' },\n  { key: 'TV', value: 'TV', flag: 'tv', text: 'Tuvalu' },\n  { key: 'UG', value: 'UG', flag: 'ug', text: 'Uganda' },\n  { key: 'UA', value: 'UA', flag: 'ua', text: 'Ukraine' },\n  { key: 'AE', value: 'AE', flag: 'ae', text: 'United Arab Emirates' },\n  { key: 'US', value: 'US', flag: 'us', text: 'United States' },\n  { key: 'UY', value: 'UY', flag: 'uy', text: 'Uruguay' },\n  { key: 'UM', value: 'UM', flag: 'um', text: 'Us Minor Islands' },\n  { key: 'VI', value: 'VI', flag: 'vi', text: 'Us Virgin Islands' },\n  { key: 'UZ', value: 'UZ', flag: 'uz', text: 'Uzbekistan' },\n  { key: 'VU', value: 'VU', flag: 'vu', text: 'Vanuatu' },\n  { key: 'VA', value: 'VA', flag: 'va', text: 'Vatican City' },\n  { key: 'VE', value: 'VE', flag: 've', text: 'Venezuela' },\n  { key: 'VN', value: 'VN', flag: 'vn', text: 'Vietnam' },\n  { key: 'WF', value: 'WF', flag: 'wf', text: 'Wallis and Futuna' },\n  { key: 'EH', value: 'EH', flag: 'eh', text: 'Western Sahara' },\n  { key: 'YE', value: 'YE', flag: 'ye', text: 'Yemen' },\n  { key: 'ZM', value: 'ZM', flag: 'zm', text: 'Zambia' },\n  { key: 'ZW', value: 'ZW', flag: 'zw', text: 'Zimbabwe' }\n]\n","import { constants } from '@bloks/constants'\nimport { JsonRpc } from '../index'\nimport { Country, CountryOption, UserInfo, KycProvider, KycIpInfo, ApplyForKycParams, KycApplyResponse, KycStatus, KycStatusResponse } from '../types';\nimport countryOptions from './countryOptions';\n\nexport async function fetchKycCountries (\n  this: JsonRpc,\n  { chain }: { chain: string }\n): Promise<CountryOption[]> {\n  const url = `${constants.BLOKS_API}/${chain}/kyc?type=countries&chain=${chain}`\n  const { content: countries } = await this.get(url)\n  const countriesById = countries.reduce((acc: { [key: string]: Country }, country: Country) => {\n    acc[country.id] = country\n    return acc\n  }, {})\n  return countryOptions.filter(countryOption => countriesById[countryOption.key])\n}\n\n/**\n * Checks blockchain for a list of kycproviders, and sorts through the ones that are blacklisted.\n * @returns An array of strings with valid kyc provider names.\n */\nexport async function getValidKycProviders(this: JsonRpc) {\n  try {\n    const { rows } = await this.get_table_rows({\n      code: 'eosio.proton',\n      table: 'kycproviders',\n      scope: 'eosio.proton',\n    });\n    this.validKycProviders = rows.map((provider: KycProvider) => !provider.blisted && provider.kyc_provider)\n  } catch (e) {\n    throw new Error('Unable to get KYC Providers.')\n  }\n}\n\n/**\n * Takes an account or a list of accounts and checks to make sure that they are light-verified\n * @param account This could be an array of user rows from the usersinfo table on the blockchain, or a singular string for an account name\n * @returns An object of the user data as pulled from the usersinfo table on the blockchain with an additional key, isLightKYCVerified (boolean)\n */\nexport async function isLightKYCVerified(\n  this: JsonRpc,\n  account: UserInfo[] | string\n) {\n    const lightKyc = [\n      \"firstname\",\n      \"lastname\",\n      \"birthdate\",\n      \"address\"\n    ];\n\n    if (account.length === 0) {\n      throw new Error('Please enter an account.');\n    }\n\n    if (this.validKycProviders.length === 0) {\n      await this.getValidKycProviders();\n    }\n\n    let users: UserInfo[] = [];\n\n    if (Array.isArray(account)) {\n      users = account;\n    } else if (typeof account === 'string') {\n      try {\n        const { rows } = await this.get_table_rows({\n            code: 'eosio.proton',\n            table: 'usersinfo',\n            scope: 'eosio.proton',\n            lower_bound: account,\n            upper_bound: account,\n        });\n        \n        users = rows;\n      } catch(e) {\n        throw new Error('Account not found!');\n      }\n    }\n    \n    const resultsWithKycStatus: UserInfo[] = users.map((user: UserInfo) => {\n      const levelsResult: string[] = user.kyc.reduce((acc: string[], kyc) => {\n        if (this.validKycProviders.indexOf(kyc.kyc_provider) >= 0) {\n          const result = kyc.kyc_level.split(',').map((kycItem: string) => kycItem.split(':')[1]);\n          acc = result.concat(acc);\n        }\n\n        return acc\n      }, []);\n\n      user.isLightKYCVerified = lightKyc.every(lightKycField => levelsResult.includes(lightKycField));\n\n      return user\n    })\n\n    return resultsWithKycStatus;\n};\n\n/**\n * FAILED\n * UNSUBMITTED\n * PENDING\n * PASSED\n */\nexport async function checkUserKycStatus (\n  this: JsonRpc,\n  { chain, actor, expectedTier }: { chain: string; actor: string; expectedTier: number; }\n): Promise<KycStatus> {\n  if (!chain || !actor || !expectedTier) {\n    throw new Error('Invalid parameters')\n  }\n\n  return new Promise(async (resolve, reject) => {\n    // Get all KYC records for user\n    const getStatus = async () => {\n      const [userInfo] = await this.isLightKYCVerified(actor)\n      if (userInfo && userInfo.isLightKYCVerified) {\n        return resolve(KycStatus.PASSED)\n      }\n\n      const url = `${constants.BLOKS_API}/${chain}/kyc?type=status&chain=${chain}&actor=${actor}`\n      const kyc: KycStatusResponse = await this.get(url)\n      if (!kyc || !kyc.length) {\n        return reject(new Error('Could not fetch KYC record'))\n      }\n  \n      // Find relevant KYC record\n      const matchedTier = kyc.find(({ tier }: { tier: string }) => tier === String(expectedTier))\n      if (!matchedTier) {\n        return reject(new Error('No kyc data matching tier found'))\n      }\n  \n      // Unwrap kyc data\n      const { status } = matchedTier\n      if (!matchedTier.status) {\n        return reject(new Error('KYC Status not found'))\n      }\n\n      if (status === KycStatus.PENDING) {\n        setTimeout(() => getStatus(), 1000 * 2)\n      } else {\n        return resolve(status)\n      }\n    }\n\n    getStatus()\n  })\n}\n\nexport async function applyForKyc (this: JsonRpc, params: ApplyForKycParams): Promise<KycApplyResponse> {\n  const url = `${constants.BLOKS_API}/${params.chain}/kyc`\n  const data: KycApplyResponse = await this.post(url, {\n    type: 'apply',\n    ...params\n  })\n\n  if (data) {\n    return data\n  } else {\n    throw new Error('Could not apply for KYC')\n  }\n}\n\nexport async function currentLocation (this: JsonRpc): Promise<KycIpInfo> {\n  const url = `${constants.PROTON_API}/v1/kyc/ip-info`\n  return await this.get(url)\n}\n  ","import * as z from 'zod'\nimport { constants } from '@bloks/constants'\n\nexport enum Status {\n    PENDING = 'pending',\n    SUCCESS = 'success',\n    FAIL = 'fail',\n    PROCESSING = 'processing'\n}\n\nexport const accountParser = z.string().regex(/^[.1-5a-z]{0,12}[.1-5a-j]?$/)\n\nexport const authorizationParser = z.object({\n    actor: accountParser,\n    permission: z.string()\n})\nexport type Authorization = z.infer<typeof authorizationParser>\n\nexport const rawTransactionParser = z.object({\n    expiration: z.string(),\n    ref_block_num: z.number(),\n    ref_block_prefix: z.number(),\n    max_net_usage_words: z.number(),\n    max_cpu_usage_ms: z.number(),\n    delay_sec: z.number(),\n    context_free_actions: z.array(z.any()),\n    transaction_extensions: z.array(z.any())\n})\n\nexport const generateAuthParser = z.object({\n    signer: authorizationParser,\n    signatures: z.array(z.string()),\n    transaction: rawTransactionParser.merge(z.object({\n        actions: z.array(z.object({\n            account: accountParser,\n            name: z.string(),\n            data: z.object({\n              time: z.string(),\n              protonAccount: z.string()\n            }),\n            authorization: z.array(authorizationParser).min(1)\n        }))\n    }))\n})\nexport type GenerateAuth = z.infer<typeof generateAuthParser>\n\nexport const generateAddressBodyParser = z.object({\n    coin: z.string(),\n    wallet: z.string(),\n}).merge(generateAuthParser)\nexport type GenerateAddressBody = z.infer<typeof generateAddressBodyParser>\n\nexport const generateAddressResponse = z.object({\n    id:      z.string(), // \"2448834505708930950\",\n    address: z.string(), // \"0x617C03C1E2Bf81C062A4CEfbE312c070E1d86d18\",\n    coin:    z.string(), // \"ETH\",\n    wallet:  z.string(), // \"ETH\",\n    memo:    z.string().optional()\n})\nexport type GenerateAddressResponse = z.infer<typeof generateAddressResponse>\n\nexport const depositBodyParser = z.object({\n    id:     z.string(), // \"0x000010203121388fac991\"\n    externalId: z.string().optional(), // \"2510473254188091220\"\n    type:   z.string(), // \"transfer\"\n    hash:   z.string(), // \"0x000010203121388fac991\"\n    coin:   z.string(), // \"ETH\" or \"XPR\"\n    wallet: z.string(), // \"ETH-ROPSTEN\" or \"XPR-MAINNET\"\n})\nexport type DepositBody = z.infer<typeof depositBodyParser>\n\nexport const withdrawBodyParser = z.object({\n    signer: authorizationParser,\n    signatures: z.array(z.string()).min(1),\n    transaction: rawTransactionParser.merge(z.object({\n        actions: z.array(z.object({\n            account: accountParser,\n            name: z.literal('transfer'),\n            data: z.object({\n                from: z.string().refine((val) => val !== constants.WRAP_CONTRACT, {\n                    message: `${constants.WRAP_CONTRACT} must be receiver`,\n                }),\n                to: z.literal(constants.WRAP_CONTRACT),\n                quantity: z.string(),\n                memo: z.string()\n            }),\n            authorization: z.array(authorizationParser).min(1)\n        })).min(1)\n    })),\n    quoteId: z.string()\n})\nexport type WithdrawBody = z.infer<typeof withdrawBodyParser>\n\nexport const withdrawMetalResponseParser = z.object({\n    success: z.boolean(),\n    id: z.string(),\n})\nexport type WithdrawMetalResponse = z.infer<typeof withdrawMetalResponseParser>\n\nexport const withdrawHistoryMetalSwapParser = z.object({\n    id: z.string(),\n    status: z.string(),\n    amount: z.string(),\n    currency: z.string(),\n    network: z.string(),\n    created: z.string(),\n    withdrawalAddress: z.string(),\n    withdrawalHash: z.string().optional()\n})\nexport type WithdrawHistoryMetalSwap = z.infer<typeof withdrawHistoryMetalSwapParser>\n\nexport const withdrawHistoryMetalResponseParser = z.object({\n    swaps: z.array(withdrawHistoryMetalSwapParser),\n    page: z.number(),\n    pageSize: z.number(),\n    numberOfElements: z.number(),\n    totalPages: z.number(),\n    totalElements: z.number()\n})\nexport type WithdrawHistoryMetalResponse = z.infer<typeof withdrawHistoryMetalResponseParser>\n\nconst ExtendedAssetParser = z.object({\n    quantity: z.string(),\n    contract: accountParser\n})\nexport type ExtendedAsset = z.infer<typeof ExtendedAssetParser>\n\nexport const wrapStartParser = z.object({\n    balance:         ExtendedAssetParser,\n    txid:            z.string(),\n    coin:            z.string(),\n    wallet:          z.string(),\n    deposit_address: z.string(),\n    confirmations:   z.number()\n})\nexport type WrapStart = z.infer<typeof wrapStartParser>\n\nexport const wrapSetConfParser = z.object({\n    wrap_hash:       z.string(),\n    confirmations:   z.number()\n})\nexport type WrapSetConf = z.infer<typeof wrapSetConfParser>\n\nexport const wrapParser = z.object({\n    index:           z.number(),\n    proton_account:  z.string(),\n    balance:         ExtendedAssetParser,\n    txid:            z.string(),\n    coin:            z.string(),\n    wallet:          z.string(),\n    deposit_address: z.string(),\n    status:          z.nativeEnum(Status),\n    finish_txid:     z.string(),\n    wrap_hash:       z.string(),\n    confirmations:   z.number(),\n})\nexport type Wrap = z.infer<typeof wrapParser>\n\nexport const transactionParser = z.object({\n    coin:          z.string(), // \"BTC\"\n    wallet:        z.string(), // \"BTC\"\n    blockhash:     z.string().optional().nullable(), // \"000000000000000000089b270eb99f75107d6a9cde37ec944cb80a2998df7b43\"\n    txid:          z.string(), // \"b4781422be95fee8fbbf720e3e0fa9705ae834474ef25f5724cdd0f5d23211ed\"\n    type:          z.string(), // \"receive\" or \"send\"\n    height:        z.number().optional().nullable(), // 643159\n    confirmations: z.number(), // 18369\n    state:         z.string(), // \"confirmed\"\n    entries: z.array(z.object({\n        address:     z.string(), // \"1CgGHR9bUakXhLz1eBapvP4PDDtta5pHx1\"\n        wallet:      z.string(), // \"BTC\"\n        value:       z.number(), // 84456\n        valueString: z.string(), // \"84456\"\n        isChange:    z.boolean(), // false\n    })),\n    outputs: z.array(z.object({\n        address:     z.string(), // \"1CgGHR9bUakXhLz1eBapvP4PDDtta5pHx1\"\n        wallet:      z.string(), // \"BTC\"\n        fromWallet:  z.string(), // \"BTC\"\n        value:       z.number(), // 84456\n        valueString: z.string(), // \"84456\"\n        coinbase:    z.boolean(), // false\n    })),\n    value:       z.number(), // 84456\n    valueString: z.string(), // \"84456\"\n    pending:     z.boolean(), // false\n    instant:     z.boolean(), // false\n})\nexport type Transaction = z.infer<typeof transactionParser>\n\nexport const addressParser = z.object({\n    index:        z.number(),\n    account:      accountParser,\n    coin:         z.string(),\n    address:      z.string(),\n    wallet:       z.string(),\n    address_hash: z.string(),\n})\nexport type Address = z.infer<typeof addressParser>\n\nexport const otcOrderResponseParser = z.object({\n    success: z.boolean(),\n    transaction_id: z.string(),\n    errormsg: z.string().optional()\n})\nexport type OtcOrderResponse = z.infer<typeof otcOrderResponseParser>\n\nexport const otcQuoteBodyParser = z.object({\n    baseAmount: z.number(),\n    baseSymbol: z.string(),\n    quoteSymbol: z.string()\n})\nexport type OtcQuoteBody = z.infer<typeof otcQuoteBodyParser>\n\nexport const otcQuoteResponseParser = z.object({\n    success: z.boolean(),\n    token: z.string(),\n    qty: z.number(),\n    errormsg: z.string().optional()\n})\nexport type OtcQuoteResponse = z.infer<typeof otcQuoteResponseParser>\n\nexport const rateParser = z.object({\n    counterCurrency: z.string(),\n    price: z.number(),\n    priceChangePercent: z.number(),\n    marketCap: z.number(),\n    volume: z.number(),\n    timestamp: z.number()\n})\nexport type Rate = z.infer<typeof rateParser>\n\nexport const exchangeRateParser = z.object({\n    contract: z.string(),\n    symbol: z.string(),\n    rank: z.number(),\n    rates: z.array(rateParser)\n})\nexport type ExchangeRate = z.infer<typeof exchangeRateParser>\n\nexport const exchangeRatesParser = z.array(exchangeRateParser)\nexport type ExchangeRates = z.infer<typeof exchangeRatesParser>\n\nexport const withdrawalFeeQuoteParser = z.object({\n    quoteId: z.string(),\n    estimatedFee: z.string(),\n    currency: z.string(),\n    network: z.string(),\n})\nexport type WithdrawalFeeQuote = z.infer<typeof withdrawalFeeQuoteParser>","import { constants } from '@bloks/constants'\nimport { JsonRpc } from '../index'\nimport { ExchangeRates, exchangeRatesParser, WithdrawalFeeQuote, withdrawalFeeQuoteParser } from './parsers'\n\nexport async function getTokenPrices (this: JsonRpc) : Promise<ExchangeRates> {\n    const url = constants.METAL_PROTON_ENDPOINT + `/v1/chain/exchange-rates/info`\n    try {\n        const { data } = await this.get(url)\n        return exchangeRatesParser.parse(data)\n    } catch (e) {\n        throw new Error(`Could not fetch exchange rates`)\n    }\n}\n\nexport async function getWithdrawalFee (this: JsonRpc, { currency, network }: { currency: string, network: string }) : Promise<WithdrawalFeeQuote | undefined> {\n    const url = constants.METAL_PROTON_ENDPOINT + `/v1/swaps/calculate-estimated-fee`\n    try {\n        const { data } = await this.post(url, { currency, network })\n        return withdrawalFeeQuoteParser.parse(data)\n    } catch (e) {\n        console.log(e)\n        return undefined\n    }\n}\n","import { constants } from '@bloks/constants'\nimport { OtcQuoteBody, OtcQuoteResponse, OtcOrderResponse } from './parsers';\nimport { JsonRpc } from '../index'\n\nexport async function otcQuote (this: JsonRpc, body: OtcQuoteBody): Promise<OtcQuoteResponse> {\n    const url = constants.SWAP_URL + `/v1/quote/${body.baseSymbol}/${body.baseAmount}/${body.quoteSymbol}`\n    const { data } = await this.get(url)\n    return data\n}\n\nexport async function otcOrder (this: JsonRpc, id: string): Promise<OtcOrderResponse> {\n    const url = constants.SWAP_URL + `/v1/order/${id}`\n    const { data } = await this.get(url)\n    return data\n}","import { constants } from '@bloks/constants'\nimport { GenerateAddressBody, GenerateAddressResponse, WithdrawBody, WithdrawMetalResponse, WithdrawHistoryMetalResponse } from './parsers'\nimport { JsonRpc } from '../index'\n\nexport async function generateAddress (this: JsonRpc, body: GenerateAddressBody): Promise<GenerateAddressResponse> {\n    const url = constants.WRAP_SERVER_URL + '/address/generate'\n    const { data } = await this.post(url, body)\n    return data\n}\n\nexport async function withdrawMetal (this: JsonRpc, body: WithdrawBody): Promise<WithdrawMetalResponse> {\n    const url = constants.WRAP_SERVER_URL + '/withdraw'\n    const { data } = await this.post(url, body)\n    return data\n}\n\nexport async function withdrawalHistoryMetal (this: JsonRpc, account: string): Promise<WithdrawHistoryMetalResponse> {\n    const url = constants.WRAP_SERVER_URL + `/withdrawals/${account}`\n    const { data } = await this.get(url)\n    return data\n}\n\n","import { JsonRpc } from './index'\n\n/** Raw call to `/v1/chain/get_table_rows` */\nexport async function get_table_rows(this: JsonRpc, {\n    json = true,\n    code,\n    scope,\n    table,\n    table_key = '',\n    lower_bound = '',\n    upper_bound = '',\n    index_position = 1,\n    key_type = '',\n    limit = 10,\n    reverse = false,\n    show_payer = false,\n}: any): Promise<any> {\n    return await this.post(\n        '/v1/chain/get_table_rows', {\n            json,\n            code,\n            scope,\n            table,\n            table_key,\n            lower_bound,\n            upper_bound,\n            index_position,\n            key_type,\n            limit,\n            reverse,\n            show_payer,\n        });\n}\n\n/** Raw call to `/v1/chain/get_kv_table_rows` */\nexport async function get_kv_table_rows(this: JsonRpc, {\n    json = true,\n    code,\n    table,\n    index_name,\n    encode_type = 'bytes',\n    index_value = '',\n    lower_bound = '',\n    upper_bound = '',\n    limit = 10,\n    reverse = false,\n    show_payer = false,\n}: any): Promise<any> {\n    return await this.post(\n        '/v1/chain/get_kv_table_rows', {\n            json,\n            code,\n            table,\n            index_name,\n            encode_type,\n            index_value,\n            lower_bound,\n            upper_bound,\n            limit,\n            reverse,\n            show_payer,\n        }\n    );\n}\n\n/** Raw call to `/v1/chain/get_table_by_scope` */\nexport async function get_table_by_scope(this: JsonRpc, {\n    code,\n    table,\n    lower_bound = '',\n    upper_bound = '',\n    limit = 10,\n}: any): Promise<any> {\n    return await this.post(\n        '/v1/chain/get_table_by_scope', {\n            code,\n            table,\n            lower_bound,\n            upper_bound,\n            limit,\n        }\n    );\n}\n","export const arrayToHex = (data: Uint8Array) => {\n    let result = '';\n    for (const x of data) {\n        result += ('00' + x.toString(16)).slice(-2);\n    }\n    return result;\n};","import { JsonRpc } from './index'\nimport { arrayToHex } from './utils'\nimport { PushTransactionArgs } from './types';\n\n/** Push a serialized transaction (replaced by send_transaction, but returned format has changed) */\nexport async function push_transaction(\n    this: JsonRpc,\n    { signatures, compression = 0, serializedTransaction, serializedContextFreeData }: PushTransactionArgs\n): Promise<any> {\n    try {\n        return await this.post('/v1/chain/push_transaction', {\n            signatures,\n            compression,\n            packed_context_free_data: arrayToHex(serializedContextFreeData || new Uint8Array(0)),\n            packed_trx: arrayToHex(serializedTransaction),\n        });\n    } catch (e) {\n        if (e && e.json && e.json.error) {\n            const expired = e.json.error.name === 'expired_tx_exception'\n            if (expired) {\n                e.json.error.message = 'Transaction Expired: Try Again'\n                this.nextEndpoint()\n            }\n        }\n        throw e\n    }\n}\n\n/** Send a serialized transaction */\nexport async function send_transaction(\n    this: JsonRpc,\n    { signatures, compression = 0, serializedTransaction, serializedContextFreeData }: PushTransactionArgs\n): Promise<any> {\n    return await this.post('/v1/chain/send_transaction', {\n        signatures,\n        compression,\n        packed_context_free_data: arrayToHex(serializedContextFreeData || new Uint8Array(0)),\n        packed_trx: arrayToHex(serializedTransaction),\n    });\n}\n","import { JsonRpc } from './index'\nimport { base64ToBinary } from '../api/numeric';\nimport { BinaryAbi } from '../api/types';\nimport {\n    GetAbiResult,\n    GetCodeResult,\n    GetRawCodeAndAbiResult,\n    GetRawAbiResult,\n} from './types';\n\n/** Raw call to `/v1/chain/get_abi` */\nexport async function get_abi(this: JsonRpc, accountName: string): Promise<GetAbiResult> {\n    return await this.post('/v1/chain/get_abi', { account_name: accountName });\n}\n\n/** Raw call to `/v1/chain/get_raw_code_and_abi` */\nexport async function get_raw_code_and_abi(this: JsonRpc, accountName: string): Promise<GetRawCodeAndAbiResult> {\n    return await this.post('/v1/chain/get_raw_code_and_abi', { account_name: accountName });\n}\n\n/** calls `/v1/chain/get_raw_abi` and pulls out unneeded raw wasm code */\nexport async function getRawAbi(this: JsonRpc, accountName: string): Promise<BinaryAbi> {\n    const rawCodeAndAbi = await this.get_raw_abi(accountName);\n    const abi = base64ToBinary(rawCodeAndAbi.abi);\n    return {\n        accountName: rawCodeAndAbi.account_name,\n        abi\n    };\n}\n\n/** Raw call to `/v1/chain/get_raw_abi` */\nexport async function get_raw_abi(this: JsonRpc, accountName: string): Promise<GetRawAbiResult> {\n    return await this.post('/v1/chain/get_raw_abi', { account_name: accountName });\n}\n\n/** Raw call to `/v1/chain/get_code` */\nexport async function get_code(this: JsonRpc, accountName: string): Promise<GetCodeResult> {\n    return await this.post('/v1/chain/get_code', {\n        account_name: accountName,\n        code_as_wasm: true\n    });\n}\n","/**\n * @module RPC-Error\n */\n\n/** Holds detailed error information */\nexport class RpcError extends Error {\n    /** Detailed error information */\n    public json: any;\n\n    constructor(json: any) {\n        if (json && json.error && json.error.details && json.error.details.length && json.error.details[0].message) {\n            super(json.error.details[0].message);\n        } else if (json && json.processed && json.processed.except && json.processed.except.message) {\n            super(json.processed.except.message);\n        } else if(json) {\n            super(json.message);\n        } else {\n            super(json);\n        }\n        Object.setPrototypeOf(this, RpcError.prototype);\n        this.json = json;\n    }\n}\n","import { AbiProvider, AuthorityProvider } from '../api/types';\nimport {\n    get_account,\n    get_block_header_state,\n    get_block_info,\n    get_block,\n    get_currency_balance,\n    get_currency_stats,\n    get_info,\n    get_producer_schedule,\n    get_producers,\n    get_scheduled_transactions,\n    get_activated_protocol_features,\n    getRequiredKeys\n} from './chain'\nimport {\n    history_get_actions,\n    history_get_transaction,\n    history_get_key_accounts,\n    history_get_controlled_accounts\n} from './history'\nimport {\n    db_size_get\n} from './db'\nimport {\n    applyForKyc,\n    checkUserKycStatus,\n    currentLocation,\n    getValidKycProviders,\n    isLightKYCVerified,\n    fetchKycCountries,\n    otcQuote,\n    otcOrder,\n    generateAddress,\n    withdrawMetal,\n    withdrawalHistoryMetal,\n    getTokenPrices,\n    getWithdrawalFee\n} from './proton'\nimport {\n    get_table_rows,\n    get_kv_table_rows,\n    get_table_by_scope\n} from './tables'\nimport {\n    push_transaction,\n    send_transaction\n} from './pushTransaction'\nimport {\n    get_abi,\n    get_raw_code_and_abi,\n    getRawAbi,\n    get_raw_abi,\n    get_code\n} from './abiCode'\nimport { RpcError } from './error';\nimport { constants } from '@bloks/constants'\nimport fetch from 'cross-fetch';\n\n/** Make RPC calls */\nexport class JsonRpc implements AuthorityProvider, AbiProvider {\n    public endpoints: string[];\n    public maxRetries: number = 3;\n    public currentEndpoint: string;\n    public validKycProviders: string[] = [];\n\n    /**\n     * @param args\n     *`fetch`:\n     * browsers: leave `null` or `undefined`\n     * node: provide an implementation\n     */\n    constructor(endpoints: string | string[]) {\n        endpoints = Array.isArray(endpoints) ? endpoints : [endpoints];\n        this.endpoints = endpoints.map(endpoint => endpoint.replace(/\\/$/, ''))\n        this.currentEndpoint = ''\n        this.nextEndpoint();\n    }\n\n    public nextEndpoint() {\n        if (this.endpoints.length) {\n            if (this.currentEndpoint) {\n                const removed = this.endpoints.shift();\n                this.endpoints = this.endpoints.concat(removed || []);\n            }\n\n            this.currentEndpoint = this.endpoints[0];\n        }\n    }\n\n    /** Post `body` to `endpoint + path`. Throws detailed error information in `RpcError` when available. */\n    public async post(path: string, body: any, currentRetries: number = 0): Promise<any> {\n        let response;\n        let json;\n        try {\n            response = await fetch(this.currentEndpoint + path, {\n                body: JSON.stringify(body),\n                method: 'POST',\n            });\n            json = await response.json();\n\n            if (json.processed && json.processed.except) {\n                throw new RpcError(json);\n            }\n        } catch (e) {\n            if (this.endpoints.length > 1) {\n                this.nextEndpoint()\n                if (currentRetries < this.maxRetries)  {\n                    return this.post(path, body, ++currentRetries)\n                } else {\n                    e.isFetchError = true;\n                    throw new RpcError(e);\n                }\n            }\n        }\n\n        if (!(response && response.ok)) {\n            throw new RpcError(json);\n        }\n\n        // Check for synced\n        if (json && json.head_block_time) {\n            const headTime = new Date(json.head_block_time + 'Z').getTime()\n            const ct = new Date().getTime()\n            const secondsBehind = (ct - headTime) / 1000\n\n            if (secondsBehind > constants.MAX_SECONDS_BEHIND && this.endpoints.length > 1) {\n                this.nextEndpoint()\n                if (currentRetries < this.maxRetries)  {\n                    return this.post(path, body, ++currentRetries)\n                }\n            }\n        }\n\n        return json;\n    }\n\n    /** Get from endpoint  */\n    public async get(path: string): Promise<any> {\n        const res = await fetch(path);\n\n        if (res.status >= 400) {\n            throw new Error(\"Bad response from server \" + res.status);\n        }\n\n        return await res.json()\n    }\n\n    public get_account = get_account;\n    public get_block_header_state = get_block_header_state;\n    public get_block_info = get_block_info;\n    public get_block = get_block;\n    public get_currency_balance = get_currency_balance;\n    public get_currency_stats = get_currency_stats;\n    public get_info = get_info;\n    public get_producer_schedule = get_producer_schedule;\n    public get_producers = get_producers;\n    public get_scheduled_transactions = get_scheduled_transactions;\n    public get_activated_protocol_features = get_activated_protocol_features;\n    public getRequiredKeys = getRequiredKeys;\n\n    public get_abi = get_abi;\n    public get_raw_code_and_abi = get_raw_code_and_abi;\n    public getRawAbi = getRawAbi;\n    public get_raw_abi = get_raw_abi;\n    public get_code = get_code;\n\n    public push_transaction = push_transaction;\n    public send_transaction = send_transaction;\n\n    public get_table_rows = get_table_rows;\n    public get_kv_table_rows = get_kv_table_rows;\n    public get_table_by_scope = get_table_by_scope;\n\n    public history_get_actions = history_get_actions;\n    public history_get_transaction = history_get_transaction;\n    public history_get_key_accounts = history_get_key_accounts;\n    public history_get_controlled_accounts = history_get_controlled_accounts;\n\n    public db_size_get = db_size_get;\n\n    // Proton\n    public fetchKycCountries = fetchKycCountries;\n    public getValidKycProviders = getValidKycProviders;\n    public isLightKYCVerified = isLightKYCVerified;\n    public checkUserKycStatus = checkUserKycStatus;\n    public applyForKyc = applyForKyc;\n    public currentLocation = currentLocation;\n\n    public otcQuote = otcQuote;\n    public otcOrder = otcOrder;\n    public generateAddress = generateAddress;\n    public withdrawMetal = withdrawMetal;\n    public withdrawalHistoryMetal = withdrawalHistoryMetal;\n    public getTokenPrices = getTokenPrices;\n    public getWithdrawalFee = getWithdrawalFee;\n} // JsonRpc\n\nexport { RpcError } from './error';\n","import { Api } from './api';\nimport * as ApiInterfaces from './api/types';\n\nimport { JsonRpc, RpcError } from './rpc';\nimport * as RpcInterfaces from './rpc/types';\n\nimport * as Numeric from './api/numeric';\nimport * as Serialize from './api/serialize';\n\nimport { JsSignatureProvider } from './cryptography/jsSignatureProvider';\n\nimport * as Key from './cryptography/key'\nimport { sha256 } from './cryptography/conversions'\n\nexport {\n  Api,\n  ApiInterfaces,\n  JsonRpc,\n  Numeric,\n  RpcInterfaces,\n  RpcError,\n  Serialize,\n  JsSignatureProvider,\n  Key,\n  sha256\n};\n\nexport default {\n  Api,\n  ApiInterfaces,\n  JsonRpc,\n  Numeric,\n  RpcInterfaces,\n  RpcError,\n  Serialize,\n  JsSignatureProvider,\n  Key,\n  sha256\n};\n"],"names":["undefined","ripemd160","RIPEMD160","hash","base58Chars","base64Chars","create_base58_map","base58M","Array","fill","i","length","charCodeAt","base58Map","create_base64_map","base64M","base64Map","isNegative","bignum","negate","carry","x","decimalToBinary","size","s","result","Uint8Array","srcDigit","Error","j","signedDecimalToBinary","negative","substr","binaryToDecimal","minDigits","push","reverse","String","fromCharCode","signedBinaryToDecimal","slice","base58ToBinaryVarSize","ch","base58ToBinary","binaryToBase58","byte","base64ToBinary","len","groups","bytes","group","digit0","digit1","digit2","digit3","KeyType","publicKeyDataSize","privateKeyDataSize","signatureDataSize","digestSuffixRipemd160","data","suffix","d","stringToKey","type","whole","buffer","digest","keyToString","key","prefix","stringToPublicKey","k1","r1","wa","publicKeyToLegacyString","publicKeyToString","convertLegacyPublicKey","convertK1ToLegacyPublicKey","publicKey","K1_PREFIX","nonPrefixPublicKey","bytesWithChecksum","bs58","suffixBytes","Buffer","from","binaryPublicKey","convertLegacyPublicKeys","keys","map","stringToPrivateKey","privateKeyToLegacyString","forEach","sha256","update","privateKeyToString","stringToSignature","signatureToString","signature","SerializerState","options","SerialBuffer","array","textEncoder","textDecoder","TextEncoder","TextDecoder","reserve","l","Math","ceil","newArray","set","haveReadData","readPos","restartRead","asUint8Array","byteOffset","pushArray","v","get","pushUint8ArrayChecked","getUint8Array","skip","pushUint16","getUint16","pushUint32","getUint32","pushNumberAsUint64","floor","getUint64AsNumber","low","high","pushVaruint32","getVaruint32","bit","b","pushVarint32","getVarint32","pushFloat32","Float32Array","getFloat32","pushFloat64","Float64Array","getFloat64","pushName","regex","RegExp","test","charToSymbol","c","a","getName","endsWith","pushBytes","getBytes","pushString","encode","getString","decode","pushSymbolCode","name","getSymbolCode","pushSymbol","precision","getSymbol","pushAsset","trim","pos","amount","foundDigit","numeric","getAsset","pushPublicKey","getPublicKey","begin","pushPrivateKey","getPrivateKey","pushSignature","getSignature","supportedAbiVersion","version","startsWith","checkDateParse","date","Date","parse","Number","isNaN","dateToTimePoint","round","timePointToDate","us","toISOString","dateToTimePointSec","timePointSecToDate","sec","dateToBlockTimestamp","blockTimestampToDate","slot","stringToSymbol","m","match","symbolToString","arrayToHex","toString","toUpperCase","hexToUint8Array","hex","parseInt","serializeUnknown","_","__","deserializeUnknown","serializeStruct","state","allowExtensions","JSON","stringify","base","serialize","fields","field","skippedBinaryExtension","extensionOf","deserializeStruct","deserialize","serializeVariant","isArray","findIndex","deserializeVariant","serializeArray","item","arrayOf","deserializeArray","serializeOptional","optionalOf","deserializeOptional","serializeExtension","deserializeExtension","serializeObject","entries","Object","value","keyType","dataType","deserializeObject","createType","attrs","aliasOfName","baseName","checkRange","orig","converted","createInitialTypes","Map","bool","uint8","int8","uint16","int16","uint32","uint64","int64","int32","varuint32","varint32","uint128","int128","float32","float64","float128","bytesAsUint8Array","string","time_point","time_point_sec","block_timestamp_type","symbol_code","symbol","asset","checksum160","checksum256","checksum512","public_key","private_key","typeName","createAbiTypes","initialTypes","getType","types","getTypesFromAbi","abi","new_type_name","structs","n","variants","t","reverseHex","h","transactionHeader","refBlock","expireSeconds","timestamp","header","id","expiration","ref_block_num","block_num","ref_block_prefix","serializeActionData","contract","account","action","actions","serializeAction","authorization","deserializeActionData","deserializeAction","serializeAnyvar","anyvar","def","anyvarDefs","null_t","any_array","hasOwnProperty","any_object","index","deserializeAnyvar","defIndex","anyvarDefsByIndex","useShortForm","deserializeAnyvarShort","serializeAnyObject","obj","deserializeAnyObject","serializeAnyArray","arr","deserializeAnyArray","addAdditionalTypes","additionalTypes","serializeQuery","query","method","arg","filter","q","constructElliptic","EC","PublicKey","ec","fromString","publicKeyStr","fromElliptic","getPublic","getX","toArray","y","getY","concat","toLegacyString","toElliptic","keyPair","pub","isValid","ellipticPublicKey","validationObj","validate","BN","require","Signature","sig","ellipticSig","recoveryParam","r","eosioRecoveryParam","sigData","lengthOfR","lengthOfS","ellipticRecoveryBitField","toBinary","verify","shouldHash","encoding","ellipticSignature","recover","recoveredPublicKey","recoverPubKey","ellipticKPub","keyFromPublic","PrivateKey","privKey","getPrivate","toArrayLike","keyString","privateKey","keyFromPrivate","ellipticPrivateKey","sign","tries","isCanonical","constructSignature","canonical","pers","generateKeyPair","secureEnv","ellipticKeyPair","genKeyPair","ecOptions","defaultEc","digestFromSerializedData","chainId","serializedTransaction","serializedContextFreeData","e","signBuf","JsSignatureProvider","privateKeys","k","priv","privElliptic","pubStr","availableKeys","getAvailableKeys","requiredKeys","signatures","tables","ricardian_clauses","error_messages","abi_extensions","Api","args","rpc","authorityProvider","abiProvider","signatureProvider","abiTypes","ser","transactionTypes","transactionAbi","rawAbiToJson","rawAbi","jsonToRawAbi","jsonAbi","getCachedAbi","accountName","reload","cachedAbis","getRawAbi","cachedAbi","message","getAbi","getTransactionAbis","transaction","context_free_actions","accounts","uniqueAccounts","Set","actionPromises","Promise","all","getContract","contracts","serializeTransaction","max_net_usage_words","max_cpu_usage_ms","delay_sec","transaction_extensions","serializeContextFreeData","contextFreeData","deserializeTransaction","serializeActions","deserializeActions","deserializeActionsSync","deserializedActions","deserializeTransactionWithActions","deserializedTransaction","deserializedCFActions","deflateSerializedArray","serializedArray","deflate","level","inflateSerializedArray","compressedSerializedArray","inflate","transact","broadcast","compression","blocksBehind","useLastIrreversible","get_info","info","generateTapos","hasRequiredTaposFields","abis","context_free_data","pushTransactionArgs","getRequiredKeys","chain_id","pushCompressedSignedTransaction","pushSignedTransaction","transactWithDelay","params","delay","wait","ms","resolve","setTimeout","success","short","tryRefBlockFromGetInfo","queryBuffer","signResponse","send_transaction","response","returnBuffer","processed","action_traces","return_value","push_transaction","compressedSerializedTransaction","compressedSerializedContextFreeData","block","taposBlockNumber","head_block_num","last_irreversible_block_num","tryGetBlockInfo","tryGetBlockHeaderState","get_block_header_state","blockNumber","get_block_info","get_block","last_irreversible_block_id","last_irreversible_block_time","ActionBuilder","buildTransaction","cb","tx","TransactionBuilder","getAccountKeys","actor","permission","get_account","permissions","relevantPermission","find","perm_name","required_auth","console","log","checkIfKeysMatchTransaction","verified","some","api","actionBuilder","associateContextFree","contextFreeGroup","contextFreeGroups","send","config","contextFreeDataSet","contextFreeActions","serializedData","contextFreeCallback","cfd","cfa","contextFreeAction","as","actorName","ActionSerializer","parent","assign","post","account_name","blockNumOrId","block_num_or_id","blockNum","get_currency_balance","code","get_currency_stats","get_producer_schedule","get_producers","json","lowerBound","limit","lower_bound","get_scheduled_transactions","get_activated_protocol_features","available_keys","required_keys","history_get_actions","offset","history_get_transaction","blockNumHint","block_num_hint","history_get_key_accounts","history_get_controlled_accounts","controllingAccount","controlling_account","db_size_get","KycStatus","flag","text","fetchKycCountries","chain","url","constants","BLOKS_API","countries","content","countriesById","reduce","acc","country","countryOptions","countryOption","getValidKycProviders","get_table_rows","table","scope","rows","validKycProviders","provider","blisted","kyc_provider","isLightKYCVerified","lightKyc","users","upper_bound","resultsWithKycStatus","user","levelsResult","kyc","indexOf","kyc_level","split","kycItem","every","lightKycField","includes","checkUserKycStatus","expectedTier","reject","getStatus","userInfo","PASSED","matchedTier","tier","status","PENDING","applyForKyc","currentLocation","PROTON_API","Status","rateParser","z","counterCurrency","price","priceChangePercent","marketCap","volume","exchangeRateParser","rank","rates","exchangeRatesParser","withdrawalFeeQuoteParser","quoteId","estimatedFee","currency","network","getTokenPrices","METAL_PROTON_ENDPOINT","getWithdrawalFee","otcQuote","body","SWAP_URL","baseSymbol","baseAmount","quoteSymbol","otcOrder","generateAddress","WRAP_SERVER_URL","withdrawMetal","withdrawalHistoryMetal","table_key","index_position","key_type","show_payer","get_kv_table_rows","index_name","encode_type","index_value","get_table_by_scope","packed_context_free_data","packed_trx","error","expired","nextEndpoint","get_abi","get_raw_code_and_abi","get_raw_abi","rawCodeAndAbi","get_code","code_as_wasm","RpcError","details","except","setPrototypeOf","prototype","JsonRpc","endpoints","endpoint","replace","currentEndpoint","removed","shift","path","currentRetries","fetch","maxRetries","isFetchError","ok","head_block_time","headTime","getTime","ct","secondsBehind","MAX_SECONDS_BEHIND","res","ApiInterfaces","Numeric","RpcInterfaces","Serialize","Key"],"mappings":"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"}