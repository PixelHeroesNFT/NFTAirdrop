'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var js = require('@proton/js');
var sha256 = _interopDefault(require('fast-sha256'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

/** SigningRequest ABI and typedefs. */
var RequestFlagsNone = 0;
var RequestFlagsBroadcast = 1 << 0;
var RequestFlagsBackground = 1 << 1;
var data = {
  version: 'eosio::abi/1.1',
  types: [{
    new_type_name: 'account_name',
    type: 'name'
  }, {
    new_type_name: 'action_name',
    type: 'name'
  }, {
    new_type_name: 'permission_name',
    type: 'name'
  }, {
    new_type_name: 'chain_alias',
    type: 'uint8'
  }, {
    new_type_name: 'chain_id',
    type: 'checksum256'
  }, {
    new_type_name: 'request_flags',
    type: 'uint8'
  }],
  structs: [{
    name: 'permission_level',
    fields: [{
      name: 'actor',
      type: 'account_name'
    }, {
      name: 'permission',
      type: 'permission_name'
    }]
  }, {
    name: 'action',
    fields: [{
      name: 'account',
      type: 'account_name'
    }, {
      name: 'name',
      type: 'action_name'
    }, {
      name: 'authorization',
      type: 'permission_level[]'
    }, {
      name: 'data',
      type: 'bytes'
    }]
  }, {
    name: 'extension',
    fields: [{
      name: 'type',
      type: 'uint16'
    }, {
      name: 'data',
      type: 'bytes'
    }]
  }, {
    name: 'transaction_header',
    fields: [{
      name: 'expiration',
      type: 'time_point_sec'
    }, {
      name: 'ref_block_num',
      type: 'uint16'
    }, {
      name: 'ref_block_prefix',
      type: 'uint32'
    }, {
      name: 'max_net_usage_words',
      type: 'varuint32'
    }, {
      name: 'max_cpu_usage_ms',
      type: 'uint8'
    }, {
      name: 'delay_sec',
      type: 'varuint32'
    }]
  }, {
    name: 'transaction',
    base: 'transaction_header',
    fields: [{
      name: 'context_free_actions',
      type: 'action[]'
    }, {
      name: 'actions',
      type: 'action[]'
    }, {
      name: 'transaction_extensions',
      type: 'extension[]'
    }]
  }, {
    name: 'info_pair',
    fields: [{
      name: 'key',
      type: 'string'
    }, {
      name: 'value',
      type: 'bytes'
    }]
  }, {
    name: 'signing_request',
    fields: [{
      name: 'chain_id',
      type: 'variant_id'
    }, {
      name: 'req',
      type: 'variant_req'
    }, {
      name: 'flags',
      type: 'request_flags'
    }, {
      name: 'callback',
      type: 'string'
    }, {
      name: 'info',
      type: 'info_pair[]'
    }]
  }, {
    name: 'identity',
    fields: [{
      name: 'permission',
      type: 'permission_level?'
    }]
  }, {
    name: 'request_signature',
    fields: [{
      name: 'signer',
      type: 'name'
    }, {
      name: 'signature',
      type: 'signature'
    }]
  }],
  variants: [{
    name: 'variant_id',
    types: ['chain_alias', 'chain_id']
  }, {
    name: 'variant_req',
    types: ['action', 'action[]', 'transaction', 'identity']
  }],
  actions: [{
    name: 'identity',
    type: 'identity'
  }]
};

var abi = {
  __proto__: null,
  RequestFlagsNone: RequestFlagsNone,
  RequestFlagsBroadcast: RequestFlagsBroadcast,
  RequestFlagsBackground: RequestFlagsBackground,
  data: data
};

/**
 * Base64u - URL-Safe Base64 variant no padding.
 * Based on https://gist.github.com/jonleighton/958841
 */
var charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';
var lookup = /*#__PURE__*/new Uint8Array(256);

for (var i = 0; i < 64; i++) {
  lookup[/*#__PURE__*/charset.charCodeAt(i)] = i;
}

function encode(data) {
  var byteLength = data.byteLength;
  var byteRemainder = byteLength % 3;
  var mainLength = byteLength - byteRemainder;
  var parts = [];
  var a;
  var b;
  var c;
  var d;
  var chunk; // Main loop deals with bytes in chunks of 3

  for (var _i = 0; _i < mainLength; _i += 3) {
    // Combine the three bytes into a single integer
    chunk = data[_i] << 16 | data[_i + 1] << 8 | data[_i + 2]; // Use bitmasks to extract 6-bit segments from the triplet

    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18

    b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12

    c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6

    d = chunk & 63; // 63       =  2^6 - 1
    // Convert the raw binary segments to the appropriate ASCII encoding

    parts.push(charset[a] + charset[b] + charset[c] + charset[d]);
  } // Deal with the remaining bytes


  if (byteRemainder === 1) {
    chunk = data[mainLength];
    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2
    // Set the 4 least significant bits to zero

    b = (chunk & 3) << 4; // 3   = 2^2 - 1

    parts.push(charset[a] + charset[b]);
  } else if (byteRemainder === 2) {
    chunk = data[mainLength] << 8 | data[mainLength + 1];
    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10

    b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4
    // Set the 2 least significant bits to zero

    c = (chunk & 15) << 2; // 15    = 2^4 - 1

    parts.push(charset[a] + charset[b] + charset[c]);
  }

  return parts.join('');
}
function decode(input) {
  var byteLength = input.length * 0.75;
  var data = new Uint8Array(byteLength);
  var a;
  var b;
  var c;
  var d;
  var p = 0;

  for (var _i2 = 0; _i2 < input.length; _i2 += 4) {
    a = lookup[input.charCodeAt(_i2)];
    b = lookup[input.charCodeAt(_i2 + 1)];
    c = lookup[input.charCodeAt(_i2 + 2)];
    d = lookup[input.charCodeAt(_i2 + 3)];
    data[p++] = a << 2 | b >> 4;
    data[p++] = (b & 15) << 4 | c >> 2;
    data[p++] = (c & 3) << 6 | d & 63;
  }

  return data;
}

require('fast-text-encoding');
var ProtocolVersion = 2;
var textEncoder = /*#__PURE__*/new TextEncoder();
var textDecoder = /*#__PURE__*/new TextDecoder();
var AbiTypes = /*#__PURE__*/js.Serialize.getTypesFromAbi( /*#__PURE__*/js.Serialize.createInitialTypes(), data);

(function (ChainName) {
  ChainName[ChainName["UNKNOWN"] = 0] = "UNKNOWN";
  ChainName[ChainName["EOS"] = 1] = "EOS";
  ChainName[ChainName["TELOS"] = 2] = "TELOS";
  ChainName[ChainName["JUNGLE"] = 3] = "JUNGLE";
  ChainName[ChainName["KYLIN"] = 4] = "KYLIN";
  ChainName[ChainName["WORBLI"] = 5] = "WORBLI";
  ChainName[ChainName["BOS"] = 6] = "BOS";
  ChainName[ChainName["MEETONE"] = 7] = "MEETONE";
  ChainName[ChainName["INSIGHTS"] = 8] = "INSIGHTS";
  ChainName[ChainName["BEOS"] = 9] = "BEOS";
  ChainName[ChainName["WAX"] = 10] = "WAX";
  ChainName[ChainName["PROTON"] = 11] = "PROTON";
  ChainName[ChainName["FIO"] = 12] = "FIO";
})(exports.ChainName || (exports.ChainName = {}));

var ChainIdLookup = /*#__PURE__*/new Map([[exports.ChainName.EOS, 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'], [exports.ChainName.TELOS, '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11'], [exports.ChainName.JUNGLE, 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473'], [exports.ChainName.KYLIN, '5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191'], [exports.ChainName.WORBLI, '73647cde120091e0a4b85bced2f3cfdb3041e266cbbe95cee59b73235a1b3b6f'], [exports.ChainName.BOS, 'd5a3d18fbb3c084e3b1f3fa98c21014b5f3db536cc15d08f9f6479517c6a3d86'], [exports.ChainName.MEETONE, 'cfe6486a83bad4962f232d48003b1824ab5665c36778141034d75e57b956e422'], [exports.ChainName.INSIGHTS, 'b042025541e25a472bffde2d62edd457b7e70cee943412b1ea0f044f88591664'], [exports.ChainName.BEOS, 'b912d19a6abd2b1b05611ae5be473355d64d95aeff0c09bedc8c166cd6468fe4'], [exports.ChainName.WAX, '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4'], [exports.ChainName.PROTON, '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0'], [exports.ChainName.FIO, '21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c']]);
var DEFAULT_SCHEME = 'esr';
/**
 * The placeholder name: `............1` aka `uint64(1)`.
 * If used in action data will be resolved to current signer.
 * If used in as an authorization permission will be resolved to
 * the signers permission level.
 *
 * Example action:
 * ```
 * { account: "eosio.token",
 *   name: "transfer",
 *   authorization: [{actor: "............1", permission: "............1"}],
 *   data: {
 *     from: "............1",
 *     to: "bar",
 *     quantity: "42.0000 EOS",
 *     memo: "Don't panic" }}
 * ```
 * When signed by `foo@active` would resolve to:
 * ```
 * { account: "eosio.token",
 *   name: "transfer",
 *   authorization: [{actor: "foo", permission: "active"}],
 *   data: {
 *     from: "foo",
 *     to: "bar",
 *     quantity: "42.0000 EOS",
 *     memo: "Don't panic" }}
 * ```
 */

var PlaceholderName = '............1'; // aka uint64(1)

/** Placeholder that will resolve to signer permission name. */

var PlaceholderPermission = '............2'; // aka uint64(2)

var PlaceholderAuth = {
  actor: PlaceholderName,
  permission: PlaceholderPermission
};
var SigningRequest = /*#__PURE__*/function () {
  /**
   * Create a new signing request.
   * Normally not used directly, see the `create` and `from` class methods.
   */
  function SigningRequest(version, data, zlib, abiProvider, signature, scheme) {
    this.scheme = DEFAULT_SCHEME;

    if ((data.flags & RequestFlagsBroadcast) !== 0 && data.req[0] === 'identity') {
      throw new Error('Invalid request (identity request cannot be broadcast)');
    }

    if ((data.flags & RequestFlagsBroadcast) === 0 && data.callback.length === 0) {
      throw new Error('Invalid request (nothing to do, no broadcast or callback set)');
    }

    this.version = version;
    this.data = data;
    this.zlib = zlib;
    this.abiProvider = abiProvider;
    this.signature = signature;
    this.scheme = scheme || this.scheme;
  }
  /** Create a new signing request. */


  SigningRequest.create =
  /*#__PURE__*/
  function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(args, options) {
      var data, serialize, tx, broadcast, key, value, req;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (options === void 0) {
                options = {};
              }

              data = {};

              serialize = function serialize(action) {
                return serializeAction(action, options.abiProvider);
              }; // set the request data


              if (!(args.identity !== undefined)) {
                _context.next = 7;
                break;
              }

              data.req = ['identity', args.identity];
              _context.next = 45;
              break;

            case 7:
              if (!(args.action && !args.actions && !args.transaction)) {
                _context.next = 14;
                break;
              }

              _context.next = 10;
              return serialize(args.action);

            case 10:
              _context.t0 = _context.sent;
              data.req = ['action', _context.t0];
              _context.next = 45;
              break;

            case 14:
              if (!(args.actions && !args.action && !args.transaction)) {
                _context.next = 28;
                break;
              }

              if (!(args.actions.length === 1)) {
                _context.next = 22;
                break;
              }

              _context.next = 18;
              return serialize(args.actions[0]);

            case 18:
              _context.t1 = _context.sent;
              data.req = ['action', _context.t1];
              _context.next = 26;
              break;

            case 22:
              _context.next = 24;
              return Promise.all(args.actions.map(serialize));

            case 24:
              _context.t2 = _context.sent;
              data.req = ['action[]', _context.t2];

            case 26:
              _context.next = 45;
              break;

            case 28:
              if (!(args.transaction && !args.action && !args.actions)) {
                _context.next = 44;
                break;
              }

              tx = args.transaction; // set default values if missing

              if (tx.expiration === undefined) {
                tx.expiration = '1970-01-01T00:00:00.000';
              }

              if (tx.ref_block_num === undefined) {
                tx.ref_block_num = 0;
              }

              if (tx.ref_block_prefix === undefined) {
                tx.ref_block_prefix = 0;
              }

              if (tx.context_free_actions === undefined) {
                tx.context_free_actions = [];
              }

              if (tx.transaction_extensions === undefined) {
                tx.transaction_extensions = [];
              }

              if (tx.delay_sec === undefined) {
                tx.delay_sec = 0;
              }

              if (tx.max_cpu_usage_ms === undefined) {
                tx.max_cpu_usage_ms = 0;
              }

              if (tx.max_net_usage_words === undefined) {
                tx.max_net_usage_words = 0;
              } // encode actions if needed


              _context.next = 40;
              return Promise.all(tx.actions.map(serialize));

            case 40:
              tx.actions = _context.sent;
              data.req = ['transaction', tx];
              _context.next = 45;
              break;

            case 44:
              throw new TypeError('Invalid arguments: Must have exactly one of action, actions or transaction');

            case 45:
              // set the chain id
              data.chain_id = variantId(args.chainId);
              data.flags = RequestFlagsNone;
              broadcast = args.broadcast !== undefined ? args.broadcast : true;

              if (broadcast) {
                data.flags |= RequestFlagsBroadcast;
              }

              if (typeof args.callback === 'string') {
                data.callback = args.callback;
              } else if (typeof args.callback === 'object') {
                data.callback = args.callback.url;

                if (args.callback.background) {
                  data.flags |= RequestFlagsBackground;
                }
              } else {
                data.callback = '';
              }

              data.info = [];

              if (!(typeof args.info === 'object')) {
                _context.next = 63;
                break;
              }

              _context.t3 = runtime_1.keys(args.info);

            case 53:
              if ((_context.t4 = _context.t3()).done) {
                _context.next = 63;
                break;
              }

              key = _context.t4.value;

              if (!args.info.hasOwnProperty(key)) {
                _context.next = 61;
                break;
              }

              value = args.info[key];

              if (!(typeof key !== 'string')) {
                _context.next = 59;
                break;
              }

              throw new Error('Invalid info dict, keys must be strings');

            case 59:
              if (typeof value === 'string') {
                value = textEncoder.encode(value);
              }

              data.info.push({
                key: key,
                value: value
              });

            case 61:
              _context.next = 53;
              break;

            case 63:
              req = new SigningRequest(ProtocolVersion, data, options.zlib, options.abiProvider, undefined, options.scheme); // sign the request if given a signature provider

              if (options.signatureProvider) {
                req.sign(options.signatureProvider);
              }

              return _context.abrupt("return", req);

            case 66:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function create(_x, _x2) {
      return _create.apply(this, arguments);
    }

    return create;
  }()
  /** Creates an identity request. */
  ;

  SigningRequest.identity = function identity(args, options) {
    if (options === void 0) {
      options = {};
    }

    var permission = {
      actor: args.account || PlaceholderName,
      permission: args.permission || PlaceholderPermission
    };

    if (permission.actor === PlaceholderName && permission.permission === PlaceholderPermission) {
      permission = null;
    }

    return this.create({
      identity: {
        permission: permission
      },
      broadcast: false,
      callback: args.callback,
      info: args.info
    }, options);
  }
  /**
   * Create a request from a chain id and serialized transaction.
   * @param chainId The chain id where the transaction is valid.
   * @param serializedTransaction The serialized transaction.
   * @param options Creation options.
   */
  ;

  SigningRequest.fromTransaction = function fromTransaction(chainId, serializedTransaction, options) {
    if (options === void 0) {
      options = {};
    }

    if (typeof chainId !== 'string') {
      chainId = js.Serialize.arrayToHex(chainId);
    }

    if (typeof serializedTransaction === 'string') {
      serializedTransaction = js.Serialize.hexToUint8Array(serializedTransaction);
    }

    var buf = new js.Serialize.SerialBuffer();
    buf.push(2); // header

    var id = variantId(chainId);

    if (id[0] === 'chain_alias') {
      buf.push(0);
      buf.push(id[1]);
    } else {
      buf.push(1);
      buf.pushArray(js.Serialize.hexToUint8Array(id[1]));
    }

    buf.push(2); // transaction variant

    buf.pushArray(serializedTransaction);
    buf.push(RequestFlagsBroadcast); // flags

    buf.push(0); // callback

    buf.push(0); // info

    return SigningRequest.fromData(buf.asUint8Array(), options);
  }
  /** Creates a signing request from encoded `esr:` uri string. */
  ;

  SigningRequest.from = function from(uri, options) {
    if (options === void 0) {
      options = {};
    }

    if (typeof uri !== 'string') {
      throw new Error('Invalid request uri');
    }

    var _uri$split = uri.split(':'),
        scheme = _uri$split[0],
        path = _uri$split[1];

    if (scheme !== (options.scheme || DEFAULT_SCHEME) && scheme !== "web+" + (options.scheme || DEFAULT_SCHEME)) {
      throw new Error('Invalid scheme');
    }

    var data = decode(path.startsWith('//') ? path.slice(2) : path);
    return SigningRequest.fromData(data, options);
  };

  SigningRequest.fromData = function fromData(data, options) {
    if (options === void 0) {
      options = {};
    }

    var header = data[0];
    var version = header & ~(1 << 7);

    if (version !== ProtocolVersion) {
      throw new Error('Unsupported protocol version');
    }

    var array = data.slice(1);

    if ((header & 1 << 7) !== 0) {
      if (!options.zlib) {
        throw new Error('Compressed URI needs zlib');
      }

      array = options.zlib.inflateRaw(array);
    }

    var buffer = new js.Serialize.SerialBuffer({
      array: array
    });
    var req = SigningRequest.type.deserialize(buffer);
    var signature;

    if (buffer.haveReadData()) {
      var type = AbiTypes.get('request_signature');
      signature = type.deserialize(buffer);
    }

    return new SigningRequest(version, req, options.zlib, options.abiProvider, signature, options.scheme);
  }
  /**
   * Sign the request, mutating.
   * @param signatureProvider The signature provider that provides a signature for the signer.
   */
  ;

  var _proto = SigningRequest.prototype;

  _proto.sign = function sign(signatureProvider) {
    var message = this.getSignatureDigest();
    this.signature = signatureProvider.sign(js.Serialize.arrayToHex(message));
  }
  /**
   * Get the signature digest for this request.
   */
  ;

  _proto.getSignatureDigest = function getSignatureDigest() {
    var buffer = new js.Serialize.SerialBuffer(); // protocol version + utf8 "request"

    buffer.pushArray([this.version, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74]);
    buffer.pushArray(this.getData());
    return sha256(buffer.asUint8Array());
  }
  /**
   * Set the signature data for this request, mutating.
   * @param signer Account name of signer.
   * @param signature The signature string.
   */
  ;

  _proto.setSignature = function setSignature(signer, signature) {
    this.signature = {
      signer: signer,
      signature: signature
    };
  }
  /**
   * Set the request callback, mutating.
   * @param url Where the callback should be sent.
   * @param background Whether the callback should be sent in the background.
   */
  ;

  _proto.setCallback = function setCallback(url, background) {
    this.data.callback = url;

    if (background) {
      this.data.flags |= RequestFlagsBackground;
    } else {
      this.data.flags &= ~RequestFlagsBackground;
    }
  }
  /**
   * Set broadcast flag.
   * @param broadcast Whether the transaction should be broadcast by receiver.
   */
  ;

  _proto.setBroadcast = function setBroadcast(broadcast) {
    if (broadcast) {
      this.data.flags |= RequestFlagsBroadcast;
    } else {
      this.data.flags &= ~RequestFlagsBroadcast;
    }
  }
  /**
   * Encode this request into an `esr:` uri.
   * @argument compress Whether to compress the request data using zlib,
   *                    defaults to true if omitted and zlib is present;
   *                    otherwise false.
   * @argument slashes Whether add slashes after the protocol scheme, i.e. `esr://`.
   *                   Defaults to true.
   * @returns An esr uri string.
   */
  ;

  _proto.encode = function encode$1(compress, slashes) {
    var shouldCompress = compress !== undefined ? compress : this.zlib !== undefined;

    if (shouldCompress && this.zlib === undefined) {
      throw new Error('Need zlib to compress');
    }

    var header = this.version;
    var data = this.getData();
    var sigData = this.getSignatureData();
    var array = new Uint8Array(data.byteLength + sigData.byteLength);
    array.set(data, 0);
    array.set(sigData, data.byteLength);

    if (shouldCompress) {
      var deflated = this.zlib.deflateRaw(array);

      if (array.byteLength > deflated.byteLength) {
        header |= 1 << 7;
        array = deflated;
      }
    }

    var out = new Uint8Array(1 + array.byteLength);
    out[0] = header;
    out.set(array, 1);
    var scheme = this.scheme + ":";

    if (slashes !== false) {
      scheme += '//';
    }

    return scheme + encode(out);
  }
  /** Get the request data without header or signature. */
  ;

  _proto.getData = function getData() {
    var buffer = new js.Serialize.SerialBuffer();
    SigningRequest.type.serialize(buffer, this.data);
    return buffer.asUint8Array();
  }
  /** Get signature data, returns an empty array if request is not signed. */
  ;

  _proto.getSignatureData = function getSignatureData() {
    if (!this.signature) {
      return new Uint8Array(0);
    }

    var buffer = new js.Serialize.SerialBuffer();
    var type = AbiTypes.get('request_signature');
    type.serialize(buffer, this.signature);
    return buffer.asUint8Array();
  }
  /** ABI definitions required to resolve request. */
  ;

  _proto.getRequiredAbis = function getRequiredAbis() {
    return this.getRawActions().filter(function (action) {
      return !isIdentity(action);
    }).map(function (action) {
      return action.account;
    }).filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });
  }
  /** Whether TaPoS values are required to resolve request. */
  ;

  _proto.requiresTapos = function requiresTapos() {
    var tx = this.getRawTransaction();
    return !this.isIdentity() && !hasTapos(tx);
  }
  /** Resolve required ABI definitions. */
  ;

  _proto.fetchAbis =
  /*#__PURE__*/
  function () {
    var _fetchAbis = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(abiProvider) {
      var provider, abis;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              provider = abiProvider || this.abiProvider;

              if (provider) {
                _context3.next = 3;
                break;
              }

              throw new Error('Missing ABI provider');

            case 3:
              abis = new Map();
              _context3.next = 6;
              return Promise.all(this.getRequiredAbis().map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(account) {
                  return runtime_1.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.t0 = abis;
                          _context2.t1 = account;
                          _context2.next = 4;
                          return provider.getAbi(account);

                        case 4:
                          _context2.t2 = _context2.sent;

                          _context2.t0.set.call(_context2.t0, _context2.t1, _context2.t2);

                        case 6:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                return function (_x4) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 6:
              return _context3.abrupt("return", abis);

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function fetchAbis(_x3) {
      return _fetchAbis.apply(this, arguments);
    }

    return fetchAbis;
  }()
  /**
   * Decode raw actions actions to object representations.
   * @param abis ABI defenitions required to decode all actions.
   * @param signer Placeholders in actions will be resolved to signer if set.
   */
  ;

  _proto.resolveActions = function resolveActions(abis, signer) {
    return this.getRawActions().map(function (rawAction) {
      var contractAbi;

      if (isIdentity(rawAction)) {
        contractAbi = data;
      } else {
        contractAbi = abis.get(rawAction.account);
      }

      if (!contractAbi) {
        throw new Error("Missing ABI definition for " + rawAction.account);
      }

      var contract = getContract(contractAbi);

      if (signer) {
        // hook into eosjs name decoder and return the signing account if we encounter the placeholder
        // this is fine because getContract re-creates the initial types each time
        contract.types.get('name').deserialize = function (buffer) {
          var name = buffer.getName();

          if (name === PlaceholderName) {
            return signer.actor;
          } else if (name === PlaceholderPermission) {
            return signer.permission;
          } else {
            return name;
          }
        };
      }

      var action = js.Serialize.deserializeAction(contract, rawAction.account, rawAction.name, rawAction.authorization, rawAction.data);

      if (signer) {
        action.authorization = action.authorization.map(function (auth) {
          var actor = auth.actor,
              permission = auth.permission;

          if (actor === PlaceholderName) {
            actor = signer.actor;
          }

          if (permission === PlaceholderPermission) {
            permission = signer.permission;
          } // backwards compatibility, actor placeholder will also resolve to permission when used in auth


          if (permission === PlaceholderName) {
            permission = signer.permission;
          }

          return {
            actor: actor,
            permission: permission
          };
        });
      }

      return action;
    });
  };

  _proto.resolveTransaction = function resolveTransaction(abis, signer, ctx) {
    if (ctx === void 0) {
      ctx = {};
    }

    var tx = this.getRawTransaction();

    if (!this.isIdentity() && !hasTapos(tx)) {
      if (ctx.expiration !== undefined && ctx.ref_block_num !== undefined && ctx.ref_block_prefix !== undefined) {
        tx.expiration = ctx.expiration;
        tx.ref_block_num = ctx.ref_block_num;
        tx.ref_block_prefix = ctx.ref_block_prefix;
      } else if (ctx.block_num !== undefined && ctx.ref_block_prefix !== undefined && ctx.timestamp !== undefined) {
        var header = js.Serialize.transactionHeader(ctx, ctx.expire_seconds !== undefined ? ctx.expire_seconds : 60);
        tx.expiration = header.expiration;
        tx.ref_block_num = header.ref_block_num;
        tx.ref_block_prefix = header.ref_block_prefix;
      } else {
        throw new Error('Invalid transaction context, need either a reference block or explicit TAPoS values');
      }
    }

    var actions = this.resolveActions(abis, signer);
    return _extends({}, tx, {
      actions: actions
    });
  };

  _proto.resolve = function resolve(abis, signer, ctx) {
    if (ctx === void 0) {
      ctx = {};
    }

    var transaction = this.resolveTransaction(abis, signer, ctx);
    var buf = new js.Serialize.SerialBuffer();
    var actions = transaction.actions.map(function (action) {
      var contractAbi;

      if (isIdentity(action)) {
        contractAbi = data;
      } else {
        contractAbi = abis.get(action.account);
      }

      if (!contractAbi) {
        throw new Error("Missing ABI definition for " + action.account);
      }

      var contract = getContract(contractAbi);
      return js.Serialize.serializeAction(contract, action.account, action.name, action.authorization, action.data);
    });
    SigningRequest.transactionType.serialize(buf, _extends({}, transaction, {
      actions: actions
    }));
    var serializedTransaction = buf.asUint8Array();
    return new ResolvedSigningRequest(this, signer, transaction, serializedTransaction);
  }
  /**
   * Get Scheme
   * @returns scheme like 'esr'
   */
  ;

  _proto.getScheme = function getScheme() {
    return this.scheme;
  }
  /**
   * Get the id of the chain where this request is valid.
   * @returns The 32-byte chain id as hex encoded string.
   */
  ;

  _proto.getChainId = function getChainId() {
    var id = this.data.chain_id;

    switch (id[0]) {
      case 'chain_id':
        return id[1];

      case 'chain_alias':
        if (ChainIdLookup.has(id[1])) {
          return ChainIdLookup.get(id[1]);
        } else {
          throw new Error('Unknown chain id alias');
        }

      default:
        throw new Error('Invalid signing request data');
    }
  }
  /** Return the actions in this request with action data encoded. */
  ;

  _proto.getRawActions = function getRawActions() {
    var req = this.data.req;

    switch (req[0]) {
      case 'action':
        return [req[1]];

      case 'action[]':
        return req[1];

      case 'identity':
        var data = '0101000000000000000200000000000000'; // placeholder permission

        var authorization = [PlaceholderAuth];

        if (req[1].permission) {
          var buf = new js.Serialize.SerialBuffer();
          SigningRequest.idType.serialize(buf, req[1]);
          data = js.Serialize.arrayToHex(buf.asUint8Array());
          authorization = [req[1].permission];
        }

        return [{
          account: '',
          name: 'identity',
          authorization: authorization,
          data: data
        }];

      case 'transaction':
        return req[1].actions;

      default:
        throw new Error('Invalid signing request data');
    }
  }
  /** Unresolved transaction. */
  ;

  _proto.getRawTransaction = function getRawTransaction() {
    var req = this.data.req;

    switch (req[0]) {
      case 'transaction':
        return req[1];

      case 'action':
      case 'action[]':
      case 'identity':
        return {
          actions: this.getRawActions(),
          context_free_actions: [],
          transaction_extensions: [],
          expiration: '1970-01-01T00:00:00.000',
          ref_block_num: 0,
          ref_block_prefix: 0,
          max_cpu_usage_ms: 0,
          max_net_usage_words: 0,
          delay_sec: 0
        };

      default:
        throw new Error('Invalid signing request data');
    }
  }
  /** Whether the request is an identity request. */
  ;

  _proto.isIdentity = function isIdentity() {
    return this.data.req[0] === 'identity';
  }
  /** Whether the request should be broadcast by signer. */
  ;

  _proto.shouldBroadcast = function shouldBroadcast() {
    if (this.isIdentity()) {
      return false;
    }

    return (this.data.flags & RequestFlagsBroadcast) !== 0;
  }
  /**
   * Present if the request is an identity request and requests a specific account.
   * @note This returns `nil` unless a specific identity has been requested,
   *       use `isIdentity` to check id requests.
   */
  ;

  _proto.getIdentity = function getIdentity() {
    if (this.data.req[0] === 'identity' && this.data.req[1].permission) {
      var actor = this.data.req[1].permission.actor;
      return actor === PlaceholderName ? null : actor;
    }

    return null;
  }
  /**
   * Present if the request is an identity request and requests a specific permission.
   * @note This returns `nil` unless a specific permission has been requested,
   *       use `isIdentity` to check id requests.
   */
  ;

  _proto.getIdentityPermission = function getIdentityPermission() {
    if (this.data.req[0] === 'identity' && this.data.req[1].permission) {
      var permission = this.data.req[1].permission.permission;
      return permission === PlaceholderName ? null : permission;
    }

    return null;
  }
  /** Get raw info dict */
  ;

  _proto.getRawInfo = function getRawInfo() {
    var rv = {};

    for (var _iterator = _createForOfIteratorHelperLoose(this.data.info), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          key = _step$value.key,
          value = _step$value.value;
      rv[key] = typeof value === 'string' ? js.Serialize.hexToUint8Array(value) : value;
    }

    return rv;
  }
  /** Get metadata values as strings. */
  ;

  _proto.getInfo = function getInfo() {
    var rv = {};
    var raw = this.getRawInfo();

    for (var _i = 0, _Object$keys = Object.keys(raw); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      rv[key] = textDecoder.decode(raw[key]);
    }

    return rv;
  }
  /** Set a metadata key. */
  ;

  _proto.setInfoKey = function setInfoKey(key, value) {
    var pair = this.data.info.find(function (pair) {
      return pair.key === key;
    });
    var encodedValue;

    switch (typeof value) {
      case 'string':
        encodedValue = textEncoder.encode(value);
        break;

      case 'boolean':
        encodedValue = new Uint8Array([value ? 1 : 0]);
        break;

      default:
        throw new TypeError('Invalid value type, expected string or boolean.');
    }

    if (!pair) {
      pair = {
        key: key,
        value: encodedValue
      };
      this.data.info.push(pair);
    } else {
      pair.value = encodedValue;
    }
  }
  /** Return a deep copy of this request. */
  ;

  _proto.clone = function clone() {
    var signature;

    if (this.signature) {
      signature = JSON.parse(JSON.stringify(this.signature));
    }

    var data = JSON.stringify(this.data, function (_, value) {
      if (value instanceof Uint8Array) {
        return Array.from(value);
      }

      return value;
    });
    return new SigningRequest(this.version, JSON.parse(data), this.zlib, this.abiProvider, signature, this.scheme);
  } // Convenience methods.
  ;

  _proto.toString = function toString() {
    return this.encode();
  };

  _proto.toJSON = function toJSON() {
    return this.encode();
  };

  return SigningRequest;
}();
SigningRequest.type = /*#__PURE__*/AbiTypes.get('signing_request');
SigningRequest.idType = /*#__PURE__*/AbiTypes.get('identity');
SigningRequest.transactionType = /*#__PURE__*/AbiTypes.get('transaction');
var ResolvedSigningRequest = /*#__PURE__*/function () {
  function ResolvedSigningRequest(request, signer, transaction, serializedTransaction) {
    this.request = request;
    this.signer = signer;
    this.transaction = transaction;
    this.serializedTransaction = serializedTransaction;
  }
  /** Recreate a resolved request from a callback payload. */


  ResolvedSigningRequest.fromPayload =
  /*#__PURE__*/
  function () {
    var _fromPayload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(payload, options) {
      var request, abis;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (options === void 0) {
                options = {};
              }

              request = SigningRequest.from(payload.req, options);
              _context4.next = 4;
              return request.fetchAbis();

            case 4:
              abis = _context4.sent;
              return _context4.abrupt("return", request.resolve(abis, {
                actor: payload.sa,
                permission: payload.sp
              }, {
                ref_block_num: Number(payload.rbn),
                ref_block_prefix: Number(payload.rid),
                expiration: payload.ex
              }));

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function fromPayload(_x5, _x6) {
      return _fromPayload.apply(this, arguments);
    }

    return fromPayload;
  }();

  var _proto2 = ResolvedSigningRequest.prototype;

  _proto2.getTransactionId = function getTransactionId() {
    return js.Serialize.arrayToHex(sha256(this.serializedTransaction));
  };

  _proto2.getCallback = function getCallback(signatures, blockNum) {
    var _this$request$data = this.request.data,
        callback = _this$request$data.callback,
        flags = _this$request$data.flags;

    if (!callback || callback.length === 0) {
      return null;
    }

    if (!signatures || signatures.length === 0) {
      throw new Error('Must have at least one signature to resolve callback');
    }

    var payload = {
      sig: signatures[0],
      tx: this.getTransactionId(),
      rbn: String(this.transaction.ref_block_num),
      rid: String(this.transaction.ref_block_prefix),
      ex: this.transaction.expiration,
      req: this.request.encode(),
      sa: this.signer.actor,
      sp: this.signer.permission
    };

    for (var _iterator2 = _createForOfIteratorHelperLoose(signatures.slice(1).entries()), _step2; !(_step2 = _iterator2()).done;) {
      var _step2$value = _step2.value,
          n = _step2$value[0],
          sig = _step2$value[1];
      payload["sig" + n] = sig;
    }

    if (blockNum) {
      payload.bn = String(blockNum);
    }

    var url = callback.replace(/({{([a-z0-9]+)}})/g, function (_1, _2, m) {
      return payload[m] || '';
    });
    return {
      background: (flags & RequestFlagsBackground) !== 0,
      payload: payload,
      url: url
    };
  };

  return ResolvedSigningRequest;
}();
/** Internal helper that creates a contract representation from an abi for the eosjs serializer. */

function getContract(contractAbi) {
  var types = js.Serialize.getTypesFromAbi(js.Serialize.createInitialTypes(), contractAbi);
  var actions = new Map();

  for (var _iterator3 = _createForOfIteratorHelperLoose(contractAbi.actions), _step3; !(_step3 = _iterator3()).done;) {
    var _step3$value = _step3.value,
        name = _step3$value.name,
        type = _step3$value.type;
    actions.set(name, js.Serialize.getType(types, type));
  }

  return {
    types: types,
    actions: actions
  };
}

function serializeAction(_x7, _x8) {
  return _serializeAction.apply(this, arguments);
}

function _serializeAction() {
  _serializeAction = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(action, abiProvider) {
    var contractAbi, contract;
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!(typeof action.data === 'string')) {
              _context5.next = 2;
              break;
            }

            return _context5.abrupt("return", action);

          case 2:
            if (!isIdentity(action)) {
              _context5.next = 6;
              break;
            }

            contractAbi = data;
            _context5.next = 13;
            break;

          case 6:
            if (!abiProvider) {
              _context5.next = 12;
              break;
            }

            _context5.next = 9;
            return abiProvider.getAbi(action.account);

          case 9:
            contractAbi = _context5.sent;
            _context5.next = 13;
            break;

          case 12:
            throw new Error('Missing abi provider');

          case 13:
            contract = getContract(contractAbi);
            return _context5.abrupt("return", js.Serialize.serializeAction(contract, action.account, action.name, action.authorization, action.data));

          case 15:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _serializeAction.apply(this, arguments);
}

function variantId(chainId) {
  if (!chainId) {
    chainId = exports.ChainName.EOS;
  }

  if (typeof chainId === 'number') {
    return ['chain_alias', chainId];
  } else {
    // resolve known chain id's to their aliases
    var name = idToName(chainId);

    if (name !== exports.ChainName.UNKNOWN) {
      return ['chain_alias', name];
    }

    return ['chain_id', chainId];
  }
}

function isIdentity(action) {
  return action.account === '' && action.name === 'identity';
}

function hasTapos(tx) {
  return !(tx.expiration === '1970-01-01T00:00:00.000' && tx.ref_block_num === 0 && tx.ref_block_prefix === 0);
}
/** Resolve a chain id to a chain name alias, returns UNKNOWN (0x00) if the chain id has no alias. */


function idToName(chainId) {
  chainId = chainId.toLowerCase();

  for (var _iterator4 = _createForOfIteratorHelperLoose(ChainIdLookup), _step4; !(_step4 = _iterator4()).done;) {
  }

  return exports.ChainName.UNKNOWN;
}
/** Resolve a chain name alias to a chain id. */

function nameToId(chainName) {
  return ChainIdLookup.get(chainName) || '0000000000000000000000000000000000000000000000000000000000000000';
}

exports.PlaceholderAuth = PlaceholderAuth;
exports.PlaceholderName = PlaceholderName;
exports.PlaceholderPermission = PlaceholderPermission;
exports.ResolvedSigningRequest = ResolvedSigningRequest;
exports.SigningRequest = SigningRequest;
exports.abi = abi;
exports.idToName = idToName;
exports.nameToId = nameToId;
//# sourceMappingURL=signing-request.cjs.development.js.map
