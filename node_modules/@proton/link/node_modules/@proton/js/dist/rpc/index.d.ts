import { AbiProvider, AuthorityProvider } from '../api/types';
import { get_account, get_block_header_state, get_block_info, get_block, get_currency_balance, get_currency_stats, get_info, get_producer_schedule, get_producers, get_scheduled_transactions, get_activated_protocol_features, getRequiredKeys } from './chain';
import { history_get_actions, history_get_transaction, history_get_key_accounts, history_get_controlled_accounts } from './history';
import { db_size_get } from './db';
import { applyForKyc, checkUserKycStatus, currentLocation, getValidKycProviders, isLightKYCVerified, fetchKycCountries, otcQuote, otcOrder, generateAddress, withdrawMetal, withdrawalHistoryMetal, getTokenPrices, getWithdrawalFee } from './proton';
import { get_table_rows, get_kv_table_rows, get_table_by_scope } from './tables';
import { push_transaction, send_transaction } from './pushTransaction';
import { get_abi, get_raw_code_and_abi, getRawAbi, get_raw_abi, get_code } from './abiCode';
/** Make RPC calls */
export declare class JsonRpc implements AuthorityProvider, AbiProvider {
    endpoints: string[];
    maxRetries: number;
    currentEndpoint: string;
    validKycProviders: string[];
    /**
     * @param args
     *`fetch`:
     * browsers: leave `null` or `undefined`
     * node: provide an implementation
     */
    constructor(endpoints: string | string[]);
    nextEndpoint(): void;
    /** Post `body` to `endpoint + path`. Throws detailed error information in `RpcError` when available. */
    post(path: string, body: any, currentRetries?: number): Promise<any>;
    /** Get from endpoint  */
    get(path: string): Promise<any>;
    get_account: typeof get_account;
    get_block_header_state: typeof get_block_header_state;
    get_block_info: typeof get_block_info;
    get_block: typeof get_block;
    get_currency_balance: typeof get_currency_balance;
    get_currency_stats: typeof get_currency_stats;
    get_info: typeof get_info;
    get_producer_schedule: typeof get_producer_schedule;
    get_producers: typeof get_producers;
    get_scheduled_transactions: typeof get_scheduled_transactions;
    get_activated_protocol_features: typeof get_activated_protocol_features;
    getRequiredKeys: typeof getRequiredKeys;
    get_abi: typeof get_abi;
    get_raw_code_and_abi: typeof get_raw_code_and_abi;
    getRawAbi: typeof getRawAbi;
    get_raw_abi: typeof get_raw_abi;
    get_code: typeof get_code;
    push_transaction: typeof push_transaction;
    send_transaction: typeof send_transaction;
    get_table_rows: typeof get_table_rows;
    get_kv_table_rows: typeof get_kv_table_rows;
    get_table_by_scope: typeof get_table_by_scope;
    history_get_actions: typeof history_get_actions;
    history_get_transaction: typeof history_get_transaction;
    history_get_key_accounts: typeof history_get_key_accounts;
    history_get_controlled_accounts: typeof history_get_controlled_accounts;
    db_size_get: typeof db_size_get;
    fetchKycCountries: typeof fetchKycCountries;
    getValidKycProviders: typeof getValidKycProviders;
    isLightKYCVerified: typeof isLightKYCVerified;
    checkUserKycStatus: typeof checkUserKycStatus;
    applyForKyc: typeof applyForKyc;
    currentLocation: typeof currentLocation;
    otcQuote: typeof otcQuote;
    otcOrder: typeof otcOrder;
    generateAddress: typeof generateAddress;
    withdrawMetal: typeof withdrawMetal;
    withdrawalHistoryMetal: typeof withdrawalHistoryMetal;
    getTokenPrices: typeof getTokenPrices;
    getWithdrawalFee: typeof getWithdrawalFee;
}
export { RpcError } from './error';
