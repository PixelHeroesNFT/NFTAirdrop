import { BrowserTransportOptions } from '@proton/browser-transport';
import ProtonLink, { LinkOptions, LinkStorage } from '@proton/link';
import { JsonRpc } from '@proton/js';
declare type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export interface CustomStyleOptions {
    modalBackgroundColor?: string;
    logoBackgroundColor?: string;
    isLogoRound?: boolean;
    optionBackgroundColor?: string;
    optionFontColor?: string;
    primaryFontColor?: string;
    secondaryFontColor?: string;
    linkColor?: string;
}
interface ConnectWalletArgs {
    linkOptions: PartialBy<LinkOptions, 'transport'> & {
        endpoints?: string | string[];
        rpc?: JsonRpc;
        storage?: LinkStorage;
        storagePrefix?: string;
        restoreSession?: boolean;
    };
    transportOptions?: BrowserTransportOptions;
    selectorOptions?: {
        appName?: string;
        appLogo?: string;
        walletType?: string;
        customStyleOptions?: CustomStyleOptions;
    };
}
export declare const ConnectWallet: ({ linkOptions, transportOptions, selectorOptions }: ConnectWalletArgs) => Promise<{
    link: null;
    session: null;
    loginResult?: undefined;
} | {
    link: ProtonLink | undefined;
    session: import("@proton/link").LinkSession;
    loginResult: import("@proton/link").LoginResult | undefined;
}>;
export {};
