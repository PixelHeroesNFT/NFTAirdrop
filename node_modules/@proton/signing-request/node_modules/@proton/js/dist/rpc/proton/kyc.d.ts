import { JsonRpc } from '../index';
import { CountryOption, UserInfo, KycIpInfo, ApplyForKycParams, KycApplyResponse, KycStatus } from '../types';
export declare function fetchKycCountries(this: JsonRpc, { chain }: {
    chain: string;
}): Promise<CountryOption[]>;
/**
 * Checks blockchain for a list of kycproviders, and sorts through the ones that are blacklisted.
 * @returns An array of strings with valid kyc provider names.
 */
export declare function getValidKycProviders(this: JsonRpc): Promise<void>;
/**
 * Takes an account or a list of accounts and checks to make sure that they are light-verified
 * @param account This could be an array of user rows from the usersinfo table on the blockchain, or a singular string for an account name
 * @returns An object of the user data as pulled from the usersinfo table on the blockchain with an additional key, isLightKYCVerified (boolean)
 */
export declare function isLightKYCVerified(this: JsonRpc, account: UserInfo[] | string): Promise<UserInfo[]>;
/**
 * FAILED
 * UNSUBMITTED
 * PENDING
 * PASSED
 */
export declare function checkUserKycStatus(this: JsonRpc, { chain, actor, expectedTier }: {
    chain: string;
    actor: string;
    expectedTier: number;
}): Promise<KycStatus>;
export declare function applyForKyc(this: JsonRpc, params: ApplyForKycParams): Promise<KycApplyResponse>;
export declare function currentLocation(this: JsonRpc): Promise<KycIpInfo>;
