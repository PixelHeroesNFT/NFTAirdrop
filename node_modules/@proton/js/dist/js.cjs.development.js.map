{"version":3,"file":"js.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/api/numeric.ts","../src/api/serialize.ts","../src/cryptography/conversions.ts","../src/cryptography/publicKey.ts","../src/cryptography/signature.ts","../src/cryptography/privateKey.ts","../src/cryptography/key.ts","../src/cryptography/jsSignatureProvider.ts","../src/api/index.ts","../src/api/types.ts","../src/rpc/error.ts","../src/rpc/proton.ts","../src/rpc/index.ts","../src/rpc/types.ts","../src/cryptography/webauthn.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/**\n * @module Numeric\n */\n import { sha256 } from 'hash.js';\n import RIPEMD160 from 'ripemd-ts'\n \n const ripemd160 = RIPEMD160.hash as (a: Uint8Array) => ArrayBuffer;\n const base58Chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n const base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n \n const create_base58_map = (): number[] => {\n    const base58M = Array(256).fill(-1) as number[];\n     for (let i = 0; i < base58Chars.length; ++i) {\n         base58M[base58Chars.charCodeAt(i)] = i;\n     }\n     return base58M;\n };\n \n const base58Map = create_base58_map();\n \n const create_base64_map = (): number[] => {\n    const base64M = Array(256).fill(-1) as number[];\n     for (let i = 0; i < base64Chars.length; ++i) {\n         base64M[base64Chars.charCodeAt(i)] = i;\n     }\n     base64M['='.charCodeAt(0)] = 0;\n     return base64M;\n };\n \n const base64Map = create_base64_map();\n \n /** Is `bignum` a negative number? */\n export const isNegative = (bignum: Uint8Array): boolean => {\n    return (bignum[bignum.length - 1] & 0x80) !== 0;\n };\n \n /** Negate `bignum` */\n export const negate = (bignum: Uint8Array): void => {\n    let carry = 1;\n     for (let i = 0; i < bignum.length; ++i) {\n         const x = (~bignum[i] & 0xff) + carry;\n         bignum[i] = x;\n         carry = x >> 8;\n     }\n };\n \n /**\n  * Convert an unsigned decimal number in `s` to a bignum\n  *\n  * @param size bignum size (bytes)\n  */\nexport const decimalToBinary = (size: number, s: string): Uint8Array => {\n    const result = new Uint8Array(size);\n     for (let i = 0; i < s.length; ++i) {\n         const srcDigit = s.charCodeAt(i);\n         if (srcDigit < '0'.charCodeAt(0) || srcDigit > '9'.charCodeAt(0)) {\n             throw new Error('invalid number');\n         }\n         let carry = srcDigit - '0'.charCodeAt(0);\n         for (let j = 0; j < size; ++j) {\n             const x = result[j] * 10 + carry;\n             result[j] = x;\n             carry = x >> 8;\n         }\n         if (carry) {\n             throw new Error('number is out of range');\n         }\n     }\n     return result;\n };\n \n /**\n  * Convert a signed decimal number in `s` to a bignum\n  *\n  * @param size bignum size (bytes)\n  */\nexport const signedDecimalToBinary = (size: number, s: string): Uint8Array => {\n    const negative = s[0] === '-';\n     if (negative) {\n         s = s.substr(1);\n     }\n     const result = decimalToBinary(size, s);\n     if (negative) {\n         negate(result);\n         if (!isNegative(result)) {\n             throw new Error('number is out of range');\n         }\n     } else if (isNegative(result)) {\n         throw new Error('number is out of range');\n     }\n     return result;\n };\n \n /**\n  * Convert `bignum` to an unsigned decimal number\n  *\n  * @param minDigits 0-pad result to this many digits\n  */\nexport const binaryToDecimal = (bignum: Uint8Array, minDigits = 1): string => {\n    const result = Array(minDigits).fill('0'.charCodeAt(0)) as number[];\n    for (let i = bignum.length - 1; i >= 0; --i) {\n        let carry = bignum[i];\n        for (let j = 0; j < result.length; ++j) {\n            const x = ((result[j] - '0'.charCodeAt(0)) << 8) + carry;\n            result[j] = '0'.charCodeAt(0) + x % 10;\n            carry = (x / 10) | 0;\n        }\n        while (carry) {\n            result.push('0'.charCodeAt(0) + carry % 10);\n            carry = (carry / 10) | 0;\n        }\n     }\n     result.reverse();\n     return String.fromCharCode(...result);\n };\n \n /**\n  * Convert `bignum` to a signed decimal number\n  *\n  * @param minDigits 0-pad result to this many digits\n  */\nexport const signedBinaryToDecimal = (bignum: Uint8Array, minDigits = 1): string => {\n    if (isNegative(bignum)) {\n         const x = bignum.slice();\n         negate(x);\n         return '-' + binaryToDecimal(x, minDigits);\n     }\n     return binaryToDecimal(bignum, minDigits);\n };\n \nconst base58ToBinaryVarSize = (s: string): Uint8Array => {\n    const result = [] as number[];\n    for (let i = 0; i < s.length; ++i) {\n        let carry = base58Map[s.charCodeAt(i)];\n        if (carry < 0) {\n            throw new Error('invalid base-58 value');\n        }\n        for (let j = 0; j < result.length; ++j) {\n            const x = result[j] * 58 + carry;\n            result[j] = x & 0xff;\n            carry = x >> 8;\n        }\n        if (carry) {\n            result.push(carry);\n        }\n    }\n    for (const ch of s) {\n        if (ch === '1') {\n            result.push(0);\n        } else {\n            break;\n        }\n    }\n    result.reverse();\n    return new Uint8Array(result);\n };\n \n /**\n  * Convert an unsigned base-58 number in `s` to a bignum\n  *\n  * @param size bignum size (bytes)\n  */\nexport const base58ToBinary = (size: number, s: string): Uint8Array => {\n    if (!size) {\n        return base58ToBinaryVarSize(s);\n    }\n    const result = new Uint8Array(size);\n    for (let i = 0; i < s.length; ++i) {\n        let carry = base58Map[s.charCodeAt(i)];\n        if (carry < 0) {\n            throw new Error('invalid base-58 value');\n        }\n        for (let j = 0; j < size; ++j) {\n            const x = result[j] * 58 + carry;\n            result[j] = x;\n            carry = x >> 8;\n        }\n        if (carry) {\n            throw new Error('base-58 value is out of range');\n        }\n    }\n    result.reverse();\n    return result;\n };\n \n /**\n  * Convert `bignum` to a base-58 number\n  *\n  * @param minDigits 0-pad result to this many digits\n  */\nexport const binaryToBase58 = (bignum: Uint8Array): string => {\n    const result = [] as number[];\n    for (const byte of bignum) {\n        let carry = byte;\n        for (let j = 0; j < result.length; ++j) {\n            const x = (base58Map[result[j]] << 8) + carry;\n            result[j] = base58Chars.charCodeAt(x % 58);\n            carry = (x / 58) | 0;\n        }\n        while (carry) {\n            result.push(base58Chars.charCodeAt(carry % 58));\n            carry = (carry / 58) | 0;\n        }\n    }\n    for (const byte of bignum) {\n        if (byte) {\n            break;\n        } else {\n            result.push('1'.charCodeAt(0));\n        }\n    }\n    result.reverse();\n    return String.fromCharCode(...result);\n };\n \n /** Convert an unsigned base-64 number in `s` to a bignum */\nexport const base64ToBinary = (s: string): Uint8Array => {\n     let len = s.length;\n     if ((len & 3) === 1 && s[len - 1] === '=') {\n         len -= 1;\n     } // fc appends an extra '='\n     if ((len & 3) !== 0) {\n         throw new Error('base-64 value is not padded correctly');\n     }\n     const groups = len >> 2;\n     let bytes = groups * 3;\n     if (len > 0 && s[len - 1] === '=') {\n         if (s[len - 2] === '=') {\n             bytes -= 2;\n         } else {\n             bytes -= 1;\n         }\n     }\n     const result = new Uint8Array(bytes);\n \n     for (let group = 0; group < groups; ++group) {\n         const digit0 = base64Map[s.charCodeAt(group * 4 + 0)];\n         const digit1 = base64Map[s.charCodeAt(group * 4 + 1)];\n         const digit2 = base64Map[s.charCodeAt(group * 4 + 2)];\n         const digit3 = base64Map[s.charCodeAt(group * 4 + 3)];\n         result[group * 3 + 0] = (digit0 << 2) | (digit1 >> 4);\n         if (group * 3 + 1 < bytes) {\n             result[group * 3 + 1] = ((digit1 & 15) << 4) | (digit2 >> 2);\n         }\n         if (group * 3 + 2 < bytes) {\n             result[group * 3 + 2] = ((digit2 & 3) << 6) | digit3;\n         }\n     }\n     return result;\n };\n \n /** Key types this library supports */\n export enum KeyType {\n     k1 = 0,\n     r1 = 1,\n     wa = 2,\n     rsa = 100,\n     eth = 101\n }\n \n /** Public key data size, excluding type field */\n export const publicKeyDataSize = 33;\n \n /** Private key data size, excluding type field */\n export const privateKeyDataSize = 32;\n \n /** Signature data size, excluding type field */\n export const signatureDataSize = 65;\n \n /** Public key, private key, or signature in binary form */\n export interface Key {\n     type: KeyType;\n     data: Uint8Array;\n }\n \nconst digestSuffixRipemd160 = (data: Uint8Array, suffix: string): ArrayBuffer => {\n    const d = new Uint8Array(data.length + suffix.length);\n    for (let i = 0; i < data.length; ++i) {\n        d[i] = data[i];\n    }\n    for (let i = 0; i < suffix.length; ++i) {\n        d[data.length + i] = suffix.charCodeAt(i);\n    }\n    return ripemd160(d);\n};\n \n const stringToKey = (s: string, type: KeyType, size: number, suffix: string): Key => {\n     const whole = base58ToBinary(size ? size + 4 : 0, s);\n     const result = { type, data: new Uint8Array(whole.buffer, 0, whole.length - 4) };\n     const digest = new Uint8Array(digestSuffixRipemd160(result.data, suffix));\n     if (\n        digest[0] !== whole[whole.length - 4] ||\n        digest[1] !== whole[whole.length - 3] ||\n        digest[2] !== whole[whole.length - 2] ||\n        digest[3] !== whole[whole.length - 1]\n     ) {\n        throw new Error('checksum doesn\\'t match');\n     }\n     return result;\n };\n \nconst keyToString = (key: Key, suffix: string, prefix: string): string => {\n    const digest = new Uint8Array(digestSuffixRipemd160(key.data, suffix));\n    const whole = new Uint8Array(key.data.length + 4);\n    for (let i = 0; i < key.data.length; ++i) {\n        whole[i] = key.data[i];\n    }\n    for (let i = 0; i < 4; ++i) {\n        whole[i + key.data.length] = digest[i];\n    }\n    return prefix + binaryToBase58(whole);\n};\n \n /** Convert key in `s` to binary form */\n export const stringToPublicKey = (s: string, prefix = 'EOS'): Key => {\n     if (typeof s !== 'string') {\n         throw new Error('expected string containing public key');\n     }\n     if (s.substr(0, 3) === prefix) {\n         const whole = base58ToBinary(publicKeyDataSize + 4, s.substr(3));\n         const key = { type: KeyType.k1, data: new Uint8Array(publicKeyDataSize) };\n         for (let i = 0; i < publicKeyDataSize; ++i) {\n             key.data[i] = whole[i];\n         }\n         const digest = new Uint8Array(ripemd160(key.data));\n         if (digest[0] !== whole[publicKeyDataSize] || digest[1] !== whole[34]\n             || digest[2] !== whole[35] || digest[3] !== whole[36]) {\n             throw new Error('checksum doesn\\'t match');\n         }\n         return key;\n     } else if (s.substr(0, 7) === 'PUB_K1_') {\n         return stringToKey(s.substr(7), KeyType.k1, publicKeyDataSize, 'K1');\n     } else if (s.substr(0, 7) === 'PUB_R1_') {\n         return stringToKey(s.substr(7), KeyType.r1, publicKeyDataSize, 'R1');\n     } else if (s.substr(0, 7) === 'PUB_WA_') {\n         return stringToKey(s.substr(7), KeyType.wa, 0, 'WA');\n     } else {\n         throw new Error('unrecognized public key format');\n     }\n };\n \n /** Convert public `key` to legacy string (base-58) form */\n export const publicKeyToLegacyString = (key: Key, prefix: string = 'EOS') => {\n     if (key.type === KeyType.k1 && key.data.length === publicKeyDataSize) {\n         return keyToString(key, '', prefix);\n     } else if (key.type === KeyType.r1 || key.type === KeyType.wa) {\n         throw new Error('Key format not supported in legacy conversion');\n     } else {\n         throw new Error('unrecognized public key format');\n     }\n };\n \n /** Convert `key` to string (base-58) form */\n export const publicKeyToString = (key: Key): string => {\n    if (key.type === KeyType.k1 && key.data.length === publicKeyDataSize) {\n         return keyToString(key, 'K1', 'PUB_K1_');\n     } else if (key.type === KeyType.r1 && key.data.length === publicKeyDataSize) {\n         return keyToString(key, 'R1', 'PUB_R1_');\n     } else if (key.type === KeyType.wa) {\n         return keyToString(key, 'WA', 'PUB_WA_');\n     } else {\n         throw new Error('unrecognized public key format');\n     }\n };\n \n /** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).\n  * Leaves other formats untouched\n  */\n export const convertLegacyPublicKey = (s: string, prefix = 'EOS'): string => {\n     if (s.substr(0, 3) === prefix) {\n         return publicKeyToString(stringToPublicKey(s, prefix));\n     }\n     return s;\n };\n \n /** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).\n  * Leaves other formats untouched\n  */\n export const convertLegacyPublicKeys = (keys: string[], prefix = 'EOS'): string[] => {\n     return keys.map((key: string) => convertLegacyPublicKey(key, prefix));\n };\n \n /** Convert key in `s` to binary form */\n export const stringToPrivateKey = (s: string): Key => {\n     if (typeof s !== 'string') {\n         throw new Error('expected string containing private key');\n     }\n     if (s.substr(0, 7) === 'PVT_R1_') {\n         return stringToKey(s.substr(7), KeyType.r1, privateKeyDataSize, 'R1');\n     } else if (s.substr(0, 7) === 'PVT_K1_') {\n         return stringToKey(s.substr(7), KeyType.k1, privateKeyDataSize, 'K1');\n     } else {\n         // todo: Verify checksum: sha256(sha256(key.data)).\n         //       Not critical since a bad key will fail to produce a\n         //       valid signature anyway.\n         const whole = base58ToBinary(privateKeyDataSize + 5, s);\n         const key = { type: KeyType.k1, data: new Uint8Array(privateKeyDataSize) };\n         if (whole[0] !== 0x80) {\n             throw new Error('unrecognized private key type');\n         }\n         for (let i = 0; i < privateKeyDataSize; ++i) {\n             key.data[i] = whole[i + 1];\n         }\n         return key;\n     }\n };\n \n /** Convert private `key` to legacy string (base-58) form */\n export const privateKeyToLegacyString = (key: Key): string => {\n     if (key.type === KeyType.k1 && key.data.length === privateKeyDataSize) {\n         const whole = [] as number[];\n         whole.push(128);\n         key.data.forEach((byte) => whole.push(byte));\n         const digest = new Uint8Array(\n             sha256().update(\n                 sha256().update(whole).digest()\n             ).digest()\n         );\n \n         const result = new Uint8Array(privateKeyDataSize + 5);\n         for (let i = 0; i < whole.length; i++) {\n             result[i] = whole[i];\n         }\n         for (let i = 0; i < 4; i++) {\n             result[i + whole.length] = digest[i];\n         }\n         return binaryToBase58(result);\n     } else if (key.type === KeyType.r1 || key.type === KeyType.wa) {\n         throw new Error('Key format not supported in legacy conversion');\n     } else {\n         throw new Error('unrecognized public key format');\n     }\n };\n \n /** Convert `key` to string (base-58) form */\n export const privateKeyToString = (key: Key): string => {\n     if (key.type === KeyType.r1) {\n         return keyToString(key, 'R1', 'PVT_R1_');\n     } else if (key.type === KeyType.k1) {\n         return keyToString(key, 'K1', 'PVT_K1_');\n     } else {\n         throw new Error('unrecognized private key format');\n     }\n };\n \n /** Convert key in `s` to binary form */\n export const stringToSignature = (s: string): Key => {\n     if (typeof s !== 'string') {\n         throw new Error('expected string containing signature');\n     }\n     if (s.substr(0, 7) === 'SIG_K1_') {\n         return stringToKey(s.substr(7), KeyType.k1, signatureDataSize, 'K1');\n     } else if (s.substr(0, 7) === 'SIG_R1_') {\n         return stringToKey(s.substr(7), KeyType.r1, signatureDataSize, 'R1');\n     } else if (s.substr(0, 7) === 'SIG_WA_') {\n         return stringToKey(s.substr(7), KeyType.wa, 0, 'WA');\n     } else {\n         throw new Error('unrecognized signature format');\n     }\n };\n \n /** Convert `signature` to string (base-58) form */\n export const signatureToString = (signature: Key): string => {\n     if (signature.type === KeyType.k1) {\n         return keyToString(signature, 'K1', 'SIG_K1_');\n     } else if (signature.type === KeyType.r1) {\n         return keyToString(signature, 'R1', 'SIG_R1_');\n     } else if (signature.type === KeyType.wa) {\n         return keyToString(signature, 'WA', 'SIG_WA_');\n     } else {\n         throw new Error('unrecognized signature format');\n     }\n };\n ","/**\n * @module Serialize\n */\n/* eslint-disable max-classes-per-file */\n/* eslint-disable jsdoc/check-indentation */\n\nimport * as numeric from './numeric';\nimport { Abi, BlockTaposInfo } from '../rpc/types';\nimport { Query, TransactionHeader } from './types';\nimport 'fast-text-encoding';\n\n/** A field in an abi */\nexport interface Field {\n    /** Field name */\n    name: string;\n\n    /** Type name in string form */\n    typeName: string;\n\n    /** Type of the field */\n    type?: Type;\n}\n\n/** Options for serialize() and deserialize() */\nexport interface SerializerOptions {\n    bytesAsUint8Array?: boolean;\n}\n\n/** State for serialize() and deserialize() */\nexport class SerializerState {\n    public options: SerializerOptions;\n\n    /** Have any binary extensions been skipped? */\n    public skippedBinaryExtension = false;\n\n    constructor(options: SerializerOptions = {}) {\n        this.options = options;\n    }\n}\n\n/**\n * An Anyvar (non-short form) may be any of the following:\n *  * null\n *  * string\n *  * number\n *    * Caution: assumes number is int32. Use {type, value} form for other numeric types\n *  * an array of anyvar\n *  * {type, value}\n *      * type is a string matching one of the predefined types in anyvarDefs\n *      * value:\n *          * If type === 'any_object', then value is an object. The values within the object are anyvar.\n *          * If type === 'any_array', then value is an array of anyvar.\n *          * Else, value must be eosjs-compatible with the specified type (e.g. uint64 should be a string\n *            containing the value in decimal).\n *  * Other object. The values within the object are anyvar.\n *\n * The short form is more convenient, but it can't be converted back to binary (serialized).\n * Wherever the anyvar would have {type, value}, it has just the value instead.\n */\nexport type Anyvar = null | string | number | Anyvar[] | { type: string, value: any } | Record<string, unknown>;\n\ninterface AnyvarDef {\n    index: number;\n    useShortForm: boolean;\n    type: {\n        name: string,\n        serialize(buffer: SerialBuffer, value: any): void,\n        deserialize(buffer: SerialBuffer, state?: SerializerState): any,\n    };\n}\n\n/** A type in an abi */\nexport interface Type {\n    /** Type name */\n    name: string;\n\n    /** Type name this is an alias of, if any */\n    aliasOfName: string;\n\n    /** Type this is an array of, if any */\n    arrayOf?: Type;\n\n    /** Type this is an optional of, if any */\n    optionalOf?: Type;\n\n    /** Marks binary extension fields */\n    extensionOf?: Type;\n\n    /** Base name of this type, if this is a struct */\n    baseName: string;\n\n    /** Base of this type, if this is a struct */\n    base?: Type;\n\n    /** Contained fields, if this is a struct */\n    fields: Field[];\n\n    /** Convert `data` to binary form and store in `buffer` */\n    serialize: (buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean) => void;\n\n    /** Convert data in `buffer` from binary form */\n    deserialize: (buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) => any;\n}\n\n/** Structural representation of a symbol */\nexport interface Symbol {\n    /** Name of the symbol, not including precision */\n    name: string;\n\n    /** Number of digits after the decimal point */\n    precision: number;\n}\n\nexport interface Contract {\n    actions: Map<string, Type>;\n    types: Map<string, Type>;\n}\n\nexport interface Authorization {\n    actor: string;\n    permission: string;\n}\n\n/** Action with data in structured form */\nexport interface Action {\n    account: string;\n    name: string;\n    authorization: Authorization[];\n    data: any;\n    hex_data?: string;\n}\n\n/** Action with data in serialized hex form */\nexport interface SerializedAction {\n    account: string;\n    name: string;\n    authorization: Authorization[];\n    data: string;\n}\n\n/** Serialize and deserialize data */\nexport class SerialBuffer {\n    /** Amount of valid data in `array` */\n    public length: number;\n\n    /** Data in serialized (binary) form */\n    public array: Uint8Array;\n\n    /** Current position while reading (deserializing) */\n    public readPos = 0;\n\n    public textEncoder: TextEncoder;\n    public textDecoder: TextDecoder;\n\n    /**\n     * @param __namedParameters\n     * `array`: `null` if serializing, or binary data to deserialize\n     * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser\n     * `textDecoder`: `TextDecider` instance to use. Pass in `null` if running in a browser\n     */\n    constructor({ array, textEncoder, textDecoder } = {} as { array?: Uint8Array, textEncoder?: TextEncoder, textDecoder?: TextDecoder }) {\n        this.array = array || new Uint8Array(1024);\n        this.length = array ? array.length : 0;\n        this.textEncoder = textEncoder || new TextEncoder()\n        this.textDecoder = textDecoder || new TextDecoder('utf-8')\n    }\n\n    /** Resize `array` if needed to have at least `size` bytes free */\n    public reserve(size: number): void {\n        if (this.length + size <= this.array.length) {\n            return;\n        }\n        let l = this.array.length;\n        while (this.length + size > l) {\n            l = Math.ceil(l * 1.5);\n        }\n        const newArray = new Uint8Array(l);\n        newArray.set(this.array);\n        this.array = newArray;\n    }\n\n    /** Is there data available to read? */\n    public haveReadData(): boolean {\n        return this.readPos < this.length;\n    }\n\n    /** Restart reading from the beginning */\n    public restartRead(): void {\n        this.readPos = 0;\n    }\n\n    /** Return data with excess storage trimmed away */\n    public asUint8Array(): Uint8Array {\n        return new Uint8Array(this.array.buffer, this.array.byteOffset, this.length);\n    }\n\n    /** Append bytes */\n    public pushArray(v: number[] | Uint8Array): void {\n        this.reserve(v.length);\n        this.array.set(v, this.length);\n        this.length += v.length;\n    }\n\n    /** Append bytes */\n    public push(...v: number[]): void {\n        this.pushArray(v);\n    }\n\n    /** Get a single byte */\n    public get(): number {\n        if (this.readPos < this.length) {\n            return this.array[this.readPos++];\n        }\n        throw new Error('Read past end of buffer');\n    }\n\n    /** Append bytes in `v`. Throws if `len` doesn't match `v.length` */\n    public pushUint8ArrayChecked(v: Uint8Array, len: number): void {\n        if (v.length !== len) {\n            throw new Error('Binary data has incorrect size');\n        }\n        this.pushArray(v);\n    }\n\n    /** Get `len` bytes */\n    public getUint8Array(len: number): Uint8Array {\n        if (this.readPos + len > this.length) {\n            throw new Error('Read past end of buffer');\n        }\n        const result = new Uint8Array(this.array.buffer, this.array.byteOffset + this.readPos, len);\n        this.readPos += len;\n        return result;\n    }\n\n    /** Skip `len` bytes */\n    public skip(len: number): void {\n        if (this.readPos + len > this.length) {\n            throw new Error('Read past end of buffer');\n        }\n        this.readPos += len;\n    }\n\n    /** Append a `uint16` */\n    public pushUint16(v: number): void {\n        this.push((v >> 0) & 0xff, (v >> 8) & 0xff);\n    }\n\n    /** Get a `uint16` */\n    public getUint16(): number {\n        let v = 0;\n        v |= this.get() << 0;\n        v |= this.get() << 8;\n        return v;\n    }\n\n    /** Append a `uint32` */\n    public pushUint32(v: number): void {\n        this.push((v >> 0) & 0xff, (v >> 8) & 0xff, (v >> 16) & 0xff, (v >> 24) & 0xff);\n    }\n\n    /** Get a `uint32` */\n    public getUint32(): number {\n        let v = 0;\n        v |= this.get() << 0;\n        v |= this.get() << 8;\n        v |= this.get() << 16;\n        v |= this.get() << 24;\n        return v >>> 0;\n    }\n\n    /** Append a `uint64`. *Caution*: `number` only has 53 bits of precision */\n    public pushNumberAsUint64(v: number): void {\n        this.pushUint32(v >>> 0);\n        this.pushUint32(Math.floor(v / 0x10000_0000) >>> 0);\n    }\n\n    /**\n     * Get a `uint64` as a `number`. *Caution*: `number` only has 53 bits of precision; some values will change.\n     * `numeric.binaryToDecimal(serialBuffer.getUint8Array(8))` recommended instead\n     */\n    public getUint64AsNumber(): number {\n        const low = this.getUint32();\n        const high = this.getUint32();\n        return (high >>> 0) * 0x10000_0000 + (low >>> 0);\n    }\n\n    /** Append a `varuint32` */\n    public pushVaruint32(v: number): void {\n        while (true) {\n            if (v >>> 7) {\n                this.push(0x80 | (v & 0x7f));\n                v = v >>> 7;\n            } else {\n                this.push(v);\n                break;\n            }\n        }\n    }\n\n    /** Get a `varuint32` */\n    public getVaruint32(): number {\n        let v = 0;\n        let bit = 0;\n        while (true) {\n            const b = this.get();\n            v |= (b & 0x7f) << bit;\n            bit += 7;\n            if (!(b & 0x80)) {\n                break;\n            }\n        }\n        return v >>> 0;\n    }\n\n    /** Append a `varint32` */\n    public pushVarint32(v: number): void {\n        this.pushVaruint32((v << 1) ^ (v >> 31));\n    }\n\n    /** Get a `varint32` */\n    public getVarint32(): number {\n        const v = this.getVaruint32();\n        if (v & 1) {\n            return ((~v) >> 1) | 0x8000_0000;\n        } else {\n            return v >>> 1;\n        }\n    }\n\n    /** Append a `float32` */\n    public pushFloat32(v: number): void {\n        this.pushArray(new Uint8Array((new Float32Array([v])).buffer));\n    }\n\n    /** Get a `float32` */\n    public getFloat32(): number {\n        return new Float32Array(this.getUint8Array(4).slice().buffer)[0];\n    }\n\n    /** Append a `float64` */\n    public pushFloat64(v: number): void {\n        this.pushArray(new Uint8Array((new Float64Array([v])).buffer));\n    }\n\n    /** Get a `float64` */\n    public getFloat64(): number {\n        return new Float64Array(this.getUint8Array(8).slice().buffer)[0];\n    }\n\n    /** Append a `name` */\n    public pushName(s: string): void {\n        if (typeof s !== 'string') {\n            throw new Error('Expected string containing name');\n        }\n        const regex = new RegExp(/^[.1-5a-z]{0,12}[.1-5a-j]?$/);\n        if (!regex.test(s)) {\n            throw new Error('Name should be less than 13 characters, or less than 14 if last character is between 1-5 or a-j, and only contain the following symbols .12345abcdefghijklmnopqrstuvwxyz'); // eslint-disable-line\n        }\n        const charToSymbol = (c: number): number => {\n            if (c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)) {\n                return (c - 'a'.charCodeAt(0)) + 6;\n            }\n            if (c >= '1'.charCodeAt(0) && c <= '5'.charCodeAt(0)) {\n                return (c - '1'.charCodeAt(0)) + 1;\n            }\n            return 0;\n        };\n        const a = new Uint8Array(8);\n        let bit = 63;\n        for (let i = 0; i < s.length; ++i) {\n            let c = charToSymbol(s.charCodeAt(i));\n            if (bit < 5) {\n                c = c << 1;\n            }\n            for (let j = 4; j >= 0; --j) {\n                if (bit >= 0) {\n                    a[Math.floor(bit / 8)] |= ((c >> j) & 1) << (bit % 8);\n                    --bit;\n                }\n            }\n        }\n        this.pushArray(a);\n    }\n\n    /** Get a `name` */\n    public getName(): string {\n        const a = this.getUint8Array(8);\n        let result = '';\n        for (let bit = 63; bit >= 0;) {\n            let c = 0;\n            for (let i = 0; i < 5; ++i) {\n                if (bit >= 0) {\n                    c = (c << 1) | ((a[Math.floor(bit / 8)] >> (bit % 8)) & 1);\n                    --bit;\n                }\n            }\n            if (c >= 6) {\n                result += String.fromCharCode(c + 'a'.charCodeAt(0) - 6);\n            } else if (c >= 1) {\n                result += String.fromCharCode(c + '1'.charCodeAt(0) - 1);\n            } else {\n                result += '.';\n            }\n        }\n        while (result.endsWith('.')) {\n            result = result.substr(0, result.length - 1);\n        }\n        return result;\n    }\n\n    /** Append length-prefixed binary data */\n    public pushBytes(v: number[] | Uint8Array): void {\n        this.pushVaruint32(v.length);\n        this.pushArray(v);\n    }\n\n    /** Get length-prefixed binary data */\n    public getBytes(): Uint8Array {\n        return this.getUint8Array(this.getVaruint32());\n    }\n\n    /** Append a string */\n    public pushString(v: string): void {\n        this.pushBytes(this.textEncoder.encode(v));\n    }\n\n    /** Get a string */\n    public getString(): string {\n        return this.textDecoder.decode(this.getBytes());\n    }\n\n    /** Append a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n    public pushSymbolCode(name: string): void {\n        if (typeof name !== 'string') {\n            throw new Error('Expected string containing symbol_code');\n        }\n        const a = [];\n        a.push(...this.textEncoder.encode(name));\n        while (a.length < 8) {\n            a.push(0);\n        }\n        this.pushArray(a.slice(0, 8));\n    }\n\n    /** Get a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n    public getSymbolCode(): string {\n        const a = this.getUint8Array(8);\n        let len;\n        for (len = 0; len < a.length; ++len) {\n            if (!a[len]) {\n                break;\n            }\n        }\n        const name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n        return name;\n    }\n\n    /** Append a `symbol` */\n    public pushSymbol({ name, precision }: { name: string, precision: number }): void {\n        if (!/^[A-Z]{1,7}$/.test(name)) {\n            throw new Error('Expected symbol to be A-Z and between one and seven characters');\n        }\n        const a = [precision & 0xff];\n        a.push(...this.textEncoder.encode(name));\n        while (a.length < 8) {\n            a.push(0);\n        }\n        this.pushArray(a.slice(0, 8));\n    }\n\n    /** Get a `symbol` */\n    public getSymbol(): { name: string, precision: number } {\n        const precision = this.get();\n        const a = this.getUint8Array(7);\n        let len;\n        for (len = 0; len < a.length; ++len) {\n            if (!a[len]) {\n                break;\n            }\n        }\n        const name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n        return { name, precision };\n    }\n\n    /** Append an asset */\n    public pushAsset(s: string): void {\n        if (typeof s !== 'string') {\n            throw new Error('Expected string containing asset');\n        }\n        s = s.trim();\n        let pos = 0;\n        let amount = '';\n        let precision = 0;\n        if (s[pos] === '-') {\n            amount += '-';\n            ++pos;\n        }\n        let foundDigit = false;\n        while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n            foundDigit = true;\n            amount += s[pos];\n            ++pos;\n        }\n        if (!foundDigit) {\n            throw new Error('Asset must begin with a number');\n        }\n        if (s[pos] === '.') {\n            ++pos;\n            while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n                amount += s[pos];\n                ++precision;\n                ++pos;\n            }\n        }\n        const name = s.substr(pos).trim();\n        this.pushArray(numeric.signedDecimalToBinary(8, amount));\n        this.pushSymbol({ name, precision });\n    }\n\n    /** Get an asset */\n    public getAsset(): string {\n        const amount = this.getUint8Array(8);\n        const { name, precision } = this.getSymbol();\n        let s = numeric.signedBinaryToDecimal(amount, precision + 1);\n        if (precision) {\n            s = s.substr(0, s.length - precision) + '.' + s.substr(s.length - precision);\n        }\n        return s + ' ' + name;\n    }\n\n    /** Append a public key */\n    public pushPublicKey(s: string): void {\n        const key = numeric.stringToPublicKey(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    }\n\n    /** Get a public key */\n    public getPublicKey(): string {\n        const type = this.get();\n        let data: Uint8Array;\n        if (type === numeric.KeyType.wa) {\n            const begin = this.readPos;\n            this.skip(34);\n            this.skip(this.getVaruint32());\n            data = new Uint8Array(this.array.buffer, this.array.byteOffset + begin, this.readPos - begin);\n        } else {\n            data = this.getUint8Array(numeric.publicKeyDataSize);\n        }\n        return numeric.publicKeyToString({ type, data });\n    }\n\n    /** Append a private key */\n    public pushPrivateKey(s: string): void {\n        const key = numeric.stringToPrivateKey(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    }\n\n    /** Get a private key */\n    public getPrivateKey(): string {\n        const type = this.get();\n        const data = this.getUint8Array(numeric.privateKeyDataSize);\n        return numeric.privateKeyToString({ type, data });\n    }\n\n    /** Append a signature */\n    public pushSignature(s: string): void {\n        const key = numeric.stringToSignature(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    }\n\n    /** Get a signature */\n    public getSignature(): string {\n        const type = this.get();\n        let data: Uint8Array;\n        if (type === numeric.KeyType.wa) {\n            const begin = this.readPos;\n            this.skip(65);\n            this.skip(this.getVaruint32());\n            this.skip(this.getVaruint32());\n            data = new Uint8Array(this.array.buffer, this.array.byteOffset + begin, this.readPos - begin);\n        } else {\n            data = this.getUint8Array(numeric.signatureDataSize);\n        }\n        return numeric.signatureToString({ type, data });\n    }\n} // SerialBuffer\n\n/** Is this a supported ABI version? */\nexport const supportedAbiVersion = (version: string): boolean => {\n    return version.startsWith('eosio::abi/1.');\n};\n\nconst checkDateParse = (date: string): number => {\n    const result = Date.parse(date);\n    if (Number.isNaN(result)) {\n        throw new Error('Invalid time format');\n    }\n    return result;\n};\n\n/** Convert date in ISO format to `time_point` (miliseconds since epoch) */\nexport const dateToTimePoint = (date: string): number => {\n    return Math.round(checkDateParse(date + 'Z') * 1000);\n};\n\n/** Convert `time_point` (miliseconds since epoch) to date in ISO format */\nexport const timePointToDate = (us: number): string => {\n    const s = (new Date(us / 1000)).toISOString();\n    return s.substr(0, s.length - 1);\n};\n\n/** Convert date in ISO format to `time_point_sec` (seconds since epoch) */\nexport const dateToTimePointSec = (date: string): number => {\n    return Math.round(checkDateParse(date + 'Z') / 1000);\n};\n\n/** Convert `time_point_sec` (seconds since epoch) to to date in ISO format */\nexport const timePointSecToDate = (sec: number): string => {\n    const s = (new Date(sec * 1000)).toISOString();\n    return s.substr(0, s.length - 1);\n};\n\n/** Convert date in ISO format to `block_timestamp_type` (half-seconds since a different epoch) */\nexport const dateToBlockTimestamp = (date: string): number => {\n    return Math.round((checkDateParse(date + 'Z') - 946684800000) / 500);\n};\n\n/** Convert `block_timestamp_type` (half-seconds since a different epoch) to to date in ISO format */\nexport const blockTimestampToDate = (slot: number): string => {\n    const s = (new Date(slot * 500 + 946684800000)).toISOString();\n    return s.substr(0, s.length - 1);\n};\n\n/** Convert `string` to `Symbol`. format: `precision,NAME`. */\nexport const stringToSymbol = (s: string): { name: string, precision: number } => {\n    if (typeof s !== 'string') {\n        throw new Error('Expected string containing symbol');\n    }\n    const m = s.match(/^([0-9]+),([A-Z]+)$/);\n    if (!m) {\n        throw new Error('Invalid symbol');\n    }\n    return { name: m[2], precision: +m[1] };\n};\n\n/** Convert `Symbol` to `string`. format: `precision,NAME`. */\nexport const symbolToString = ({ name, precision }: { name: string, precision: number }): string => {\n    return precision + ',' + name;\n};\n\n/** Convert binary data to hex */\nexport const arrayToHex = (data: Uint8Array): string => {\n    let result = '';\n    for (const x of data) {\n        result += ('00' + x.toString(16)).slice(-2);\n    }\n    return result.toUpperCase();\n};\n\n/** Convert hex to binary data */\nexport const hexToUint8Array = (hex: string): Uint8Array => {\n    if (typeof hex !== 'string') {\n        throw new Error('Expected string containing hex digits');\n    }\n    if (hex.length % 2) {\n        throw new Error('Odd number of hex digits');\n    }\n    const l = hex.length / 2;\n    const result = new Uint8Array(l);\n    for (let i = 0; i < l; ++i) {\n        const x = parseInt(hex.substr(i * 2, 2), 16);\n        if (Number.isNaN(x)) {\n            throw new Error('Expected hex string');\n        }\n        result[i] = x;\n    }\n    return result;\n};\n\nfunction serializeUnknown(this: Type, _: SerialBuffer, __: any): SerialBuffer {\n    throw new Error('Don\\'t know how to serialize ' + this.name);\n}\n\nfunction deserializeUnknown(this: Type, _: SerialBuffer): SerialBuffer {\n    throw new Error('Don\\'t know how to deserialize ' + this.name);\n}\n\nfunction serializeStruct(\n    this: Type, buffer: SerialBuffer, data: any, state = new SerializerState(), allowExtensions = true\n): void {\n    if (typeof data !== 'object') {\n        throw new Error('expected object containing data: ' + JSON.stringify(data));\n    }\n    if (this.base) {\n        this.base.serialize(buffer, data, state, allowExtensions);\n    }\n    for (const field of this.fields) {\n        if (field.name in data) {\n            if (state.skippedBinaryExtension) {\n                throw new Error('unexpected ' + this.name + '.' + field.name);\n            }\n            field.type!.serialize(\n                buffer, data[field.name], state, allowExtensions && field === this.fields[this.fields.length - 1]);\n        } else {\n            if (allowExtensions && field.type!.extensionOf) {\n                state.skippedBinaryExtension = true;\n            } else {\n                throw new Error('missing ' + this.name + '.' + field.name + ' (type=' + field.type!.name + ')');\n            }\n        }\n    }\n}\n\nfunction deserializeStruct(this: Type, buffer: SerialBuffer, state = new SerializerState(), allowExtensions = true): any {\n    let result;\n    if (this.base) {\n        result = this.base.deserialize(buffer, state, allowExtensions);\n    } else {\n        result = {};\n    }\n    for (const field of this.fields) {\n        if (allowExtensions && field.type!.extensionOf && !buffer.haveReadData()) {\n            state.skippedBinaryExtension = true;\n        } else {\n            result[field.name] = field.type!.deserialize(buffer, state, allowExtensions);\n        }\n    }\n    return result;\n}\n\nfunction serializeVariant(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n): void {\n    if (!Array.isArray(data) || data.length !== 2 || typeof data[0] !== 'string') {\n        throw new Error('expected variant: [\"type\", value]');\n    }\n    const i = this.fields.findIndex((field: Field) => field.name === data[0]);\n    if (i < 0) {\n        throw new Error(`type \"${data[0]}\" is not valid for variant`);\n    }\n    buffer.pushVaruint32(i);\n    this.fields[i].type!.serialize(buffer, data[1], state, allowExtensions);\n}\n\nfunction deserializeVariant(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean): any[] {\n    const i = buffer.getVaruint32();\n    if (i >= this.fields.length) {\n        throw new Error(`type index ${i} is not valid for variant`);\n    }\n    const field = this.fields[i];\n    return [field.name, field.type!.deserialize(buffer, state, allowExtensions)];\n}\n\nfunction serializeArray(\n    this: Type, buffer: SerialBuffer, data: any[], state?: SerializerState, _?: boolean\n): void {\n    buffer.pushVaruint32(data.length);\n    for (const item of data) {\n        this.arrayOf!.serialize(buffer, item, state, false);\n    }\n}\n\nfunction deserializeArray(this: Type, buffer: SerialBuffer, state?: SerializerState, _?: boolean): any[] {\n    const len = buffer.getVaruint32();\n    const result = [];\n    for (let i = 0; i < len; ++i) {\n        result.push(this.arrayOf!.deserialize(buffer, state, false));\n    }\n    return result;\n}\n\nfunction serializeOptional(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n): void {\n    if (data === null || data === undefined) {\n        buffer.push(0);\n    } else {\n        buffer.push(1);\n        this.optionalOf!.serialize(buffer, data, state, allowExtensions);\n    }\n}\n\nfunction deserializeOptional(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean): any {\n    if (buffer.get()) {\n        return this.optionalOf!.deserialize(buffer, state, allowExtensions);\n    } else {\n        return null;\n    }\n}\n\nfunction serializeExtension(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n): void {\n    this.extensionOf!.serialize(buffer, data, state, allowExtensions);\n}\n\nfunction deserializeExtension(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean): any {\n    return this.extensionOf!.deserialize(buffer, state, allowExtensions);\n}\n\nfunction serializeObject(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n    ): void {\n    const entries = Object.entries(data);\n    buffer.pushVaruint32(entries.length);\n    for (const [key, value] of entries) {\n        const keyType = this.fields[0].type;\n        const dataType = this.fields[1].type;\n        keyType!.serialize(buffer, key, state, allowExtensions);\n        dataType!.serialize(buffer, value, state, allowExtensions);\n    }\n}\n\nfunction deserializeObject(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean): any {\n    const len = buffer.getVaruint32();\n    const result = {} as any;\n    for (let i = 0; i < len; ++i) {\n        const keyType = this.fields[0].type;\n        const dataType = this.fields[1].type;\n        const key = keyType!.deserialize(buffer, state, allowExtensions);\n        (result as any)[key] = dataType!.deserialize(buffer, state, allowExtensions);\n    }\n    return result;\n}\n\nfunction serializePair(\n    this: Type, buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean\n): void {\n    buffer.pushVaruint32(data.length);\n    data.forEach((item: [number, string]) => {\n        this.fields[0].type!.serialize(buffer, item[0], state, allowExtensions);\n        this.fields[1].type!.serialize(buffer, item[1], state, allowExtensions);\n    });\n}\n\nfunction deserializePair(this: Type, buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean): any {\n    const result = [] as any;\n    const len = buffer.getVaruint32();\n    for (let i = 0; i < len; ++i) {\n        result.push(this.fields[0].type!.deserialize(buffer, state, allowExtensions));\n        result.push(this.fields[1].type!.deserialize(buffer, state, allowExtensions));\n    }\n    return result;\n}\n\ninterface CreateTypeArgs {\n    name?: string;\n    aliasOfName?: string;\n    arrayOf?: Type;\n    optionalOf?: Type;\n    extensionOf?: Type;\n    baseName?: string;\n    base?: Type;\n    fields?: Field[];\n    serialize?: (buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean) => void;\n    deserialize?: (buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) => any;\n}\n\nconst createType = (attrs: CreateTypeArgs): Type => {\n    return {\n        name: '<missing name>',\n        aliasOfName: '',\n        arrayOf: undefined,\n        optionalOf: undefined,\n        extensionOf: undefined,\n        baseName: '',\n        base: undefined,\n        fields: [],\n        serialize: serializeUnknown,\n        deserialize: deserializeUnknown,\n        ...attrs,\n    };\n};\n\nconst checkRange = (orig: number, converted: number) => {\n    if (Number.isNaN(+orig) || Number.isNaN(+converted) || (typeof orig !== 'number' && typeof orig !== 'string')) {\n        throw new Error('Expected number');\n    }\n    if (+orig !== +converted) {\n        throw new Error('Number is out of range');\n    }\n    return +orig;\n};\n\n/** Create the set of types built-in to the abi format */\nexport const createInitialTypes = (): Map<string, Type> => {\n    const result: Map<string, Type> = new Map(Object.entries({\n        bool: createType({\n            name: 'bool',\n            serialize: (buffer: SerialBuffer, data: boolean) => {\n                if ( !(typeof data === 'boolean' || typeof data === 'number' && ( data === 1 || data === 0))) {\n                    throw new Error('Expected boolean or number equal to 1 or 0');\n                }\n                buffer.push(data ? 1 : 0);\n            },\n            deserialize: (buffer: SerialBuffer) => { return !!buffer.get(); },\n        }),\n        uint8: createType({\n            name: 'uint8',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.push(checkRange(data, data & 0xff)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.get(); },\n        }),\n        int8: createType({\n            name: 'int8',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.push(checkRange(data, data << 24 >> 24)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.get() << 24 >> 24; },\n        }),\n        uint16: createType({\n            name: 'uint16',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint16(checkRange(data, data & 0xffff)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint16(); },\n        }),\n        int16: createType({\n            name: 'int16',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint16(checkRange(data, data << 16 >> 16)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint16() << 16 >> 16; },\n        }),\n        uint32: createType({\n            name: 'uint32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint32(checkRange(data, data >>> 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint32(); },\n        }),\n        uint64: createType({\n            name: 'uint64',\n            serialize: (buffer: SerialBuffer, data: string | number) => {\n                buffer.pushArray(numeric.decimalToBinary(8, '' + data));\n            },\n            deserialize: (buffer: SerialBuffer) => { return numeric.binaryToDecimal(buffer.getUint8Array(8)); },\n        }),\n        int64: createType({\n            name: 'int64',\n            serialize: (buffer: SerialBuffer, data: string | number) => {\n                buffer.pushArray(numeric.signedDecimalToBinary(8, '' + data));\n            },\n            deserialize: (buffer: SerialBuffer) => { return numeric.signedBinaryToDecimal(buffer.getUint8Array(8)); },\n        }),\n        int32: createType({\n            name: 'int32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushUint32(checkRange(data, data | 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getUint32() | 0; },\n        }),\n        varuint32: createType({\n            name: 'varuint32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushVaruint32(checkRange(data, data >>> 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getVaruint32(); },\n        }),\n        varint32: createType({\n            name: 'varint32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushVarint32(checkRange(data, data | 0)); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getVarint32(); },\n        }),\n        uint128: createType({\n            name: 'uint128',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushArray(numeric.decimalToBinary(16, '' + data)); },\n            deserialize: (buffer: SerialBuffer) => { return numeric.binaryToDecimal(buffer.getUint8Array(16)); },\n        }),\n        int128: createType({\n            name: 'int128',\n            serialize: (buffer: SerialBuffer, data: string) => {\n                buffer.pushArray(numeric.signedDecimalToBinary(16, '' + data));\n            },\n            deserialize: (buffer: SerialBuffer) => { return numeric.signedBinaryToDecimal(buffer.getUint8Array(16)); },\n        }),\n        float32: createType({\n            name: 'float32',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushFloat32(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getFloat32(); },\n        }),\n        float64: createType({\n            name: 'float64',\n            serialize: (buffer: SerialBuffer, data: number) => { buffer.pushFloat64(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getFloat64(); },\n        }),\n        float128: createType({\n            name: 'float128',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 16); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(16)); },\n        }),\n\n        bytes: createType({\n            name: 'bytes',\n            serialize: (buffer: SerialBuffer, data: string | Uint8Array | number[]) => {\n                if (data instanceof Uint8Array || Array.isArray(data)) {\n                    buffer.pushBytes(data);\n                } else {\n                    buffer.pushBytes(hexToUint8Array(data));\n                }\n            },\n            deserialize: (buffer: SerialBuffer, state?: SerializerState) => {\n                if (state && state.options.bytesAsUint8Array) {\n                    return buffer.getBytes();\n                } else {\n                    return arrayToHex(buffer.getBytes());\n                }\n            },\n        }),\n        string: createType({\n            name: 'string',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushString(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getString(); },\n        }),\n        name: createType({\n            name: 'name',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushName(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getName(); },\n        }),\n        time_point: createType({\n            name: 'time_point',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushNumberAsUint64(dateToTimePoint(data)); },\n            deserialize: (buffer: SerialBuffer) => { return timePointToDate(buffer.getUint64AsNumber()); },\n        }),\n        time_point_sec: createType({\n            name: 'time_point_sec',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint32(dateToTimePointSec(data)); },\n            deserialize: (buffer: SerialBuffer) => { return timePointSecToDate(buffer.getUint32()); },\n        }),\n        block_timestamp_type: createType({\n            name: 'block_timestamp_type',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint32(dateToBlockTimestamp(data)); },\n            deserialize: (buffer: SerialBuffer) => { return blockTimestampToDate(buffer.getUint32()); },\n        }),\n        symbol_code: createType({\n            name: 'symbol_code',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushSymbolCode(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getSymbolCode(); },\n        }),\n        symbol: createType({\n            name: 'symbol',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushSymbol(stringToSymbol(data)); },\n            deserialize: (buffer: SerialBuffer) => { return symbolToString(buffer.getSymbol()); },\n        }),\n        asset: createType({\n            name: 'asset',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushAsset(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getAsset(); },\n        }),\n        checksum160: createType({\n            name: 'checksum160',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 20); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(20)); },\n        }),\n        checksum256: createType({\n            name: 'checksum256',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 32); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(32)); },\n        }),\n        checksum512: createType({\n            name: 'checksum512',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 64); },\n            deserialize: (buffer: SerialBuffer) => { return arrayToHex(buffer.getUint8Array(64)); },\n        }),\n        public_key: createType({\n            name: 'public_key',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushPublicKey(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getPublicKey(); },\n        }),\n        private_key: createType({\n            name: 'private_key',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushPrivateKey(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getPrivateKey(); },\n        }),\n        signature: createType({\n            name: 'signature',\n            serialize: (buffer: SerialBuffer, data: string) => { buffer.pushSignature(data); },\n            deserialize: (buffer: SerialBuffer) => { return buffer.getSignature(); },\n        }),\n    }));\n\n    result.set('extended_asset', createType({\n        name: 'extended_asset',\n        baseName: '',\n        fields: [\n            { name: 'quantity', typeName: 'asset', type: result.get('asset') },\n            { name: 'contract', typeName: 'name', type: result.get('name') },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n\n    return result;\n}; // createInitialTypes()\n\nexport const createAbiTypes = (): Map<string, Type> => {\n    const initialTypes = createInitialTypes();\n    initialTypes.set('extensions_entry', createType({\n        name: 'extensions_entry',\n        baseName: '',\n        fields: [\n            { name: 'tag', typeName: 'uint16', type: undefined },\n            { name: 'value', typeName: 'bytes', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('type_def', createType({\n        name: 'type_def',\n        baseName: '',\n        fields: [\n            { name: 'new_type_name', typeName: 'string', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('field_def', createType({\n        name: 'field_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'string', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('struct_def', createType({\n        name: 'struct_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'string', type: undefined },\n            { name: 'base', typeName: 'string', type: undefined },\n            { name: 'fields', typeName: 'field_def[]', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('action_def', createType({\n        name: 'action_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined },\n            { name: 'ricardian_contract', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('table_def', createType({\n        name: 'table_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'index_type', typeName: 'string', type: undefined },\n            { name: 'key_names', typeName: 'string[]', type: undefined },\n            { name: 'key_types', typeName: 'string[]', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('clause_pair', createType({\n        name: 'clause_pair',\n        baseName: '',\n        fields: [\n            { name: 'id', typeName: 'string', type: undefined },\n            { name: 'body', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('error_message', createType({\n        name: 'error_message',\n        baseName: '',\n        fields: [\n            { name: 'error_code', typeName: 'uint64', type: undefined },\n            { name: 'error_msg', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('variant_def', createType({\n        name: 'variant_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'string', type: undefined },\n            { name: 'types', typeName: 'string[]', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('action_result', createType({\n        name: 'action_result',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'result_type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('primary_key_index_def', createType({\n        name: 'primary_key_index_def',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'type', typeName: 'string', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('secondary_index_def', createType({\n        name: 'secondary_index_def',\n        baseName: '',\n        fields: [\n            { name: 'type', typeName: 'string', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('secondary_indices', createType({\n        name: 'secondary_indices',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'secondary_index_def', typeName: 'secondary_index_def', type: undefined }\n        ],\n        serialize: serializeObject,\n        deserialize: deserializeObject,\n    }));\n    initialTypes.set('kv_table_entry_def', createType({\n        name: 'kv_table_entry_def',\n        baseName: '',\n        fields: [\n            { name: 'type', typeName: 'string', type: undefined },\n            { name: 'primary_index', typeName: 'primary_key_index_def', type: undefined },\n            { name: 'secondary_indices', typeName: 'secondary_indices', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('kv_table', createType({\n        name: 'kv_table',\n        baseName: '',\n        fields: [\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'kv_table_entry_def', typeName: 'kv_table_entry_def', type: undefined }\n        ],\n        serialize: serializeObject,\n        deserialize: deserializeObject\n    }));\n    initialTypes.set('abi_def', createType({\n        name: 'abi_def',\n        baseName: '',\n        fields: [\n            { name: 'version', typeName: 'string', type: undefined },\n            { name: 'types', typeName: 'type_def[]', type: undefined },\n            { name: 'structs', typeName: 'struct_def[]', type: undefined },\n            { name: 'actions', typeName: 'action_def[]', type: undefined },\n            { name: 'tables', typeName: 'table_def[]', type: undefined },\n            { name: 'ricardian_clauses', typeName: 'clause_pair[]', type: undefined },\n            { name: 'error_messages', typeName: 'error_message[]', type: undefined },\n            { name: 'abi_extensions', typeName: 'extensions_entry[]', type: undefined },\n            { name: 'variants', typeName: 'variant_def[]$', type: undefined },\n            { name: 'action_results', typeName: 'action_result[]$', type: undefined },\n            { name: 'kv_tables', typeName: 'kv_table$', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    return initialTypes;\n};\n\n\nexport const createTransactionExtensionTypes = (): Map<string, Type> => {\n    const initialTypes = createInitialTypes();\n    initialTypes.set('resource_payer', createType({\n        name: 'resource_payer',\n        baseName: '',\n        fields: [\n            { name: 'payer', typeName: 'name', type: undefined },\n            { name: 'max_net_bytes', typeName: 'uint64', type: undefined },\n            { name: 'max_cpu_us', typeName: 'uint64', type: undefined },\n            { name: 'max_memory_bytes', typeName: 'uint64', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    return initialTypes;\n};\n\nexport const createTransactionTypes = (): Map<string, Type> => {\n    const initialTypes = createInitialTypes();\n    initialTypes.set('permission_level', createType({\n        name: 'permission_level',\n        baseName: '',\n        fields: [\n            { name: 'actor', typeName: 'name', type: undefined },\n            { name: 'permission', typeName: 'name', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('action', createType({\n        name: 'action',\n        baseName: '',\n        fields: [\n            { name: 'account', typeName: 'name', type: undefined },\n            { name: 'name', typeName: 'name', type: undefined },\n            { name: 'authorization', typeName: 'permission_level[]', type: undefined },\n            { name: 'data', typeName: 'bytes', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('extension', createType({\n        name: 'extension',\n        baseName: '',\n        fields: [\n            { name: 'type', typeName: 'uint16', type: undefined },\n            { name: 'data', typeName: 'bytes', type: undefined },\n        ],\n        serialize: serializePair,\n        deserialize: deserializePair,\n    }));\n    initialTypes.set('transaction_header', createType({\n        name: 'transaction_header',\n        baseName: '',\n        fields: [\n            { name: 'expiration', typeName: 'time_point_sec', type: undefined },\n            { name: 'ref_block_num', typeName: 'uint16', type: undefined },\n            { name: 'ref_block_prefix', typeName: 'uint32', type: undefined },\n            { name: 'max_net_usage_words', typeName: 'varuint32', type: undefined },\n            { name: 'max_cpu_usage_ms', typeName: 'uint8', type: undefined },\n            { name: 'delay_sec', typeName: 'varuint32', type: undefined },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    initialTypes.set('transaction', createType({\n        name: 'transaction',\n        baseName: 'transaction_header',\n        fields: [\n            { name: 'context_free_actions', typeName: 'action[]', type: undefined },\n            { name: 'actions', typeName: 'action[]', type: undefined },\n            { name: 'transaction_extensions', typeName: 'extension', type: undefined }\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    return initialTypes;\n};\n\n/** Get type from `types` */\nexport const getType = (types: Map<string, Type>, name: string): Type => {\n    const type = types.get(name);\n    if (type && type.aliasOfName) {\n        return getType(types, type.aliasOfName);\n    }\n    if (type) {\n        return type;\n    }\n    if (name.endsWith('[]')) {\n        return createType({\n            name,\n            arrayOf: getType(types, name.substr(0, name.length - 2)),\n            serialize: serializeArray,\n            deserialize: deserializeArray,\n        });\n    }\n    if (name.endsWith('?')) {\n        return createType({\n            name,\n            optionalOf: getType(types, name.substr(0, name.length - 1)),\n            serialize: serializeOptional,\n            deserialize: deserializeOptional,\n        });\n    }\n    if (name.endsWith('$')) {\n        return createType({\n            name,\n            extensionOf: getType(types, name.substr(0, name.length - 1)),\n            serialize: serializeExtension,\n            deserialize: deserializeExtension,\n        });\n    }\n    throw new Error('Unknown type: ' + name);\n};\n\n/**\n * Get types from abi\n *\n * @param initialTypes Set of types to build on.\n * In most cases, it's best to fill this from a fresh call to `getTypesFromAbi()`.\n */\n export const getTypesFromAbi = (initialTypes: Map<string, Type>, abi?: Abi): Map<string, Type> => {\n    const types = new Map(initialTypes);\n    if (abi && abi.types) {\n        for (const { new_type_name, type } of abi.types) {\n            types.set(new_type_name,\n                createType({ name: new_type_name, aliasOfName: type }));\n        }\n    }\n    if (abi && abi.structs) {\n        for (const { name, base, fields } of abi.structs) {\n            types.set(name, createType({\n                name,\n                baseName: base,\n                fields: fields.map(({ name: n, type }) => ({ name: n, typeName: type, type: undefined })),\n                serialize: serializeStruct,\n                deserialize: deserializeStruct,\n            }));\n        }\n    }\n    if (abi && abi.variants) {\n        for (const { name, types: t } of abi.variants) {\n            types.set(name, createType({\n                name,\n                fields: t.map((s) => ({ name: s, typeName: s, type: undefined })),\n                serialize: serializeVariant,\n                deserialize: deserializeVariant,\n            }));\n        }\n    }\n    for (const [/*name*/ _, type] of types) {\n        if (type.baseName) {\n            type.base = getType(types, type.baseName);\n        }\n        for (const field of type.fields) {\n            field.type = getType(types, field.typeName);\n        }\n    }\n    return types;\n}; // getTypesFromAbi\n\nconst reverseHex = (h: string): string => {\n    return h.substr(6, 2) + h.substr(4, 2) + h.substr(2, 2) + h.substr(0, 2);\n};\n\n/** TAPoS: Return transaction fields which reference `refBlock` and expire `expireSeconds` after `timestamp` */\nexport const transactionHeader = (refBlock: BlockTaposInfo, expireSeconds: number): TransactionHeader => {\n    const timestamp = refBlock.header ? refBlock.header.timestamp : refBlock.timestamp;\n    const prefix = parseInt(reverseHex(refBlock.id.substr(16, 8)), 16);\n\n    return {\n        expiration: timePointSecToDate(dateToTimePointSec(timestamp as string) + expireSeconds),\n        ref_block_num: refBlock.block_num & 0xffff,\n        ref_block_prefix: prefix,\n    };\n};\n\n/** Convert action data to serialized form (hex) */\nexport const serializeActionData = (\n    contract: Contract, account: string, name: string, data: any\n): string => {\n    const action = contract.actions.get(name);\n    if (!action) {\n        throw new Error(`Unknown action ${name} in contract ${account}`);\n    }\n    const buffer = new SerialBuffer();\n    action.serialize(buffer, data);\n    return arrayToHex(buffer.asUint8Array());\n};\n\n/** Return action in serialized form */\nexport const serializeAction = (\n    contract: Contract, account: string, name: string, authorization: Authorization[],\n    data: any\n): SerializedAction => {\n    return {\n        account,\n        name,\n        authorization,\n        data: serializeActionData(contract, account, name, data),\n    };\n};\n\n/** Deserialize action data. If `data` is a `string`, then it's assumed to be in hex. */\nexport const deserializeActionData = (\n    contract: Contract, account: string, name: string, data: string | Uint8Array | number[],\n): any => {\n    const action = contract.actions.get(name);\n    if (typeof data === 'string') {\n        data = hexToUint8Array(data);\n    }\n    if (!action) {\n        throw new Error(`Unknown action ${name} in contract ${account}`);\n    }\n    const buffer = new SerialBuffer();\n    buffer.pushArray(data);\n    return action.deserialize(buffer);\n};\n\n/** Deserialize action. If `data` is a `string`, then it's assumed to be in hex. */\nexport const deserializeAction = (\n    contract: Contract, account: string, name: string, authorization: Authorization[],\n    data: string | Uint8Array | number[]\n): Action => {\n    return {\n        account,\n        name,\n        authorization,\n        data: deserializeActionData(contract, account, name, data),\n    };\n};\n\nexport const serializeAnyvar = (buffer: SerialBuffer, anyvar: Anyvar): void => {\n    let def: AnyvarDef;\n    let value: any;\n    if (anyvar === null) {\n        [def, value] = [anyvarDefs.null_t, anyvar] as any;\n    } else if (typeof anyvar === 'string') {\n        [def, value] = [anyvarDefs.string, anyvar] as any;\n    } else if (typeof anyvar === 'number') {\n        [def, value] = [anyvarDefs.int32, anyvar] as any;\n    } else if (anyvar instanceof Uint8Array) {\n        [def, value] = [anyvarDefs.bytes, anyvar] as any;\n    } else if (Array.isArray(anyvar)) {\n        [def, value] = [anyvarDefs.any_array, anyvar] as any;\n    } else if (Object.keys(anyvar).length === 2 && anyvar.hasOwnProperty('type') && anyvar.hasOwnProperty('value')) {\n        [def, value] = [(anyvarDefs as any)[(anyvar as any).type] as AnyvarDef, (anyvar as any).value];\n    } else {\n        [def, value] = [anyvarDefs.any_object, anyvar] as any;\n    }\n    buffer.pushVaruint32(def.index);\n    def.type.serialize(buffer, value);\n};\n\nexport const deserializeAnyvar = (buffer: SerialBuffer, state?: SerializerState): any => {\n    const defIndex = buffer.getVaruint32();\n    if (defIndex >= anyvarDefsByIndex.length) {\n        throw new Error('Tried to deserialize unknown anyvar type');\n    }\n    const def = anyvarDefsByIndex[defIndex];\n    const value = def.type!.deserialize(buffer, state);\n    if (state && (state.options as any).useShortForm || def.useShortForm) {\n        return value;\n    } else {\n        return { type: def.type!.name, value };\n    }\n};\n\nexport const deserializeAnyvarShort = (buffer: SerialBuffer): any => {\n    return deserializeAnyvar(buffer, new SerializerState({ useShortForm: true } as any));\n};\n\nexport const serializeAnyObject = (buffer: SerialBuffer, obj: any): void => {\n    const entries = Object.entries(obj);\n    buffer.pushVaruint32(entries.length);\n    for (const [key, value] of entries) {\n        buffer.pushString(key);\n        serializeAnyvar(buffer, value as Anyvar);\n    }\n};\n\nexport const deserializeAnyObject = (buffer: SerialBuffer, state?: SerializerState): any => {\n    const len = buffer.getVaruint32();\n    const result = {};\n    for (let i = 0; i < len; ++i) {\n        let key = buffer.getString();\n        if (key in result) {\n            let j = 1;\n            while (key + '_' + j in result) {\n                ++j;\n            }\n            key = key + '_' + j;\n        }\n        (result as any)[key] = deserializeAnyvar(buffer, state);\n    }\n    return result;\n};\n\nexport const serializeAnyArray = (buffer: SerialBuffer, arr: Anyvar[]): void => {\n    buffer.pushVaruint32(arr.length);\n    for (const x of arr) {\n        serializeAnyvar(buffer, x);\n    }\n};\n\nexport const deserializeAnyArray = (buffer: SerialBuffer, state?: SerializerState): any[] => {\n    const len = buffer.getVaruint32();\n    const result = [];\n    for (let i = 0; i < len; ++i) {\n        result.push(deserializeAnyvar(buffer, state));\n    }\n    return result;\n};\n\nconst addAdditionalTypes = (): Map<string, Type> => {\n    const initialTypes = createInitialTypes();\n    initialTypes.set('null_t', createType({\n        name: 'null_t',\n        serialize: (_: SerialBuffer, __: Anyvar) => {},\n        deserialize: (_: SerialBuffer, __?: SerializerState) => {}\n    }));\n    initialTypes.set('any_object', createType({\n        name: 'any_object',\n        serialize: serializeAnyObject,\n        deserialize: deserializeAnyObject\n    }));\n    initialTypes.set('any_array', createType({\n        name: 'any_array',\n        serialize: serializeAnyArray,\n        deserialize: deserializeAnyArray\n    }));\n    return initialTypes;\n};\n\nconst additionalTypes = addAdditionalTypes();\n\nconst anyvarDefs = {\n    null_t: { index: 0, useShortForm: true, type: additionalTypes.get('null_t') },\n    int64: { index: 1, useShortForm: false, type: additionalTypes.get('int64') },\n    uint64: { index: 2, useShortForm: false, type: additionalTypes.get('uint64') },\n    int32: { index: 3, useShortForm: true, type: additionalTypes.get('int32') },\n    uint32: { index: 4, useShortForm: false, type: additionalTypes.get('uint32') },\n    int16: { index: 5, useShortForm: false, type: additionalTypes.get('int16') },\n    uint16: { index: 6, useShortForm: false, type: additionalTypes.get('uint16') },\n    int8: { index: 7, useShortForm: false, type: additionalTypes.get('int8') },\n    uint8: { index: 8, useShortForm: false, type: additionalTypes.get('uint8') },\n    time_point: { index: 9, useShortForm: false, type: additionalTypes.get('time_point') },\n    checksum256: { index: 10, useShortForm: false, type: additionalTypes.get('checksum256') },\n    float64: { index: 11, useShortForm: false, type: additionalTypes.get('float64') },\n    string: { index: 12, useShortForm: true, type: additionalTypes.get('string') },\n    any_object: { index: 13, useShortForm: true, type: additionalTypes.get('any_object') },\n    any_array: { index: 14, useShortForm: true, type: additionalTypes.get('any_array') },\n    bytes: { index: 15, useShortForm: false, type: additionalTypes.get('bytes') },\n    symbol: { index: 16, useShortForm: false, type: additionalTypes.get('symbol') },\n    symbol_code: { index: 17, useShortForm: false, type: additionalTypes.get('symbol_code') },\n    asset: { index: 18, useShortForm: false, type: additionalTypes.get('asset') },\n};\n\nconst anyvarDefsByIndex = [\n    anyvarDefs.null_t,\n    anyvarDefs.int64,\n    anyvarDefs.uint64,\n    anyvarDefs.int32,\n    anyvarDefs.uint32,\n    anyvarDefs.int16,\n    anyvarDefs.uint16,\n    anyvarDefs.int8,\n    anyvarDefs.uint8,\n    anyvarDefs.time_point,\n    anyvarDefs.checksum256,\n    anyvarDefs.float64,\n    anyvarDefs.string,\n    anyvarDefs.any_object,\n    anyvarDefs.any_array,\n    anyvarDefs.bytes,\n    anyvarDefs.symbol,\n    anyvarDefs.symbol_code,\n    anyvarDefs.asset,\n];\n\nexport const serializeQuery = (buffer: SerialBuffer, query: Query): void => {\n    let method: string;\n    let arg: Anyvar;\n    let filter: Query[];\n    if (typeof query === 'string') {\n        method = query;\n    } else if (Array.isArray(query) && query.length === 2) {\n        [method, filter] = query;\n    } else if (Array.isArray(query) && query.length === 3) {\n        [method, arg, filter] = query;\n    } else {\n        [method, arg, filter] = [query.method, query.arg, query.filter] as any;\n    }\n    buffer.pushString(method);\n\n    // @ts-ignore\n    if (arg === undefined) {\n        buffer.push(0);\n    } else {\n        buffer.push(1);\n        serializeAnyvar(buffer, arg);\n    }\n\n    // @ts-ignore\n    if (filter === undefined) {\n        buffer.push(0);\n    } else {\n        buffer.pushVaruint32(filter.length);\n        for (const q of filter) {\n            serializeQuery(buffer, q);\n        }\n    }\n};\n\nexport function b64tob64u(a: string) {\n    a = a.replace(/\\=/g, '');\n    a = a.replace(/\\+/g, '-');\n    a = a.replace(/\\//g, '_');\n    return a;\n}\n","import {ec as EC} from 'elliptic';\nimport * as hash from 'hash.js';\nimport {KeyType} from '../api/numeric';\n\n/** Construct the elliptic curve object based on key type */\nexport const constructElliptic = (type: KeyType): EC => {\n    if (type === KeyType.k1) {\n        return new EC('secp256k1');\n    }\n    return new EC('p256');\n};\n\nexport const sha256 = (data: string|Buffer): string => {\n    return hash.sha256().update(data).digest('hex');\n};\n","import { ec as EC } from 'elliptic';\nimport {\n    Key,\n    KeyType,\n    publicKeyToLegacyString,\n    publicKeyToString,\n    stringToPublicKey,\n} from '../api/numeric';\nimport { constructElliptic } from './conversions';\n\n/** Represents/stores a public key and provides easy conversion for use with `elliptic` lib */\nexport class PublicKey {\n    constructor(public key: Key, private ec: EC) {}\n\n    /** Instantiate public key from an EOSIO-format public key */\n    public static fromString(publicKeyStr: string, ec?: EC): PublicKey {\n        const key = stringToPublicKey(publicKeyStr);\n        if (!ec) {\n            ec = constructElliptic(key.type);\n        }\n        return new PublicKey(key, ec);\n    }\n\n    /** Instantiate public key from an `elliptic`-format public key */\n    public static fromElliptic(publicKey: EC.KeyPair, keyType: KeyType, ec?: EC): PublicKey {\n        const x = publicKey.getPublic().getX().toArray('be', 32);\n        const y = publicKey.getPublic().getY().toArray('be', 32);\n        if (!ec) {\n            ec = constructElliptic(keyType);\n        }\n        return new PublicKey({\n            type: keyType,\n            data: new Uint8Array([(y[31] & 1) ? 3 : 2].concat(x)),\n        }, ec);\n    }\n\n    /** Export public key as EOSIO-format public key */\n    public toString(): string {\n        return publicKeyToString(this.key);\n    }\n\n    /** Export public key as Legacy EOSIO-format public key */\n    public toLegacyString(prefix?: string): string {\n        return publicKeyToLegacyString(this.key, prefix);\n    }\n\n    /** Export public key as `elliptic`-format public key */\n    public toElliptic(): EC.KeyPair {\n        return this.ec.keyPair({\n            pub: Buffer.from(this.key.data),\n        });\n    }\n\n    /** Get key type from key */\n    public getType(): KeyType {\n        return this.key.type;\n    }\n\n    /** Validate a public key */\n    public isValid(): boolean {\n        try {\n            const ellipticPublicKey = this.toElliptic();\n            const validationObj = ellipticPublicKey.validate();\n            return validationObj.result;\n        } catch {\n            return false;\n        }\n    }\n}\n","import { BNInput, ec as EC } from 'elliptic';\nconst BN = require('bn.js');\n\nimport {\n    Key,\n    KeyType,\n    signatureToString,\n    stringToSignature,\n} from '../api/numeric';\nimport { constructElliptic } from './conversions';\nimport { PublicKey } from './publicKey'\n\n/** Represents/stores a Signature and provides easy conversion for use with `elliptic` lib */\nexport class Signature {\n    constructor(private signature: Key, private ec: EC) {}\n\n    /** Instantiate Signature from an EOSIO-format Signature */\n    public static fromString(sig: string, ec?: EC): Signature {\n        const signature = stringToSignature(sig);\n        if (!ec) {\n            ec = constructElliptic(signature.type);\n        }\n        return new Signature(signature, ec);\n    }\n\n    /** Instantiate Signature from an `elliptic`-format Signature */\n    public static fromElliptic(ellipticSig: EC.Signature, keyType: KeyType, ec?: EC): Signature {\n        if (!ellipticSig.recoveryParam) {\n            ellipticSig.recoveryParam = 0\n        }\n\n        const r = ellipticSig.r.toArray('be', 32);\n        const s = ellipticSig.s.toArray('be', 32);\n        let eosioRecoveryParam;\n        if (keyType === KeyType.k1 || keyType === KeyType.r1) {\n            eosioRecoveryParam = ellipticSig.recoveryParam + 27;\n            if (ellipticSig.recoveryParam <= 3) {\n                eosioRecoveryParam += 4;\n            }\n        } else if (keyType === KeyType.wa) {\n            eosioRecoveryParam = ellipticSig.recoveryParam;\n        }\n        const sigData = new Uint8Array([eosioRecoveryParam].concat(r, s) as any);\n        if (!ec) {\n            ec = constructElliptic(keyType);\n        }\n        return new Signature({\n            type: keyType,\n            data: sigData,\n        }, ec);\n    }\n\n    /** Export Signature as `elliptic`-format Signature\n     * NOTE: This isn't an actual elliptic-format Signature, as ec.Signature is not exported by the library.\n     * That's also why the return type is `any`.  We're *actually* returning an object with the 3 params\n     * not an ec.Signature.\n     * Further NOTE: @types/elliptic shows ec.Signature as exported; it is *not*.  Hence the `any`.\n     */\n    public toElliptic(): any {\n        const lengthOfR = 32;\n        const lengthOfS = 32;\n        const r = new BN(this.signature.data.slice(1, lengthOfR + 1));\n        const s = new BN(this.signature.data.slice(lengthOfR + 1, lengthOfR + lengthOfS + 1));\n\n        let ellipticRecoveryBitField;\n        if (this.signature.type === KeyType.k1 || this.signature.type === KeyType.r1) {\n            ellipticRecoveryBitField = this.signature.data[0] - 27;\n            if (ellipticRecoveryBitField > 3) {\n                ellipticRecoveryBitField -= 4;\n            }\n        } else if (this.signature.type === KeyType.wa) {\n            ellipticRecoveryBitField = this.signature.data[0];\n        } else {\n            ellipticRecoveryBitField = 0\n        }\n        const recoveryParam = ellipticRecoveryBitField & 3;\n        return { r, s, recoveryParam };\n    }\n\n    /** Export Signature as EOSIO-format Signature */\n    public toString(): string {\n        return signatureToString(this.signature);\n    }\n\n    /** Export Signature in binary format */\n    public toBinary(): Uint8Array {\n        return this.signature.data;\n    }\n\n    /** Get key type from signature */\n    public getType(): KeyType {\n        return this.signature.type;\n    }\n\n    /** Verify a signature with a message or hashed message digest and public key */\n    public verify(data: BNInput, publicKey: PublicKey, shouldHash: boolean = true, encoding: BufferEncoding = 'utf8'): boolean {\n        if (shouldHash) {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            data = this.ec.hash().update(data).digest();\n        }\n        const ellipticSignature = this.toElliptic();\n        const ellipticPublicKey = publicKey.toElliptic();\n        return this.ec.verify(data, ellipticSignature, ellipticPublicKey, encoding);\n    }\n\n    /** Recover a public key from a message or hashed message digest and signature */\n    public recover(data: BNInput, shouldHash: boolean = true, encoding: BufferEncoding = 'utf8'): PublicKey {\n        if (shouldHash) {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            data = this.ec.hash().update(data).digest();\n        }\n        const ellipticSignature = this.toElliptic();\n        const recoveredPublicKey = this.ec.recoverPubKey(\n            data,\n            ellipticSignature,\n            ellipticSignature.recoveryParam,\n            encoding\n        );\n        const ellipticKPub = this.ec.keyFromPublic(recoveredPublicKey);\n        return PublicKey.fromElliptic(ellipticKPub, this.getType(), this.ec);\n    }\n}\n","import { BNInput, ec as EC } from 'elliptic';\nimport {\n    Key,\n    KeyType,\n    privateKeyToLegacyString,\n    privateKeyToString,\n    stringToPrivateKey,\n} from '../api/numeric';\nimport { constructElliptic } from './conversions';\nimport { PublicKey } from './publicKey'\nimport { Signature } from './signature'\n\n/** Represents/stores a private key and provides easy conversion for use with `elliptic` lib */\nexport class PrivateKey {\n    constructor(private key: Key, private ec: EC) {}\n\n    /** Instantiate private key from an `elliptic`-format private key */\n    public static fromElliptic(privKey: EC.KeyPair, keyType: KeyType, ec?: EC): PrivateKey {\n        if (!ec) {\n            ec = constructElliptic(keyType);\n        }\n        return new PrivateKey({\n            type: keyType,\n            data: privKey.getPrivate().toArrayLike(Buffer, 'be', 32),\n        }, ec);\n    }\n\n    /** Instantiate private key from an EOSIO-format private key */\n    public static fromString(keyString: string, ec?: EC): PrivateKey {\n        const privateKey = stringToPrivateKey(keyString);\n        if (!ec) {\n            ec = constructElliptic(privateKey.type);\n        }\n        return new PrivateKey(privateKey, ec);\n    }\n\n    /** Export private key as `elliptic`-format private key */\n    public toElliptic(): EC.KeyPair {\n        return this.ec.keyFromPrivate(this.key.data);\n    }\n\n    public toLegacyString(): string {\n        return privateKeyToLegacyString(this.key);\n    }\n\n    /** Export private key as EOSIO-format private key */\n    public toString(): string {\n        return privateKeyToString(this.key);\n    }\n\n    /** Get key type from key */\n    public getType(): KeyType {\n        return this.key.type;\n    }\n\n    /** Retrieve the public key from a private key */\n    public getPublicKey(): PublicKey {\n        const ellipticPrivateKey = this.toElliptic();\n        return PublicKey.fromElliptic(ellipticPrivateKey, this.getType(), this.ec);\n    }\n\n    /** Sign a message or hashed message digest with private key */\n    public sign(data: BNInput, shouldHash: boolean = true, encoding: BufferEncoding = 'utf8'): Signature {\n        if (shouldHash) {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            data = this.ec.hash().update(data).digest();\n        }\n        let tries = 0;\n        let signature: Signature;\n        const isCanonical = (sigData: Uint8Array): boolean =>\n            !(sigData[1] & 0x80) && !(sigData[1] === 0 && !(sigData[2] & 0x80))\n            && !(sigData[33] & 0x80) && !(sigData[33] === 0 && !(sigData[34] & 0x80));\n        const constructSignature = (options: EC.SignOptions): Signature => {\n            const ellipticPrivateKey = this.toElliptic();\n            const ellipticSignature = ellipticPrivateKey.sign(data, options);\n            return Signature.fromElliptic(ellipticSignature, this.getType(), this.ec);\n        };\n\n        if (this.key.type === KeyType.k1) {\n            do {\n                signature = constructSignature({canonical: true, pers: [++tries]});\n            } while (!isCanonical(signature.toBinary()));\n        } else {\n            signature = constructSignature({canonical: true});\n        }\n        return signature;\n    }\n\n    /** Validate a private key */\n    public isValid(): boolean {\n        try {\n            const ellipticPrivateKey = this.toElliptic();\n            const validationObj = ellipticPrivateKey.validate();\n            return validationObj.result;\n        } catch {\n            return false;\n        }\n    }\n}\n","import { PrivateKey } from './privateKey';\nimport { PublicKey } from './publicKey';\nimport { ec as EC } from 'elliptic';\nimport {KeyType} from '../api/numeric';\n\nexport { PrivateKey } from './privateKey';\nexport { PublicKey } from './publicKey';\nexport { Signature } from './signature';\nexport { constructElliptic } from './conversions';\n\nexport const generateKeyPair = (\n    type: KeyType, options: { secureEnv?: boolean, ecOptions?: EC.GenKeyPairOptions } = {}\n): { publicKey: PublicKey, privateKey: PrivateKey } => {\n    if (!options.secureEnv) {\n        throw new Error('Key generation is completely INSECURE in production environments in the browser. ' +\n            'If you are absolutely certain this does NOT describe your environment, set `secureEnv` in your ' +\n            'options to `true`.  If this does describe your environment and you set `secureEnv` to `true`, ' +\n            'YOU DO SO AT YOUR OWN RISK AND THE RISK OF YOUR USERS.');\n    }\n    let ec;\n    if (type === KeyType.k1) {\n        ec = new EC('secp256k1') as any;\n    } else {\n        ec = new EC('p256') as any;\n    }\n    const ellipticKeyPair = ec.genKeyPair(options.ecOptions);\n    const publicKey = PublicKey.fromElliptic(ellipticKeyPair, type, ec);\n    const privateKey = PrivateKey.fromElliptic(ellipticKeyPair, type, ec);\n    return {publicKey, privateKey};\n};","/**\n * @module JS-Sig\n */\n// copyright defined in eosjs/LICENSE.txt\n\nimport { ec } from 'elliptic';\n\nimport { SignatureProvider, SignatureProviderArgs } from '../api/types';\nimport {\n    PrivateKey,\n    PublicKey,\n    Signature,\n} from './key';\nimport { convertLegacyPublicKey } from '../api/numeric';\n\n/** expensive to construct; so we do it once and reuse it */\nconst defaultEc = new ec('secp256k1');\n\n/** Construct the digest from transaction details */\nconst digestFromSerializedData = (\n    chainId: string,\n    serializedTransaction: Uint8Array,\n    serializedContextFreeData?: Uint8Array,\n    e = defaultEc) => {\n    const signBuf = Buffer.concat([\n        Buffer.from(chainId, 'hex'),\n        Buffer.from(serializedTransaction),\n        Buffer.from(\n            serializedContextFreeData ?\n                new Uint8Array(e.hash().update(serializedContextFreeData).digest()) :\n                new Uint8Array(32)\n        ),\n    ]);\n    return e.hash().update(signBuf).digest();\n};\n\n/** Signs transactions using in-process private keys */\nclass JsSignatureProvider implements SignatureProvider {\n    /** map public to private keys */\n    public keys = new Map<string, ec.KeyPair>();\n\n    /** public keys */\n    public availableKeys = [] as string[];\n\n    /** @param privateKeys private keys to sign with */\n    constructor(privateKeys: string[]) {\n        for (const k of privateKeys) {\n            const priv = PrivateKey.fromString(k);\n            const privElliptic = priv.toElliptic();\n            const pubStr = priv.getPublicKey().toString();\n            this.keys.set(pubStr, privElliptic);\n            this.availableKeys.push(pubStr);\n        }\n    }\n\n    /** Public keys associated with the private keys that the `SignatureProvider` holds */\n    public async getAvailableKeys() {\n        return this.availableKeys;\n    }\n\n    /** Sign a transaction */\n    public async sign(\n        { chainId, requiredKeys, serializedTransaction, serializedContextFreeData }: SignatureProviderArgs,\n    ) {\n        const digest = digestFromSerializedData( chainId, serializedTransaction, serializedContextFreeData, defaultEc);\n\n        const signatures = [] as string[];\n        for (const key of requiredKeys) {\n            const publicKey = PublicKey.fromString(key);\n            const ellipticPrivateKey = this.keys.get(convertLegacyPublicKey(key));\n            if (ellipticPrivateKey) {\n                const privateKey = PrivateKey.fromElliptic(ellipticPrivateKey, publicKey.getType());\n                const signature = privateKey.sign(digest, false);\n                signatures.push(signature.toString());\n            }\n        }\n\n        return { signatures, serializedTransaction, serializedContextFreeData };\n    }\n}\n\nexport {\n    PrivateKey,\n    PublicKey,\n    Signature,\n    digestFromSerializedData,\n    JsSignatureProvider,\n};\n","/* eslint-disable max-classes-per-file */\n\nimport { inflate, deflate } from 'pako';\nimport { ec } from 'elliptic';\nimport base64url from 'base64url';\nimport {\n    AbiProvider,\n    ActionSerializerType,\n    AuthorityProvider,\n    BinaryAbi,\n    CachedAbi,\n    ContextFreeGroupCallback,\n    Query,\n    QueryConfig,\n    SignatureProvider,\n    TransactConfig,\n    Transaction,\n    TransactResult,\n} from './types';\nimport { JsonRpc } from '../rpc';\nimport {\n    Abi,\n    BlockTaposInfo,\n    GetInfoResult,\n    PushTransactionArgs,\n    GetBlockHeaderStateResult,\n    GetBlockInfoResult,\n    GetBlockResult,\n    ReadOnlyTransactResult,\n    RsaKey\n} from '../rpc/types';\nimport * as ser from './serialize';\nimport { digestFromSerializedData } from '../cryptography/jsSignatureProvider'\nimport { PublicKey, Signature } from '../cryptography/key' \nimport * as Numeric from './numeric';\nimport { b64tob64u } from './serialize';\nimport { sha256 } from '../cryptography/conversions';\nimport { ApiInterfaces } from '..';\nimport type { recoverPersonalSignature as RecoverPersonalSignature } from 'eth-sig-util'\n\nexport class Api {\n    /** Issues RPC calls */\n    public rpc: JsonRpc;\n\n    /** Get subset of `availableKeys` needed to meet authorities in a `transaction` */\n    public authorityProvider: AuthorityProvider;\n\n    /** Supplies ABIs in raw form (binary) */\n    public abiProvider: AbiProvider;\n\n    /** Signs transactions */\n    public signatureProvider?: SignatureProvider;\n\n    /** Converts abi files between binary and structured form (`abi.abi.json`) */\n    public abiTypes: Map<string, ser.Type>;\n\n    /** Converts transactions between binary and structured form (`transaction.abi.json`) */\n    public transactionTypes: Map<string, ser.Type>;\n\n    /** Holds information needed to serialize contract actions */\n    public contracts = new Map<string, ser.Contract>();\n\n    /** Fetched abis */\n    public cachedAbis = new Map<string, CachedAbi>();\n\n    /** Crypto */    \n    public crypto?: Crypto\n    public recoverPersonalSignature?: typeof RecoverPersonalSignature\n\n    /**\n     * @param args\n     *    * `rpc`: Issues RPC calls\n     *    * `authorityProvider`: Get public keys needed to meet authorities in a transaction\n     *    * `abiProvider`: Supplies ABIs in raw form (binary)\n     *    * `signatureProvider`: Signs transactions\n     */\n    constructor(args: {\n        rpc: JsonRpc,\n        authorityProvider?: AuthorityProvider,\n        abiProvider?: AbiProvider,\n        signatureProvider?: SignatureProvider,\n        crypto?: Crypto,\n        recoverPersonalSignature?: typeof RecoverPersonalSignature\n    }) {\n        this.rpc = args.rpc;\n        this.authorityProvider = args.authorityProvider || args.rpc;\n        this.abiProvider = args.abiProvider || args.rpc;\n        if (args.signatureProvider) {\n            this.signatureProvider = args.signatureProvider;\n        }\n\n        this.abiTypes = ser.getTypesFromAbi(ser.createAbiTypes());\n        this.transactionTypes = ser.getTypesFromAbi(ser.createTransactionTypes());\n\n        this.crypto = args.crypto || (typeof window !== \"undefined\" && window && window.crypto) || (global && global.crypto)\n        this.recoverPersonalSignature = args.recoverPersonalSignature\n    }\n\n    getCrypto() {\n        if (!this.crypto) {\n            throw new Error(`No 'crypto' module found. On nodejs, do const { Crypto } = require('@peculiar/webcrypto'); const crypto = new Crypto; new Api({ rpc, crypto });`)\n        }\n\n        return this.crypto\n    }\n\n    getRecoverPersonalSignature() {\n        if (!this.recoverPersonalSignature) {\n            throw new Error(`No 'recoverPersonalSignature' function found. Do const { recoverPersonalSignature } = require('eth-sig-util'); new Api({ rpc, recoverPersonalSignature });`)\n        }\n\n        return this.recoverPersonalSignature\n    }\n\n    /** Decodes an abi as Uint8Array into json. */\n    public rawAbiToJson(rawAbi: Uint8Array): Abi {\n        const buffer = new ser.SerialBuffer({\n            array: rawAbi\n        });\n        if (!ser.supportedAbiVersion(buffer.getString())) {\n            throw new Error('Unsupported abi version');\n        }\n        buffer.restartRead();\n        return this.abiTypes.get('abi_def')!.deserialize(buffer);\n    }\n\n    /** Encodes a json abi as Uint8Array. */\n    public jsonToRawAbi(jsonAbi: Abi): Uint8Array {\n        const buffer = new ser.SerialBuffer();\n        this.abiTypes.get('abi_def')!.serialize(buffer, jsonAbi);\n        if (!ser.supportedAbiVersion(buffer.getString())) {\n            throw new Error('Unsupported abi version');\n        }\n        return buffer.asUint8Array();\n    }\n\n    /** Get abi in both binary and structured forms. Fetch when needed. */\n    public async getCachedAbi(accountName: string, reload = false): Promise<CachedAbi> {\n        if (!reload && this.cachedAbis.get(accountName)) {\n            return this.cachedAbis.get(accountName) as CachedAbi;\n        }\n        let cachedAbi: CachedAbi;\n        try {\n            const rawAbi = (await this.abiProvider.getRawAbi(accountName)).abi;\n            const abi = this.rawAbiToJson(rawAbi);\n            cachedAbi = { rawAbi, abi };\n        } catch (e) {\n            e.message = `fetching abi for ${accountName}: ${e.message}`;\n            throw e;\n        }\n        if (!cachedAbi) {\n            throw new Error(`Missing abi for ${accountName}`);\n        }\n        this.cachedAbis.set(accountName, cachedAbi);\n        return cachedAbi;\n    }\n\n    /** Get abi in structured form. Fetch when needed. */\n    public async getAbi(accountName: string, reload = false): Promise<Abi> {\n        return (await this.getCachedAbi(accountName, reload)).abi;\n    }\n\n    /** Get abis needed by a transaction */\n    public async getTransactionAbis(transaction: any, reload = false): Promise<BinaryAbi[]> {\n        const actions = (transaction.context_free_actions || []).concat(transaction.actions);\n        const accounts: string[] = actions.map((action: ser.Action): string => action.account);\n        const uniqueAccounts: Set<string> = new Set(accounts);\n        const actionPromises: Promise<BinaryAbi>[] = Array.from(uniqueAccounts).map(\n            async (account: string): Promise<BinaryAbi> => {\n                const { rawAbi } = await this.getCachedAbi(account, reload)\n                return {\n                    accountName: account,\n                    abi: rawAbi\n                }\n            }\n        );\n        return Promise.all(actionPromises);\n    }\n\n    /** Get data needed to serialize actions in a contract */\n    public async getContract(accountName: string, reload = false): Promise<ser.Contract> {\n        if (!reload && this.contracts.get(accountName)) {\n            return this.contracts.get(accountName) as ser.Contract;\n        }\n        const abi = await this.getAbi(accountName, reload);\n        const types = ser.getTypesFromAbi(ser.createInitialTypes(), abi);\n        const actions = new Map<string, ser.Type>();\n        for (const { name, type } of abi.actions) {\n            actions.set(name, ser.getType(types, type));\n        }\n        const result = { types, actions };\n        this.contracts.set(accountName, result);\n        return result;\n    }\n\n    /** Convert `value` to binary form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n    public serialize(buffer: ser.SerialBuffer, type: string, value: any): void {\n        this.transactionTypes.get(type)!.serialize(buffer, value);\n    }\n\n    /** Convert data in `buffer` to structured form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n    public deserialize(buffer: ser.SerialBuffer, type: string): any {\n        return this.transactionTypes.get(type)!.deserialize(buffer);\n    }\n\n    /** Convert a transaction to binary */\n    public serializeTransaction(transaction: Transaction): Uint8Array {\n        const buffer = new ser.SerialBuffer();\n        this.serialize(buffer, 'transaction', {\n            max_net_usage_words: 0,\n            max_cpu_usage_ms: 0,\n            delay_sec: 0,\n            context_free_actions: [],\n            transaction_extensions: [],\n            ...transaction,\n        });\n        return buffer.asUint8Array();\n    }\n\n    /** Serialize context-free data */\n    public serializeContextFreeData(contextFreeData?: Uint8Array[]): Uint8Array | undefined {\n        if (!contextFreeData || !contextFreeData.length) {\n            return undefined;\n        }\n        const buffer = new ser.SerialBuffer();\n        buffer.pushVaruint32(contextFreeData.length);\n        for (const data of contextFreeData) {\n            buffer.pushBytes(data);\n        }\n        return buffer.asUint8Array();\n    }\n\n    /** Convert a transaction from binary. Leaves actions in hex. */\n    public deserializeTransaction(transaction: Uint8Array): Transaction {\n        const buffer = new ser.SerialBuffer();\n        buffer.pushArray(transaction);\n        return this.deserialize(buffer, 'transaction');\n    }\n\n    private transactionExtensions = [\n        { id: 1, type: 'resource_payer', keys: ['payer', 'max_net_bytes', 'max_cpu_us', 'max_memory_bytes'] },\n    ];\n\n    // Order of adding to transaction_extension is transaction_extension id ascending\n    public serializeTransactionExtensions(transaction: Transaction): [number, string][] {\n        let transaction_extensions: [number, string][] = [];\n        if (transaction.resource_payer) {\n            const extensionBuffer = new ser.SerialBuffer();\n            const types = ser.getTypesFromAbi(ser.createTransactionExtensionTypes());\n            types.get('resource_payer')!.serialize(extensionBuffer, transaction.resource_payer);\n            transaction_extensions = [...transaction_extensions, [1, ser.arrayToHex(extensionBuffer.asUint8Array())]];\n        }\n        return transaction_extensions;\n    };\n\n    // Usage: transaction = {...transaction, ...this.deserializeTransactionExtensions(transaction.transaction_extensions)}\n    public deserializeTransactionExtensions(data: [number, string][]): any[] {\n        const transaction = {} as any;\n        data.forEach((extensionData: [number, string]) => {\n            const transactionExtension = this.transactionExtensions.find(extension => extension.id === extensionData[0]);\n            if (transactionExtension === undefined) {\n                throw new Error(`Transaction Extension could not be determined: ${extensionData}`);\n            }\n            const types = ser.getTypesFromAbi(ser.createTransactionExtensionTypes());\n            const extensionBuffer = new ser.SerialBuffer();\n            extensionBuffer.pushArray(ser.hexToUint8Array(extensionData[1]));\n            const deserializedObj = types.get(transactionExtension.type)!.deserialize(extensionBuffer);\n            if (extensionData[0] === 1) {\n                deserializedObj.max_net_bytes = Number(deserializedObj.max_net_bytes);\n                deserializedObj.max_cpu_us = Number(deserializedObj.max_cpu_us);\n                deserializedObj.max_memory_bytes = Number(deserializedObj.max_memory_bytes);\n                transaction.resource_payer = deserializedObj;\n            }\n        });\n        return transaction;\n    };\n\n    // Transaction extensions are serialized and moved to `transaction_extensions`, deserialized objects are not needed on the transaction\n    public deleteTransactionExtensionObjects(transaction: Transaction): Transaction {\n        delete transaction.resource_payer;\n        return transaction;\n    }\n\n    /** Convert actions to hex */\n    public async serializeActions(actions: ser.Action[]): Promise<ser.SerializedAction[]> {\n        return await Promise.all(actions.map(async (action) => {\n            const { account, name, authorization, data } = action;\n            const contract = await this.getContract(account);\n            if (typeof data !== 'object') {\n                return action;\n            }\n            return ser.serializeAction(\n                contract, account, name, authorization, data);\n        }));\n    }\n\n    /** Convert actions from hex */\n    public async deserializeActions(actions: ser.Action[]): Promise<ser.Action[]> {\n        return await Promise.all(actions.map(async ({ account, name, authorization, data }) => {\n            const contract = await this.getContract(account);\n            return ser.deserializeAction(\n                contract, account, name, authorization, data);\n        }));\n    }\n\n    public async deserializeActionsSync(actions: ser.Action[] = []): Promise<ser.Action[]> {\n        let deserializedActions = []\n        for (const { account, name, authorization, data } of actions) {\n            const contract = await this.getContract(account);\n            deserializedActions.push(\n                ser.deserializeAction(\n                    contract, account, name, authorization, data\n                )\n            )\n        }\n        return deserializedActions\n    }\n\n    /** Convert a transaction from binary. Also deserializes actions. */\n    public async deserializeTransactionWithActions(transaction: Uint8Array | string): Promise<any> {\n        if (typeof transaction === 'string') {\n            transaction = ser.hexToUint8Array(transaction);\n        }\n        const deserializedTransaction = this.deserializeTransaction(transaction);\n        const deserializedCFActions = await this.deserializeActionsSync(deserializedTransaction.context_free_actions);\n        const deserializedActions = await this.deserializeActionsSync(deserializedTransaction.actions);\n        return {\n            ...deserializedTransaction, context_free_actions: deserializedCFActions, actions: deserializedActions\n        };\n    }\n\n    /** Deflate a serialized object */\n    public deflateSerializedArray(serializedArray: Uint8Array): Uint8Array {\n        return deflate(serializedArray, { level: 9 });\n    }\n\n    /** Inflate a compressed serialized object */\n    public inflateSerializedArray(compressedSerializedArray: Uint8Array): Uint8Array {\n        return inflate(compressedSerializedArray);\n    }\n\n    /**\n     * Create and optionally broadcast a transaction.\n     *\n     * Named Parameters:\n     * `broadcast`: broadcast this transaction?\n     * `sign`: sign this transaction?\n     * `compression`: compress this transaction?\n     * `readOnlyTrx`: read only transaction?\n     * `returnFailureTraces`: return failure traces? (only available for read only transactions currently)\n     *\n     * If both `blocksBehind` and `expireSeconds` are present,\n     * then fetch the block which is `blocksBehind` behind head block,\n     * use it as a reference for TAPoS, and expire the transaction `expireSeconds` after that block's time.\n     *\n     * If both `useLastIrreversible` and `expireSeconds` are present,\n     * then fetch the last irreversible block, use it as a reference for TAPoS,\n     * and expire the transaction `expireSeconds` after that block's time.\n     *\n     * @returns node response if `broadcast`, `{signatures, serializedTransaction}` if `!broadcast`\n     */\n    public async transact(\n        transaction: Transaction,\n        {\n            broadcast = true,\n            sign = true,\n            readOnlyTrx,\n            returnFailureTraces,\n            requiredKeys, // When you will sign later\n            compression,\n            blocksBehind,\n            useLastIrreversible,\n            expireSeconds,\n            transactionHeader\n        }:\n        TransactConfig = {}): Promise<TransactResult|ReadOnlyTransactResult|PushTransactionArgs>\n    {\n        const info: GetInfoResult = await this.rpc.get_info();;\n\n        // Calculate header if not provided\n        if (!transactionHeader) {\n            if (typeof blocksBehind === 'number' && useLastIrreversible) {\n                throw new Error('Use either blocksBehind or useLastIrreversible');\n            } else if (typeof blocksBehind !== 'number' && !useLastIrreversible) {\n                throw new Error('Must provide one blocksBehind or useLastIrreversible');\n            } else if (!expireSeconds) {\n                throw new Error('Must provide expireSeconds');\n            } else {\n                transactionHeader = await this.generateTapos(info, transaction, blocksBehind, useLastIrreversible, expireSeconds);;\n            }\n\n            if (!this.hasRequiredTaposFields(transactionHeader)) {\n                throw new Error('Required configuration or TAPOS fields are not present');\n            }\n        }\n\n        const abis: BinaryAbi[] = await this.getTransactionAbis(transaction);\n        transaction = {\n            ...transactionHeader,\n            transaction_extensions: await this.serializeTransactionExtensions(transaction),\n            context_free_actions: await this.serializeActions(transaction.context_free_actions || []),\n            actions: await this.serializeActions(transaction.actions)\n        };\n        transaction = this.deleteTransactionExtensionObjects(transaction);\n        const serializedTransaction = this.serializeTransaction(transaction);\n        const serializedContextFreeData = this.serializeContextFreeData(transaction.context_free_data);\n        let pushTransactionArgs: PushTransactionArgs = {\n            serializedTransaction, serializedContextFreeData, signatures: []\n        };\n\n        if (sign) {\n            if (!this.signatureProvider) {\n                throw new Error('No signature provider available')\n            }\n            \n            if (!requiredKeys) {\n                const availableKeys = await this.signatureProvider.getAvailableKeys();\n                requiredKeys = await this.authorityProvider.getRequiredKeys({ transaction, availableKeys });\n            }\n\n            pushTransactionArgs = await this.signatureProvider.sign({\n                chainId: info.chain_id,\n                requiredKeys,\n                serializedTransaction,\n                serializedContextFreeData,\n                abis,\n            });\n        }\n        if (broadcast) {\n            if (compression) {\n                return this.pushCompressedSignedTransaction(\n                    pushTransactionArgs,\n                    readOnlyTrx,\n                    returnFailureTraces,\n                ) as Promise<TransactResult|ReadOnlyTransactResult>;\n            }\n            return this.pushSignedTransaction(\n                pushTransactionArgs,\n                readOnlyTrx,\n                returnFailureTraces,\n            ) as Promise<TransactResult|ReadOnlyTransactResult>;\n        }\n        return {\n            ...pushTransactionArgs,\n            transactionHeader //\n        };\n    }\n\n    public async transactWithDelay(transaction: any, params: TransactConfig = {}, delay: number): Promise<any> {\n        async function wait (ms: number) {\n            return new Promise(resolve => {\n              setTimeout(resolve, ms);\n            });\n        }\n\n        const success = await this.transact(transaction, params)\n        await wait(delay)\n        return success\n    }\n\n    public async query(\n        account: string, short: boolean, query: Query,\n        { sign, requiredKeys, authorization = [] }: QueryConfig\n    ): Promise<any> {\n        const info = await this.rpc.get_info();\n        const refBlock = await this.tryRefBlockFromGetInfo(info);\n        const queryBuffer = new ser.SerialBuffer();\n        ser.serializeQuery(queryBuffer, query);\n\n        const transaction = {\n            ...ser.transactionHeader(refBlock, 60 * 30),\n            context_free_actions: [] as ser.Action[],\n            actions: [{\n                account,\n                name: 'queryit',\n                authorization,\n                data: ser.arrayToHex(queryBuffer.asUint8Array()),\n            }],\n        };\n\n        const serializedTransaction = this.serializeTransaction(transaction);\n        let signatures: string[] = [];\n        if (sign) {\n            if (!this.signatureProvider) {\n                throw new Error('No signature provider available')\n            }\n    \n            const abis: BinaryAbi[] = await this.getTransactionAbis(transaction);\n            if (!requiredKeys) {\n                const availableKeys = await this.signatureProvider.getAvailableKeys();\n                requiredKeys = await this.authorityProvider.getRequiredKeys({ transaction, availableKeys });\n            }\n\n            const signResponse = await this.signatureProvider.sign({\n                chainId: info.chain_id,\n                requiredKeys,\n                serializedTransaction,\n                serializedContextFreeData: undefined,\n                abis,\n            });\n\n            signatures = signResponse.signatures;\n        }\n\n        const response = await this.rpc.send_transaction({\n            signatures,\n            compression: 0,\n            serializedTransaction\n        }) as any;\n\n        const returnBuffer = new ser.SerialBuffer({\n            array: ser.hexToUint8Array(response.processed.action_traces[0][1].return_value)\n        });\n        if (short) {\n            return ser.deserializeAnyvarShort(returnBuffer);\n        } else {\n            return ser.deserializeAnyvar(returnBuffer);\n        }\n    }\n\n    /** Broadcast a signed transaction */\n    public async pushSignedTransaction(\n        { signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs,\n        readOnlyTrx = false,\n        returnFailureTraces = false,\n        ): Promise<TransactResult|ReadOnlyTransactResult> {\n            if (readOnlyTrx) {\n                return this.rpc.push_ro_transaction({\n                    signatures,\n                    serializedTransaction,\n                    serializedContextFreeData,\n                }, returnFailureTraces);\n            }\n        return this.rpc.push_transaction({\n            signatures,\n            serializedTransaction,\n            serializedContextFreeData\n        });\n    }\n\n    public async pushCompressedSignedTransaction(\n        { signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs,\n        readOnlyTrx = false,\n        returnFailureTraces = false,\n    ): Promise<TransactResult|ReadOnlyTransactResult> {\n        const compressedSerializedTransaction = this.deflateSerializedArray(serializedTransaction);\n        const compressedSerializedContextFreeData =\n            this.deflateSerializedArray(serializedContextFreeData || new Uint8Array(0));\n\n        if (readOnlyTrx) {\n            return this.rpc.push_ro_transaction({\n                signatures,\n                compression: 1,\n                serializedTransaction: compressedSerializedTransaction,\n                serializedContextFreeData: compressedSerializedContextFreeData\n            }, returnFailureTraces);\n        }\n        return this.rpc.push_transaction({\n            signatures,\n            compression: 1,\n            serializedTransaction: compressedSerializedTransaction,\n            serializedContextFreeData: compressedSerializedContextFreeData\n        });\n    }\n\n    public async generateTapos(\n        info: GetInfoResult | undefined,\n        transaction: Transaction,\n        blocksBehind: number = 3,\n        useLastIrreversible: boolean | undefined,\n        expireSeconds: number\n    ) {\n        if (!info) {\n            info = await this.rpc.get_info();\n        }\n        if (useLastIrreversible) {\n            const block = await this.tryRefBlockFromGetInfo(info);\n            return { ...ser.transactionHeader(block, expireSeconds), ...transaction };\n        }\n\n        const taposBlockNumber: number = info.head_block_num - blocksBehind;\n\n        const refBlock: GetBlockHeaderStateResult | GetBlockResult | GetBlockInfoResult =\n            taposBlockNumber <= info.last_irreversible_block_num\n                ? await this.tryGetBlockInfo(taposBlockNumber)\n                : await this.tryGetBlockHeaderState(taposBlockNumber);\n\n        return { ...ser.transactionHeader(refBlock, expireSeconds), ...transaction };\n    }\n\n    // eventually break out into TransactionValidator class\n    private hasRequiredTaposFields({ expiration, ref_block_num, ref_block_prefix }: Transaction): boolean {\n        return !!(expiration && typeof(ref_block_num) === 'number' && typeof(ref_block_prefix) === 'number');\n    }\n\n    private async tryGetBlockHeaderState(taposBlockNumber: number): Promise<GetBlockHeaderStateResult | GetBlockResult | GetBlockInfoResult>\n    {\n        try {\n            return await this.rpc.get_block_header_state(taposBlockNumber);\n        } catch (error) {\n            return await this.tryGetBlockInfo(taposBlockNumber);\n        }\n    }\n\n    private async tryGetBlockInfo(blockNumber: number): Promise<GetBlockInfoResult | GetBlockResult> {\n        try {\n            return await this.rpc.get_block_info(blockNumber);\n        } catch (error) {\n            return await this.rpc.get_block(blockNumber);\n        }\n    }\n\n    private async tryRefBlockFromGetInfo(info: GetInfoResult): Promise<BlockTaposInfo | GetBlockInfoResult | GetBlockResult> {\n        if (\n            info.hasOwnProperty('last_irreversible_block_id') &&\n            info.hasOwnProperty('last_irreversible_block_num') &&\n            info.hasOwnProperty('last_irreversible_block_time')\n        ) {\n            return {\n                block_num: info.last_irreversible_block_num,\n                id: info.last_irreversible_block_id,\n                timestamp: info.last_irreversible_block_time,\n            };\n        } else {\n            const block = await this.tryGetBlockInfo(info.last_irreversible_block_num);\n            return {\n                block_num: block.block_num,\n                id: block.id,\n                timestamp: block.timestamp,\n            };\n        }\n    }\n\n    public with(accountName: string): ActionBuilder {\n        return new ActionBuilder(this, accountName);\n    }\n\n    public buildTransaction(cb?: (tx: TransactionBuilder) => void): TransactionBuilder|void {\n        const tx = new TransactionBuilder(this);\n        if (cb) {\n            return cb(tx);\n        }\n        return tx as TransactionBuilder;\n    }\n\n    public async getAccountKeys (actor: string, permission: string) {\n        try {\n            const { permissions } = await this.rpc.get_account(actor)\n            const relevantPermission = permissions.find(({ perm_name }: any) => perm_name === permission)\n            if (relevantPermission) {\n                return relevantPermission.required_auth.keys.map(({ key }: any) => PublicKey.fromString(key).toString())\n            }\n        } catch (e) {\n            console.log(e)\n        }\n\n        return []\n    }\n\n    public async sha256Digest (\n        array: Uint8Array | ArrayBuffer\n    ): Promise<Uint8Array> {\n        const buffer = array instanceof Uint8Array ? array.buffer.slice(array.byteOffset, array.byteOffset + array.byteLength) : array;\n        return new Uint8Array(await this.getCrypto().subtle.digest('SHA-256', buffer));\n    };\n\n    async matchRsaKeyToSignature({ actor, transaction }: { actor: string, transaction: Transaction }) {\n        // 0. Destructure\n        const { signature, nonce, trx }: {\n            account: string,\n            signature: { auth_data: string; signature: string; client_json: string },\n            nonce: number,\n            trx: ApiInterfaces.Transaction\n        } = transaction.actions[0].data\n\n        // 1. Get user creds\n        let creds = await this.rpc.fetchCredentials(actor);\n    \n        // 2. Filter RSA\n        creds = creds.filter((cred) => cred.key.key[0] === 'rsa_public_key');\n    \n        // 3. For each cred\n        for (const cred of creds) {\n            // Create key \n            const rsaKey = cred.key.key[1] as RsaKey;\n        \n            // Create crypto key\n            const exponentBase64 = b64tob64u(Buffer.from(rsaKey.exponent, 'hex').toString('base64'));\n            const modulusBase64 = b64tob64u(Buffer.from(rsaKey.modulus, 'hex').toString('base64'));\n        \n            // Check challenge\n            const clientJson = JSON.parse(signature.client_json);\n            const signedDigest = new Uint8Array(base64url.toBuffer(clientJson.challenge).buffer);\n        \n            // Create TX Digest\n            const signBuf = new ser.SerialBuffer();\n            const serializedTransaction = this.serializeTransaction(trx);\n            signBuf.pushArray(serializedTransaction);\n            signBuf.pushNumberAsUint64(nonce);\n            const actualDigest = await this.sha256Digest(signBuf.asUint8Array().slice());\n        \n            if (ser.arrayToHex(signedDigest) !== ser.arrayToHex(actualDigest)) {\n                continue;\n            }\n        \n            // Check signature\n            const publicKey = await this.getCrypto().subtle.importKey(\n                'jwk',\n                {\n                    //this is an example jwk key, other key types are Uint8Array objects\n                    kty: 'RSA',\n                    e: exponentBase64,\n                    n: modulusBase64,\n                    alg: 'RS256',\n                    ext: false,\n                },\n                {\n                    name: 'RSASSA-PKCS1-v1_5',\n                    hash: {\n                        name: 'SHA-256',\n                    },\n                },\n                false,\n                ['verify']\n            );\n        \n            const authData = ser.hexToUint8Array(signature.auth_data);\n            const clientJsonHash = ser.hexToUint8Array(sha256(signature.client_json));\n            const resultingHash = new Uint8Array([...authData, ...clientJsonHash]);\n\n            const verified = await this.getCrypto().subtle.verify(\n                'RSASSA-PKCS1-v1_5',\n                publicKey,\n                ser.hexToUint8Array(signature.signature),\n                resultingHash\n            );\n        \n            if (verified) {\n                return true;\n            }\n        }\n    \n        return false;\n    }\n  \n    async matchEthKeyToSignature({ actor, transaction }: { actor: string, transaction: Transaction }) {\n        // 0. Destructure\n        const { signature, nonce, trx }: {\n            signature: { auth_data: string; signature: string; client_json: string },\n            nonce: number,\n            trx: ApiInterfaces.Transaction\n        } = transaction.actions[0].data\n\n        // 1. Get user creds\n        let creds = await this.rpc.fetchCredentials(actor);\n    \n        // 2. Filter RSA\n        creds = creds.filter((cred) => cred.key.key[0] === 'eth_public_key');\n    \n        // 3. For each cred\n        for (const cred of creds) {\n            // Create key\n            const ethKey = '0x' + cred.key.key[1];\n\n            // Create TX Digest\n            const signBuf = new ser.SerialBuffer();\n            const serializedTransaction = this.serializeTransaction(trx);\n            signBuf.pushArray(serializedTransaction);\n            signBuf.pushNumberAsUint64(nonce);\n            \n            const actualDigestArray = await this.sha256Digest(signBuf.asUint8Array().slice());\n            const actualDigest = ser.arrayToHex(actualDigestArray);\n\n            // Create signature\n            const ethSignature = '0x' + signature.signature;\n\n            // Verify\n            const signedWithKey = this.getRecoverPersonalSignature()({\n                data: actualDigest,\n                sig: ethSignature,\n            });\n\n            if (signedWithKey === ethKey) {\n                return true;\n            }\n        }\n    \n        return false;\n    }\n\n    public async matchWaKeyToSignature({ signature, key, digest }: { signature: string, key: string, digest: string }) {\n        try {\n          // Decode WA Signature data\n          const fullSignature = Numeric.stringToSignature(signature);\n          const sigData = new ser.SerialBuffer({ array: fullSignature.data });\n      \n          // Create R1\n          const r1Signature = new Signature({\n            type: Numeric.KeyType.r1,\n            data: sigData.getUint8Array(65),\n          }, new ec('p256'));\n      \n          // Recreate the data the browser actually signed\n          const authenticatorData = sigData.getBytes().slice();\n          const clientDataJSON = sigData.getBytes().slice();\n      \n          const whatItReallySigned = new ser.SerialBuffer();\n          whatItReallySigned.pushArray(authenticatorData);\n          whatItReallySigned.pushArray(await this.sha256Digest(clientDataJSON));\n      \n          // Recover public key\n          const recoveredR1Key = r1Signature.recover(whatItReallySigned.asUint8Array());\n      \n          // Create actual R1 Pub Key\n          const waPublicKey = PublicKey.fromString(key);\n          const actualR1KeyBuffer = new ser.SerialBuffer({\n            array: waPublicKey.key.data.slice(0, 33),\n          });\n          const actualR1Key = Numeric.publicKeyToString({\n            type: Numeric.KeyType.r1,\n            data: actualR1KeyBuffer.asUint8Array(),\n          });\n      \n          return recoveredR1Key.toString() === actualR1Key && r1Signature.verify(digest, recoveredR1Key, false);\n        } catch (e) {\n          return false\n        }\n    }\n\n    public async checkIfKeysMatchTransaction ({\n        actor,\n        permission,\n        transaction,\n        signatures,\n        chainId\n    }: {\n        actor: string,\n        permission: string,\n        transaction: any,\n        signatures: string[],\n        chainId?: string\n    }) {\n        // Copy by value\n        transaction = JSON.parse(JSON.stringify(transaction))\n        signatures = JSON.parse(JSON.stringify(signatures))\n\n        // RSA / ETH WA\n        if (\n            transaction.actions.length === 1 &&\n            transaction.actions[0].account === 'webauthn' &&\n            transaction.actions[0].name === 'exec' &&\n            permission === 'active'\n        ) {\n            // Destructure\n            const webauthTransaction = transaction.actions[0].data.trx\n            console.dir(webauthTransaction, { depth: null })\n\n            if (webauthTransaction.actions.length !== 1) {\n                return false\n            }\n\n            // Check authorization\n            for (const action of webauthTransaction.actions) {\n                for (const authorization of action.authorization) {\n                    if (authorization.actor !== actor || authorization.permission !== permission) {\n                        return false\n                    }\n                }\n            }\n\n            const typeOfKey = transaction.actions[0].data.key.key[0]\n            if (typeOfKey === 'eth_public_key') {\n                return this.matchEthKeyToSignature({ transaction, actor })\n            } else if (typeOfKey === 'rsa_public_key') {\n                return this.matchRsaKeyToSignature({ transaction, actor })\n            } else {\n                console.log(`Key type ${typeOfKey} not supported`)\n                return false\n            }\n        // normal keys\n        } else {\n            // Check authorization\n            for (const action of transaction.actions) {\n                for (const authorization of action.authorization) {\n                    if (authorization.actor !== actor || authorization.permission !== permission) {\n                        return false\n                    }\n                }\n            }\n\n            // Get chain ID\n            if (!chainId) {\n                const info = await this.rpc.get_info()\n                chainId = info.chain_id\n            }\n        \n            // Serialize\n            transaction.context_free_actions = await this.serializeActions(transaction.context_free_actions || []),\n            transaction.actions = await this.serializeActions(transaction.actions)\n    \n            const serializedTransaction = this.serializeTransaction(transaction);\n            const serializedContextFreeData = this.serializeContextFreeData(transaction.context_free_data);\n    \n            const signature = Signature.fromString(signatures[0])\n            const signatureType = signature.getType()\n            const digest = digestFromSerializedData(chainId, serializedTransaction, serializedContextFreeData)\n        \n            // Check keys\n            const keys = await this.getAccountKeys(actor, permission)\n            const verified = keys.some((key: string) => {\n                const publicKey = PublicKey.fromString(key)\n    \n                if (signatureType === Numeric.KeyType.wa) {\n                    return this.matchWaKeyToSignature({\n                        signature: signature.toString(),\n                        key: publicKey.toString(),\n                        digest\n                    })\n                }  else if ([Numeric.KeyType.k1, Numeric.KeyType.r1].includes(signatureType)) {\n                    return signature.verify(digest, publicKey, false)\n                } else {\n                    console.log(`Key type ${signatureType} not supported`)\n                    return false\n                }\n            })\n            return verified\n        }\n    }\n} // Api\n\nexport class TransactionBuilder {\n    private api: Api;\n    private actions: ActionBuilder[] = [];\n    private contextFreeGroups: ContextFreeGroupCallback[] = [];\n    constructor(api: Api) {\n        this.api = api;\n    }\n\n    public with(accountName: string): ActionBuilder {\n        const actionBuilder = new ActionBuilder(this.api, accountName);\n        this.actions.push(actionBuilder);\n        return actionBuilder;\n    }\n\n    public associateContextFree(contextFreeGroup: ContextFreeGroupCallback): TransactionBuilder {\n        this.contextFreeGroups.push(contextFreeGroup);\n        return this;\n    }\n\n    public async send(config?: TransactConfig): Promise<PushTransactionArgs|ReadOnlyTransactResult|TransactResult> {\n        const contextFreeDataSet: Uint8Array[] = [];\n        const contextFreeActions: ser.SerializedAction[] = [];\n        const actions: ser.SerializedAction[] = this.actions.map((actionBuilder) => actionBuilder.serializedData as ser.SerializedAction);\n        await Promise.all(this.contextFreeGroups.map(\n            async (contextFreeCallback: ContextFreeGroupCallback) => {\n                const { action, contextFreeAction, contextFreeData } = contextFreeCallback({\n                    cfd: contextFreeDataSet.length,\n                    cfa: contextFreeActions.length\n                });\n                if (action) {\n                    actions.push(action);\n                }\n                if (contextFreeAction) {\n                    contextFreeActions.push(contextFreeAction);\n                }\n                if (contextFreeData) {\n                    contextFreeDataSet.push(contextFreeData);\n                }\n            }\n        ));\n        this.contextFreeGroups = [];\n        this.actions = [];\n        return await this.api.transact({\n            context_free_data: contextFreeDataSet,\n            context_free_actions: contextFreeActions,\n            actions\n        }, config);\n    }\n}\n\nexport class ActionBuilder {\n    private api: Api;\n    private readonly accountName: string;\n    public serializedData: ser.SerializedAction | undefined;\n\n    constructor(api: Api, accountName: string) {\n        this.api = api;\n        this.accountName = accountName;\n    }\n\n    public as(actorName: string | ser.Authorization[] = []): ActionSerializerType {\n        let authorization: ser.Authorization[] = [];\n        if (actorName && typeof actorName === 'string') {\n            authorization = [{ actor: actorName, permission: 'active'}];\n        } else {\n            authorization = actorName as ser.Authorization[];\n        }\n\n        return new ActionSerializer(this, this.api, this.accountName, authorization) as ActionSerializerType;\n    }\n}\n\nclass ActionSerializer implements ActionSerializerType {\n    constructor(\n        parent: ActionBuilder,\n        api: Api,\n        accountName: string,\n        authorization: ser.Authorization[],\n    ) {\n        const jsonAbi = api.cachedAbis.get(accountName);\n        if (!jsonAbi) {\n            throw new Error('ABI must be cached before using ActionBuilder, run api.getAbi()');\n        }\n        const types = ser.getTypesFromAbi(ser.createInitialTypes(), jsonAbi.abi);\n        const actions = new Map<string, ser.Type>();\n        for (const { name, type } of jsonAbi.abi.actions) {\n            actions.set(name, ser.getType(types, type));\n        }\n        actions.forEach((type, name) => {\n            Object.assign(this, {\n                [name]: (...args: any[]) => {\n                    const data: { [key: string]: any } = {};\n                    args.forEach((arg, index) => {\n                        const field = type.fields[index];\n                        data[field.name] = arg;\n                    });\n                    const serializedData = ser.serializeAction(\n                        { types, actions },\n                        accountName,\n                        name,\n                        authorization,\n                        data,\n                    );\n                    parent.serializedData = serializedData;\n                    return serializedData;\n                }\n            });\n        });\n    }\n}\n","/**\n * @module Javascript-API\n */\n\nimport { Abi, ProcessedAction, PushTransactionArgs } from '../rpc/types';\nimport { Anyvar, Authorization, Action, SerializedAction } from './serialize';\n\n/** Arguments to `getRequiredKeys` */\nexport interface AuthorityProviderArgs {\n    /** Transaction that needs to be signed */\n    transaction: any;\n\n    /** Public keys associated with the private keys that the `SignatureProvider` holds */\n    availableKeys: string[];\n}\n\n/** Get subset of `availableKeys` needed to meet authorities in `transaction` */\nexport interface AuthorityProvider {\n    /** Get subset of `availableKeys` needed to meet authorities in `transaction` */\n    getRequiredKeys: (args: AuthorityProviderArgs) => Promise<string[]>;\n}\n\n/** Retrieves raw ABIs for a specified accountName */\nexport interface AbiProvider {\n    /** Retrieve the BinaryAbi */\n    getRawAbi: (accountName: string) => Promise<BinaryAbi>;\n}\n\n/** Structure for the raw form of ABIs */\nexport interface BinaryAbi {\n    /** account which has deployed the ABI */\n    accountName: string;\n\n    /** abi in binary form */\n    abi: Uint8Array;\n}\n\n/** Holds a fetched abi */\nexport interface CachedAbi {\n    /** abi in binary form */\n    rawAbi: Uint8Array;\n\n    /** abi in structured form */\n    abi: Abi;\n}\n\n/** Arguments to `sign` */\nexport interface SignatureProviderArgs {\n    /** Chain transaction is for */\n    chainId: string;\n\n    /** Public keys associated with the private keys needed to sign the transaction */\n    requiredKeys: string[];\n\n    /** Transaction to sign */\n    serializedTransaction: Uint8Array;\n\n    /** Context-free data to sign */\n    serializedContextFreeData?: Uint8Array;\n\n    /** ABIs for all contracts with actions included in `serializedTransaction` */\n    abis?: BinaryAbi[];\n}\n\n/** Signs transactions */\nexport interface SignatureProvider {\n    /** Public keys associated with the private keys that the `SignatureProvider` holds */\n    getAvailableKeys: () => Promise<string[]>;\n\n    /** Sign a transaction */\n    sign: (args: SignatureProviderArgs) => Promise<PushTransactionArgs>;\n}\n\nexport interface ResourcePayer {\n    payer: string;\n    max_net_bytes: number;\n    max_cpu_us: number;\n    max_memory_bytes: number;\n}\n\nexport interface Transaction {\n    expiration?: string;\n    ref_block_num?: number;\n    ref_block_prefix?: number;\n    max_net_usage_words?: number;\n    max_cpu_usage_ms?: number;\n    delay_sec?: number;\n    context_free_actions?: Action[];\n    context_free_data?: Uint8Array[];\n    actions: Action[];\n    transaction_extensions?: [number, string][];\n    resource_payer?: ResourcePayer;\n}\n\n/** Optional transact configuration object */\nexport interface TransactConfig {\n    broadcast?: boolean;\n    sign?: boolean;\n    readOnlyTrx?: boolean;\n    returnFailureTraces?: boolean;\n    requiredKeys?: string[];\n    compression?: boolean;\n    blocksBehind?: number;\n    useLastIrreversible?: boolean;\n    expireSeconds?: number;\n}\n\nexport interface TransactionHeader {\n    expiration: string;\n    ref_block_num: number;\n    ref_block_prefix: number;\n}\n\nexport interface AccountDelta {\n    account: string;\n    delta: number;\n}\n\nexport interface AuthSequence {\n    account: string;\n    sequence: number;\n}\n\nexport interface ActionReceipt {\n    receiver: string;\n    act_digest: string;\n    global_sequence: number;\n    recv_sequence: number;\n    auth_sequence: [ string, number ][];\n    code_sequence: number;\n    abi_sequence: number;\n}\n\nexport interface ActionTrace {\n    action_ordinal: number;\n    creator_action_ordinal: number;\n    closest_unnotified_ancestor_action_ordinal: number;\n    receipt: ActionReceipt;\n    receiver: string;\n    act: ProcessedAction;\n    context_free: boolean;\n    elapsed: number;\n    console: string;\n    trx_id: string;\n    block_num: number;\n    block_time: string;\n    producer_block_id: string|null;\n    account_ram_deltas: AccountDelta[];\n    account_disk_deltas: AccountDelta[];\n    except: any;\n    error_code: number|null;\n    return_value?: any;\n    return_value_hex_data?: string;\n    return_value_data?: any;\n    inline_traces?: ActionTrace[];\n}\n\nexport interface TransactionReceiptHeader {\n    status: string;\n    cpu_usage_us: number;\n    net_usage_words: number;\n}\n\nexport interface TransactionTrace {\n    id: string;\n    block_num: number;\n    block_time: string;\n    producer_block_id: string|null;\n    receipt: TransactionReceiptHeader|null;\n    elapsed: number;\n    net_usage: number;\n    scheduled: boolean;\n    action_traces: ActionTrace[];\n    account_ram_delta: AccountDelta|null;\n    except: string|null;\n    error_code: number|null;\n    bill_to_accounts: string[];\n}\n\nexport interface TransactResult {\n    transaction_id?: string;\n    processed: TransactionTrace;\n}\n\n/** Optional query configuration object */\nexport interface QueryConfig {\n    sign?: boolean;\n    requiredKeys?: string[];\n    authorization?: Authorization[];\n}\n\n/**\n * A Query may be any of the following:\n * * string:                                           method\n * * [string, Query[]]:                                [method, filter]\n * * [string, Anyvar, Query[]]:                        [method, arg, filter]\n * * {method: string, arg?: Anyvar, filter?: Query[]}  explicit form\n */\nexport type Query =\n   string | [string, Query[]] | [string, Anyvar, Query[]] | { method: string, arg?: Anyvar, filter?: Query[] };\n\nexport type ContextFreeGroupCallback =\n    (index: {cfa: number, cfd: number}) => {\n        action?: SerializedAction;\n        contextFreeAction?: SerializedAction;\n        contextFreeData?: Uint8Array;\n    };\n\nexport interface ActionSerializerType {\n    [actionName: string]: any;\n};\n\n\n/** NEW: Optional transact configuration object */\nexport interface TransactConfig {\n    broadcast?: boolean;\n    sign?: boolean;\n    compression?: boolean;\n    blocksBehind?: number;\n    useLastIrreversible?: boolean;\n    expireSeconds?: number;\n    requiredKeys?: string[],\n    transactionHeader?: any\n}\n","/**\n * @module RPC-Error\n */\n\n/** Holds detailed error information */\nexport class RpcError extends Error {\n    /** Detailed error information */\n    public json: any;\n    public details: any;\n\n    constructor(json: any) {\n        if (json && json.error && json.error.details && json.error.details.length && json.error.details[0].message) {\n            super(json.error.details[0].message);\n            this.details = json.error.details;\n        } else if (json && json.processed && json.processed.except && json.processed.except.message) {\n            super(json.processed.except.message);\n            this.details = json.processed.except;\n        }else if (json && json.result && json.result.except && json.result.except.message) {\n            super(json.result.except.message);\n            this.details = json.result.except;\n        } else if(json) {\n            super(json.message);\n        } else {\n            super(json);\n        }\n        Object.setPrototypeOf(this, RpcError.prototype);\n        this.json = json;\n    }\n}\n","import type { JsonRpc } from './index'\nimport type { KycProvider, UserInfo, WaKey } from './types';\n\n\n/**\n * Checks blockchain for a list of kycproviders, and sorts through the ones that are blacklisted.\n * @returns An array of strings with valid kyc provider names.\n */\n export async function getValidKycProviders(this: JsonRpc) {\n    try {\n      const { rows } = await this.get_table_rows({\n        code: 'eosio.proton',\n        table: 'kycproviders',\n        scope: 'eosio.proton',\n      });\n      this.validKycProviders = rows.reduce((acc: string[], provider: KycProvider) => {\n        if (!provider.blisted) {\n          acc.push(provider.kyc_provider)\n        }\n\n        return acc\n      }, [])\n    } catch (e) {\n      throw new Error('Unable to get KYC Providers.')\n    }\n  }\n\n/**\n * Takes an account or a list of accounts and checks to make sure that they are light-verified\n * @param account This could be an array of user rows from the usersinfo table on the blockchain, or a singular string for an account name\n * @returns An object of the user data as pulled from the usersinfo table on the blockchain with an additional key, isLightKYCVerified (boolean)\n */\nexport async function isLightKYCVerified(\n  this: JsonRpc,\n  account: UserInfo[] | string\n) {\n    const lightKyc = [\n      \"firstname\",\n      \"lastname\",\n      \"birthdate\",\n      \"address\"\n    ];\n\n    if (account.length === 0) {\n      throw new Error('Please enter an account.');\n    }\n\n    if (this.validKycProviders.length === 0) {\n      await this.getValidKycProviders();\n    }\n\n    let users: UserInfo[] = [];\n\n    if (Array.isArray(account)) {\n      users = account;\n    } else if (typeof account === 'string') {\n      try {\n        const { rows } = await this.get_table_rows({\n            code: 'eosio.proton',\n            table: 'usersinfo',\n            scope: 'eosio.proton',\n            lower_bound: account,\n            upper_bound: account,\n        });\n        \n        users = rows;\n      } catch(e) {\n        throw new Error('Account not found!');\n      }\n    }\n    \n    const resultsWithKycStatus: UserInfo[] = users.map((user: UserInfo) => {\n      const levelsResult: string[] = user.kyc.reduce((acc: string[], kyc) => {\n        if (this.validKycProviders.indexOf(kyc.kyc_provider) >= 0) {\n          const result = kyc.kyc_level.split(',').map((kycItem: string) => kycItem.split(':')[1]);\n          acc = result.concat(acc);\n        }\n\n        return acc\n      }, []);\n\n      user.isLightKYCVerified = lightKyc.every(lightKycField => levelsResult.includes(lightKycField));\n\n      return user\n    })\n\n    return resultsWithKycStatus;\n};\n\nexport async function fetchCredentials(\n  this: JsonRpc,\n  actor: string\n): Promise<WaKey[]> {\n  const { rows: credentials }: { rows: WaKey[] } = await this.get_table_rows({\n    code: 'webauthn',\n    scope: 'webauthn',\n    table: 'credentials',\n    lower_bound: actor,\n    upper_bound: actor,\n    key_type: 'name',\n    index_position: 2,\n  });\n  return credentials;\n};\n  ","import { AbiProvider, AuthorityProvider, AuthorityProviderArgs, BinaryAbi, TransactResult } from '../api/types';\nimport { RpcError } from './error';\nimport { isLightKYCVerified, getValidKycProviders, fetchCredentials } from './proton'\nimport fetch from 'cross-fetch'\nimport { base64ToBinary, convertLegacyPublicKeys } from '../api/numeric';\nimport { Authorization } from '../api/serialize';\nimport { GetAccountResult, GetBlockHeaderStateResult, GetBlockInfoResult, GetBlockResult, GetInfoResult, GetActivatedProtocolFeaturesResult, GetAbiResult, GetRawCodeAndAbiResult, GetRawAbiResult, GetCodeResult, PushTransactionArgs, AbiBinToJsonResult, AbiJsonToBinResult, DBSizeGetResult, GetAccountsByAuthorizersResult, GetActivatedProtocolFeaturesParams, GetCodeHashResult, GetCurrencyStatsResult, GetProducerScheduleResult, GetProducersResult, GetScheduledTransactionsResult, GetTableByScopeResult, GetTableRowsResult, PackedTrx, ReadOnlyTransactResult, TraceApiGetBlockResult } from './types';\n\nconst arrayToHex = (data: Uint8Array): string => {\n    let result = '';\n    for (const x of data) {\n        result += ('00' + x.toString(16)).slice(-2);\n    }\n    return result;\n};\n\n/** Make RPC calls */\nexport class JsonRpc implements AuthorityProvider, AbiProvider {\n    public endpoints: string[];\n    public maxRetries: number = 3;\n    public currentEndpoint: string;\n    public validKycProviders: string[] = [];\n\n    /**\n     * @param args\n     *`fetch`:\n     * browsers: leave `null` or `undefined`\n     * node: provide an implementation\n     */\n    constructor(endpoints: string | string[]) {\n        endpoints = Array.isArray(endpoints) ? endpoints : [endpoints];\n        this.endpoints = endpoints.map(endpoint => endpoint.replace(/\\/$/, ''))\n        this.currentEndpoint = ''\n        this.nextEndpoint();\n    }\n\n    public nextEndpoint() {\n        if (this.endpoints.length) {\n            if (this.currentEndpoint) {\n                const removed = this.endpoints.shift();\n                this.endpoints = this.endpoints.concat(removed || []);\n            }\n\n            this.currentEndpoint = this.endpoints[0];\n        }\n    }\n\n    /** Post `body` to `endpoint + path`. Throws detailed error information in `RpcError` when available. */\n    public async fetch(path: string, body: any, currentRetries: number = 0): Promise<any> {\n        let response;\n        let json;\n        try {\n            response = await fetch(this.currentEndpoint + path, {\n                body: JSON.stringify(body),\n                method: 'POST',\n            });\n            json = await response.json();\n            if (json.processed && json.processed.except) {\n                throw new RpcError(json);\n            } else if (json.result && json.result.except) {\n                throw new RpcError(json);\n            }\n        } catch (e) {\n            console.log({\n                currentEndpoint: this.currentEndpoint,\n                endpoints: this.endpoints,\n                currentRetries: currentRetries,\n                error: e\n            })\n\n            if (this.endpoints.length > 1) {\n                this.nextEndpoint()\n                if (currentRetries < this.maxRetries)  {\n                    return this.fetch(path, body, ++currentRetries)\n                } else {\n                    e.isFetchError = true;\n                    throw new RpcError(e);\n                }\n            }\n        }\n\n        if (!(response && response.ok)) {\n            throw new RpcError(json);\n        }\n\n        // Check for synced\n        if (json && json.head_block_time) {\n            const headTime = new Date(json.head_block_time + 'Z').getTime()\n            const ct = new Date().getTime()\n            const secondsBehind = (ct - headTime) / 1000\n\n            if (secondsBehind > 30 && this.endpoints.length > 1) {\n                this.nextEndpoint()\n                if (currentRetries < this.maxRetries)  {\n                    return this.fetch(path, body, ++currentRetries)\n                }\n            }\n        }\n\n        return json;\n    }\n\n    /** Get from endpoint  */\n    public async get(path: string): Promise<any> {\n        const res = await fetch(path);\n\n        if (res.status >= 400) {\n            throw new Error(\"Bad response from server \" + res.status);\n        }\n\n        const data = await res.json()\n        return data\n    }\n\n    public async abi_bin_to_json(\n        code: string,\n        action: string,\n        binargs: string,\n    ): Promise<AbiBinToJsonResult> {\n        return await this.fetch('/v1/chain/abi_bin_to_json', { code, action, binargs });\n    }\n\n    public async abi_json_to_bin(\n        code: string,\n        action: string,\n        args: any[],\n    ): Promise<AbiJsonToBinResult> {\n        return await this.fetch('/v1/chain/abi_json_to_bin', { code, action, args });\n    }\n\n    /** Raw call to `/v1/chain/get_abi` */\n    public async get_abi(accountName: string): Promise<GetAbiResult> {\n        return await this.fetch('/v1/chain/get_abi', { account_name: accountName });\n    }\n\n    /** Raw call to `/v1/chain/get_account` */\n    public async get_account(accountName: string): Promise<GetAccountResult> {\n        return await this.fetch('/v1/chain/get_account', { account_name: accountName });\n    }\n\n    /** Raw call to `/v1/chain/get_accounts_by_authorizers` */\n    public async get_accounts_by_authorizers(accounts: Authorization[], keys: string[]): Promise<GetAccountsByAuthorizersResult> {\n        return await this.fetch('/v1/chain/get_accounts_by_authorizers', { accounts, keys });\n    }\n\n    /** Raw call to `get_activated_protocol_features` */\n    public async get_activated_protocol_features({\n        limit = 10,\n        search_by_block_num = false,\n        reverse = false,\n        lower_bound,\n        upper_bound,\n    }: GetActivatedProtocolFeaturesParams): Promise<GetActivatedProtocolFeaturesResult> {\n        return await this.fetch('/v1/chain/get_activated_protocol_features', { lower_bound, upper_bound, limit, search_by_block_num, reverse });\n    }\n\n    /** Raw call to `/v1/chain/get_block_header_state` */\n    public async get_block_header_state(blockNumOrId: number | string): Promise<GetBlockHeaderStateResult> {\n        return await this.fetch('/v1/chain/get_block_header_state', { block_num_or_id: blockNumOrId });\n    }\n\n    /** Raw call to `/v1/chain/get_block_info` */\n    public async get_block_info(blockNum: number): Promise<GetBlockInfoResult> {\n        return await this.fetch('/v1/chain/get_block_info', { block_num: blockNum });\n    }\n\n    /** Raw call to `/v1/chain/get_block` */\n    public async get_block(blockNumOrId: number | string): Promise<GetBlockResult> {\n        return await this.fetch('/v1/chain/get_block', { block_num_or_id: blockNumOrId });\n    }\n\n    /** Raw call to `/v1/chain/get_code` */\n    public async get_code(accountName: string): Promise<GetCodeResult> {\n        return await this.fetch('/v1/chain/get_code', {\n            account_name: accountName,\n            code_as_wasm: true\n        });\n    }\n\n    /** Raw call to `/v1/chain/get_code_hash` */\n    public async get_code_hash(accountName: string): Promise<GetCodeHashResult> {\n        return await this.fetch('/v1/chain/get_code_hash', { account_name: accountName });\n    }\n\n    /** Raw call to `/v1/chain/get_currency_balance` */\n    public async get_currency_balance(code: string, account: string, symbol: string): Promise<string[]> {\n        return await this.fetch('/v1/chain/get_currency_balance', { code, account, symbol });\n    }\n\n    /** Raw call to `/v1/chain/get_currency_stats` */\n    public async get_currency_stats(code: string, symbol: string): Promise<GetCurrencyStatsResult> {\n        return await this.fetch('/v1/chain/get_currency_stats', { code, symbol });\n    }\n\n    /** Raw call to `/v1/chain/get_info` */\n    public async get_info(): Promise<GetInfoResult> {\n        return await this.fetch('/v1/chain/get_info', {});\n    }\n\n    /** Raw call to `/v1/chain/get_producer_schedule` */\n    public async get_producer_schedule(): Promise<GetProducerScheduleResult> {\n        return await this.fetch('/v1/chain/get_producer_schedule', {});\n    }\n\n    /** Raw call to `/v1/chain/get_producers` */\n    public async get_producers(json = true, lowerBound = '', limit = 50): Promise<GetProducersResult> {\n        return await this.fetch('/v1/chain/get_producers', { json, lower_bound: lowerBound, limit });\n    }\n\n    /** Raw call to `/v1/chain/get_raw_code_and_abi` */\n    public async get_raw_code_and_abi(accountName: string): Promise<GetRawCodeAndAbiResult> {\n        return await this.fetch('/v1/chain/get_raw_code_and_abi', { account_name: accountName });\n    }\n\n    /** calls `/v1/chain/get_raw_code_and_abi` and pulls out unneeded raw wasm code */\n    public async getRawAbi(accountName: string): Promise<BinaryAbi> {\n        const rawAbi = await this.get_raw_abi(accountName);\n        const abi = base64ToBinary(rawAbi.abi);\n        return { accountName: rawAbi.account_name, abi };\n    }\n\n    /** Raw call to `/v1/chain/get_raw_abi` */\n    public async get_raw_abi(accountName: string): Promise<GetRawAbiResult> {\n        return await this.fetch('/v1/chain/get_raw_abi', { account_name: accountName });\n    }\n\n    /** Raw call to `/v1/chain/get_scheduled_transactions` */\n    public async get_scheduled_transactions(json = true, lowerBound = '', limit = 50): Promise<GetScheduledTransactionsResult> {\n        return await this.fetch('/v1/chain/get_scheduled_transactions', { json, lower_bound: lowerBound, limit });\n    }\n\n    /** Raw call to `/v1/chain/get_table_rows` */\n    public async get_table_rows({\n        json = true,\n        code,\n        scope,\n        table,\n        lower_bound = '',\n        upper_bound = '',\n        index_position = 1,\n        key_type = '',\n        limit = 10,\n        reverse = false,\n        show_payer = false,\n    }: any): Promise<GetTableRowsResult> {\n        return await this.fetch(\n            '/v1/chain/get_table_rows', {\n                json,\n                code,\n                scope,\n                table,\n                lower_bound,\n                upper_bound,\n                index_position,\n                key_type,\n                limit,\n                reverse,\n                show_payer,\n            });\n    }\n\n    /** Raw call to `/v1/chain/get_kv_table_rows` */\n    public async get_kv_table_rows({\n        json = true,\n        code,\n        table,\n        index_name,\n        encode_type = 'bytes',\n        index_value,\n        lower_bound,\n        upper_bound,\n        limit = 10,\n        reverse = false,\n        show_payer = false,\n    }: any): Promise<GetTableRowsResult> {\n        return await this.fetch(\n            '/v1/chain/get_kv_table_rows', {\n                json,\n                code,\n                table,\n                index_name,\n                encode_type,\n                index_value,\n                lower_bound,\n                upper_bound,\n                limit,\n                reverse,\n                show_payer,\n            });\n    }\n\n    /** Raw call to `/v1/chain/get_table_by_scope` */\n    public async get_table_by_scope({\n        code,\n        table,\n        lower_bound = '',\n        upper_bound = '',\n        limit = 10,\n    }: any): Promise<GetTableByScopeResult> {\n        return await this.fetch(\n            '/v1/chain/get_table_by_scope', {\n                code,\n                table,\n                lower_bound,\n                upper_bound,\n                limit,\n            });\n    }\n\n    /** Get subset of `availableKeys` needed to meet authorities in `transaction`. Implements `AuthorityProvider` */\n    public async getRequiredKeys(args: AuthorityProviderArgs): Promise<string[]> {\n        const requiredKeys = await this.fetch('/v1/chain/get_required_keys', {\n            transaction: args.transaction,\n            available_keys: args.availableKeys,\n        })\n        return convertLegacyPublicKeys(requiredKeys.required_keys);\n    }\n\n    /** Push a serialized transaction (replaced by send_transaction, but returned format has changed) */\n    public async push_transaction(\n        { signatures, compression = 0, serializedTransaction, serializedContextFreeData }: PushTransactionArgs\n    ): Promise<TransactResult> {\n            try {\n            return await this.fetch('/v1/chain/push_transaction', {\n                signatures,\n                compression,\n                packed_context_free_data: arrayToHex(serializedContextFreeData || new Uint8Array(0)),\n                packed_trx: arrayToHex(serializedTransaction),\n            });\n        } catch (e) {\n            if (e && e.json && e.json.error) {\n                const expired = e.json.error.name === 'expired_tx_exception'\n                if (expired) {\n                    e.json.error.message = 'Transaction Expired: Try Again'\n                    this.nextEndpoint()\n                }\n            }\n            throw e\n        }\n    }\n    \n    /** Raw call to `/v1/chain/push_ro_transaction */\n    public async push_ro_transaction({ signatures, compression = 0, serializedTransaction }: PushTransactionArgs,\n        returnFailureTraces: boolean = false): Promise<ReadOnlyTransactResult> {\n        return await this.fetch('/v1/chain/push_ro_transaction', {\n            transaction: {\n                signatures,\n                compression,\n                packed_context_free_data: arrayToHex(new Uint8Array(0)),\n                packed_trx: arrayToHex(serializedTransaction),\n            },\n            return_failure_traces: returnFailureTraces,\n        });\n    }\n\n    public async push_transactions(transactions: PushTransactionArgs[]): Promise<TransactResult[]> {\n        const packedTrxs: PackedTrx[] = transactions.map(({signatures, compression = 0, serializedTransaction, serializedContextFreeData }: PushTransactionArgs) => {\n            return {\n                signatures,\n                compression,\n                packed_context_free_data: arrayToHex(serializedContextFreeData || new Uint8Array(0)),\n                packed_trx: arrayToHex(serializedTransaction),\n            };\n        });\n        return await this.fetch('/v1/chain/push_transactions', packedTrxs );\n    }\n\n    /** Send a serialized transaction */\n    public async send_transaction(\n        { signatures, compression = 0, serializedTransaction, serializedContextFreeData }: PushTransactionArgs\n    ): Promise<TransactResult> {\n            return await this.fetch('/v1/chain/send_transaction', {\n            signatures,\n            compression,\n            packed_context_free_data: arrayToHex(serializedContextFreeData || new Uint8Array(0)),\n            packed_trx: arrayToHex(serializedTransaction),\n        });\n    }\n\n    /** Raw call to `/v1/db_size/get` */\n    public async db_size_get(): Promise<DBSizeGetResult> { return await this.fetch('/v1/db_size/get', {}); }\n\n    /** Raw call to `/v1/trace_api/get_block` */\n    public async trace_get_block(block_num: number): Promise<TraceApiGetBlockResult> {\n        return await this.fetch('/v1/trace_api/get_block', { block_num });\n    }\n\n    /** Raw call to `/v1/history/get_actions` */\n    public async history_get_actions(accountName: string, pos: number | null = null, offset: number | null = null) {\n        return await this.fetch('/v1/history/get_actions', { account_name: accountName, pos, offset });\n    }\n\n    /** Raw call to `/v1/history/get_transaction` */\n    public async history_get_transaction(id: string, blockNumHint: number | null = null) {\n        return await this.fetch('/v1/history/get_transaction', { id, block_num_hint: blockNumHint });\n    }\n\n    /** Raw call to `/v1/history/get_key_accounts` */\n    public async history_get_key_accounts(publicKey: string) {\n        return await this.fetch('/v1/history/get_key_accounts', { public_key: publicKey });\n    }\n\n    /** Raw call to `/v1/history/get_controlled_accounts` */\n    public async history_get_controlled_accounts(controllingAccount: string) {\n        return await this.fetch('/v1/history/get_controlled_accounts', { controlling_account: controllingAccount });\n    }\n\n    public isLightKYCVerified = isLightKYCVerified\n    public getValidKycProviders = getValidKycProviders\n    public fetchCredentials = fetchCredentials\n} // JsonRpc\n\nexport { RpcError } from './error';","/**\n * @module RPC-API-Methods\n * copyright defined in eosjs/LICENSE.txt\n */\n\nimport { TransactionHeader, TransactionReceiptHeader, TransactionTrace } from '../api/types';\nimport { Authorization } from '../api/serialize';\n\n/** Structured format for abis */\nexport interface Abi {\n    version: string;\n    types: { new_type_name: string, type: string }[];\n    structs: { name: string, base: string, fields: { name: string, type: string }[] }[];\n    actions: { name: string, type: string, ricardian_contract: string }[];\n    tables: { name: string, type: string, index_type: string, key_names: string[], key_types: string[] }[];\n    ricardian_clauses: { id: string, body: string }[];\n    error_messages: { error_code: number, error_msg: string }[];\n    abi_extensions: { tag: number, value: string }[];\n    variants?: { name: string, types: string[] }[];\n    action_results?: { name: string, result_type: string }[],\n    kv_tables?: { [key: string]: { type: string, primary_index: { name: string, type: string }, secondary_indices: { [key: string]: { type: string }}[] } }[],\n}\n\nexport interface BlockHeader {\n    timestamp: string;\n    producer: string;\n    confirmed: number;\n    previous: string;\n    transaction_mroot: string;\n    action_mroot: string;\n    schedule_version: number;\n    new_producers?: ProducerScheduleType;\n    header_extensions: [number, string][];\n}\n\nexport interface SignedBlockHeader extends BlockHeader {\n    producer_signature: string;\n}\n\nexport interface AccountResourceInfo {\n    used: number;\n    available: number;\n    max: number;\n    last_usage_update_time?: string;\n    current_used?: number;\n}\n\nexport interface ResourceOverview {\n    owner: string;\n    ram_bytes: number;\n    net_weight: string;\n    cpu_weight: string;\n}\n\nexport interface ResourceDelegation {\n    from: string;\n    to: string;\n    net_weight: string;\n    cpu_weight: string;\n}\n\nexport interface RefundRequest {\n    owner: string;\n    request_time: string;\n    net_amount: string;\n    cpu_amount: string;\n}\n\nexport interface VoterInfo {\n    owner: string;\n    proxy: string;\n    producers: string[];\n    staked: number;\n    last_vote_weight: string;\n    proxied_vote_weight: string;\n    is_proxy: number;\n    flags1: number;\n    reserved2: number;\n    reserved3: string;\n}\n\nexport interface RexBalance {\n    version: number;\n    owner: string;\n    vote_stake: string;\n    rex_balance: string;\n    matured_rex: number;\n    rex_maturities: any;\n}\n\nexport interface Authority {\n    threshold: number;\n    keys: KeyWeight[];\n    accounts: PermissionLevelWeight[];\n    waits: WaitWeight[];\n}\n\nexport interface KeyWeight {\n    key: string;\n    weight: number;\n}\n\nexport interface Permission {\n    perm_name: string;\n    parent: string;\n    required_auth: Authority;\n}\n\nexport interface PermissionLevel {\n    actor: string;\n    permission: string;\n}\n\nexport interface PermissionLevelWeight {\n    permission: PermissionLevel;\n    weight: number;\n}\n\nexport interface WaitWeight {\n    wait_sec: number;\n    weight: number;\n}\n\n/** Return value of `/v1/chain/abi_bin_to_json` */\nexport interface AbiBinToJsonResult {\n    args: 'any'\n}\n\n/** Return value of `/v1/chain/abi_json_to_bin` */\nexport interface AbiJsonToBinResult {\n    binargs: 'string'\n}\n\n/** Return value of `/v1/chain/get_abi` */\nexport interface GetAbiResult {\n    account_name: string;\n    abi: Abi;\n}\n\nexport interface GetAccountResult {\n    account_name: string; // \"tippedtipped\"\n    head_block_num: number | string; // 195121185\n    head_block_time: string; // 2021-07-19T18:45:41.500\n    privileged: boolean; // false\n    last_code_update: string; // \"2020-01-22T16:53:01.000\"\n    created: string; // \"2019-03-25T09:31:53.500\"\n    core_liquid_balance: string; // \"1305.2775 XPR\"\n    ram_quota: number | string; // 7231544\n    net_weight: number | string; // 644502\n    cpu_weight: number | string; // 4545454278\n    net_limit: Limit;\n    cpu_limit: Limit;\n    ram_usage: number | string; // 400\n    permissions: PermissionElement[];\n    total_resources: {\n        owner: string; // \"otctest\"\n        net_weight: string; // \"1.0000 SYS\"\n        cpu_weight: string; // \"1.0000 SYS\"\n        ram_bytes: number | string; // 300\n    };\n    self_delegated_bandwidth: {\n        from: string; // \"otctest\"\n        to: string; // \"tippedtipped\"\n        net_weight: string; // \"1.0000 SYS\"\n        cpu_weight: string; // \"1.0000 SYS\"\n    };\n    refund_request?: {\n        cpu_amount: string; // \"1.0000 SYS\"\n        net_amount: string; // \"1.0000 SYS\"\n        request_time: string; // \"2019-03-25T09:31:53.500\"\n    };\n    voter_info?: VoterInfo;\n    rex_info?: RexInfo;\n}\n\nexport interface AccountResult {\n    account_name: string;\n    permission_name: string;\n    authorizing_account?: Authorization;\n    authorizing_key?: string;\n    weight: number;\n    threshold: number;\n}\n\n/** Return value of `/v1/chain/get_accounts_by_authorizers` */\nexport interface GetAccountsByAuthorizersResult {\n    accounts: AccountResult[];\n}\n\nexport interface GetActivatedProtocolFeaturesParams {\n    limit?: number;\n    search_by_block_num?: boolean;\n    reverse?: boolean;\n    lower_bound?: number;\n    upper_bound?: number;\n}\n\nexport interface ActivatedProtocolFeature {\n    feature_digest: string;\n    activation_ordinal: number;\n    activation_block_num: number;\n    description_digest: string;\n    dependencies: string[];\n    protocol_feature_type: string;\n    specification: { name: string, value: string, };\n}\n\n/** Return value of `/v1/chain/get_activated_protocol_features` */\nexport interface GetActivatedProtocolFeaturesResult {\n    activated_protocol_features: ActivatedProtocolFeature[];\n    more?: number;\n}\n\n/** Return value of `/v1/chain/get_block_info` */\nexport interface GetBlockInfoResult {\n    timestamp: string;\n    producer: string;\n    confirmed: number;\n    previous: string;\n    transaction_mroot: string;\n    action_mroot: string;\n    schedule_version: number;\n    producer_signature: string;\n    id: string;\n    block_num: number;\n    ref_block_num: number;\n    ref_block_prefix: number;\n}\n\n/** Returned action from nodeos, data is optional */\nexport interface ProcessedAction {\n    account: string;\n    name: string;\n    authorization: Authorization[];\n    data?: any;\n    hex_data?: string;\n}\nexport interface ProcessedTransaction {\n    expiration?: string;\n    ref_block_num?: number;\n    ref_block_prefix?: number;\n    max_net_usage_words?: number;\n    max_cpu_usage_ms?: number;\n    delay_sec?: number;\n    context_free_actions?: ProcessedAction[];\n    context_free_data?: Uint8Array[];\n    actions: ProcessedAction[];\n    transaction_extensions?: [number, string][];\n}\n\nexport interface PackedTransaction {\n    id: string;\n    signatures: string[];\n    compression: number|string;\n    packed_context_free_data: string;\n    context_free_data: string[];\n    packed_trx: string;\n    transaction: ProcessedTransaction;\n}\n\nexport interface PackedTrx {\n    signatures: string[];\n    compression: number;\n    packed_trx: string;\n    packed_context_free_data: string;\n}\n\nexport interface TransactionReceipt extends TransactionReceiptHeader {\n    trx: PackedTransaction;\n}\n\n/** Return value of `/v1/chain/get_block` */\nexport interface GetBlockResult {\n    timestamp: string;\n    producer: string;\n    confirmed: number;\n    previous: string;\n    transaction_mroot: string;\n    action_mroot: string;\n    schedule_version: number;\n    new_producers: ProducerScheduleType|null;\n    producer_signature: string;\n    transactions: any;\n    id: string;\n    block_num: number;\n    ref_block_prefix: number;\n}\n\n/** Used to calculate TAPoS fields in transactions */\nexport interface BlockTaposInfo {\n    block_num: number;\n    id: string;\n    timestamp?: string;\n    header?: BlockHeader;\n}\n\nexport interface ProducerKey {\n    producer_name: string;\n    block_signing_key: string;\n}\n\nexport interface BlockSigningAuthority {\n    threshold: number;\n    keys: KeyWeight[];\n}\n\nexport interface ProducerAuthority {\n    producer_name: string;\n    authority: [ number|string, BlockSigningAuthority];\n};\n\nexport interface ProducerAuthoritySchedule {\n    version: number;\n    producers: ProducerAuthority[];\n}\n\nexport interface ProducerScheduleType {\n    version: number;\n    producers: ProducerKey[];\n}\n\nexport interface ScheduleInfo {\n    schedule_lib_num: number;\n    schedule_hash: string;\n    schedule: ProducerScheduleType;\n}\n\nexport interface IncrementalMerkle {\n    _active_nodes: string[];\n    _node_count: number;\n}\n\nexport interface ProtocolFeatureActivationSet {\n    protocol_features: string[]\n}\n\nexport interface SecurityGroupInfo {\n    version: number;\n    participants: string[];\n}\n\nexport interface StateExtension {\n    security_group_info: SecurityGroupInfo\n}\n\n/** Return value of `/v1/chain/get_block_header_state` */\nexport interface GetBlockHeaderStateResult {\n    id: string;\n    header: SignedBlockHeader;\n    pending_schedule: ScheduleInfo;\n    activated_protocol_features: ProtocolFeatureActivationSet;\n    additional_signatures: string[];\n    block_num: number;\n    dpos_proposed_irreversible_blocknum: number;\n    dpos_irreversible_blocknum: number;\n    active_schedule: ProducerAuthoritySchedule;\n    blockroot_merkle: IncrementalMerkle;\n    producer_to_last_produced: Map<string, number>;\n    producer_to_last_implied_irb: Map<string, number>;\n    // valid_block_signing_authority: BlockSigningAuthority;\n    valid_block_signing_authority: any;\n    confirm_count: number[];\n    state_extension: [number, StateExtension];\n}\n\n/** Subset of `GetBlockHeaderStateResult` used to calculate TAPoS fields in transactions */\nexport interface BlockHeaderStateTaposInfo {\n    block_num: number;\n    id: string;\n    header: SignedBlockHeader;\n}\n\n/** Return value of `/v1/chain/get_code` */\nexport interface GetCodeResult {\n    account_name: string;\n    code_hash: string;\n    wast: string;\n    wasm: string;\n    abi: Abi;\n}\n\n/** Return value of `/v1/chain/get_code_hash` */\nexport interface GetCodeHashResult {\n    account_name: string;\n    code_hash: string;\n}\n\n/** Return value of `/v1/chain/get_currency_stats` */\nexport interface GetCurrencyStatsResult {\n    [key: string]: {\n        supply: string;\n        max_supply: string;\n        issuer: string;\n    }\n}\n\n/** Return value of `/v1/chain/get_info` */\nexport interface GetInfoResult {\n    server_version: string;\n    chain_id: string;\n    head_block_num: number;\n    last_irreversible_block_num: number;\n    last_irreversible_block_id: string;\n    last_irreversible_block_time?: string;\n    head_block_id: string;\n    head_block_time: string;\n    head_block_producer: string;\n    virtual_block_cpu_limit: number;\n    virtual_block_net_limit: number;\n    block_cpu_limit: number;\n    block_net_limit: number;\n    server_version_string?: string;\n    fork_db_head_block_num?: number;\n    fork_db_head_block_id?: string;\n    server_full_version_string?: string;\n    first_block_num?: number;\n}\n\n/** Return value of /v1/chain/get_producer_schedule */\nexport interface GetProducerScheduleResult {\n    active: ProducerAuthoritySchedule|null;\n    pending: ProducerAuthoritySchedule|null;\n    proposed: ProducerAuthoritySchedule|null;\n}\n\nexport interface ProducerDetails {\n    owner: string;\n    producer_authority?: any[];\n    url: string;\n    is_active?: number;\n    total_votes: string;\n    producer_key: string;\n    unpaid_blocks?: number;\n    last_claim_time?: string;\n    location?: number;\n}\n\n/** Return value of `/v1/chain/get_producers` */\nexport interface GetProducersResult {\n    rows: ProducerDetails[];\n    total_producer_vote_weight: string;\n    more: string;\n}\n\n/** Return value of `/v1/chain/get_raw_code_and_abi` */\nexport interface GetRawCodeAndAbiResult {\n    account_name: string;\n    wasm: string;\n    abi: string;\n}\n\n/** Return value of `/v1/chain/get_raw_abi` */\nexport interface GetRawAbiResult {\n    account_name: string;\n    code_hash: string;\n    abi_hash: string;\n    abi: string;\n}\n\nexport interface DeferredTransaction extends ProcessedTransaction {\n    deferred_transaction_generation?: {\n        sender_trx_id: string;\n        sender_id: string;\n        sender: string;\n    }\n}\n\nexport interface GeneratedTransaction {\n    trx_id: string;\n    sender: string;\n    sender_id: string;\n    payer: string;\n    delay_until: string;\n    expiration: string;\n    published: string;\n    packed_trx?: string[];\n    transaction?: DeferredTransaction[]\n}\n\n/** Return value of `/v1/chain/get_scheduled_transactions` */\nexport interface GetScheduledTransactionsResult {\n    transactions: GeneratedTransaction[];\n    more: string;\n}\n\n/** Return value of `/v1/chain/get_table_rows` and `/v1/chain/get_kv_table_rows` */\nexport interface GetTableRowsResult {\n    rows: any[];\n    more: boolean;\n    next_key: string;\n    next_key_bytes: string;\n}\n\nexport interface GetTableByScopeResultRow {\n    code: string;\n    scope: string;\n    table: string;\n    payer: string;\n    count: number;\n}\n\n/** Return value of `/v1/chain/get_table_by_scope` */\nexport interface GetTableByScopeResult {\n    rows: GetTableByScopeResultRow[];\n    more: string;\n}\n\n/** Arguments for `push_transaction` */\nexport interface PushTransactionArgs {\n    signatures: string[];\n    compression?: number;\n    serializedTransaction: Uint8Array;\n    serializedContextFreeData?: Uint8Array;\n    transactionHeader?: TransactionHeader\n}\n\n/** Return value of `/v1/chain/push_ro_transaction` */\nexport interface ReadOnlyTransactResult {\n    head_block_num: number;\n    head_block_id: string;\n    last_irreversible_block_num: number;\n    last_irreversible_block_id: string;\n    code_hash: string;\n    pending_transactions: string[];\n    result: TransactionTrace;\n}\n\nexport interface DBSizeIndexCount {\n    index: string;\n    row_count: number;\n}\n\n/** Return value of `/v1/db_size/get` */\nexport interface DBSizeGetResult {\n    free_bytes: number;\n    used_bytes: number;\n    size: number;\n    indices: DBSizeIndexCount[];\n}\n\nexport interface TraceApiAction {\n    global_sequence: number;\n    receiver: string;\n    account: string;\n    action: string;\n    authorization: Authorization[];\n    data: any;\n    return_value: any;\n}\n\nexport interface TraceApiTransactionHeader {\n    expiration: string;\n    ref_block_num: number;\n    ref_block_prefix: number;\n    max_net_usage_words: number;\n    max_cpu_usage_ms: number;\n    delay_sec: number;\n}\n\nexport interface TraceApiTransaction {\n    id: string;\n    actions: TraceApiAction[];\n    status?: string;\n    cpu_usage_us?: number;\n    net_usage_words?: number;\n    signatures?: string[];\n    transaction_header?: TraceApiTransactionHeader,\n    bill_to_accounts: string[]\n}\n\n/** Return value of `/v1/trace_api/get_block` */\nexport interface TraceApiGetBlockResult {\n    id: string;\n    number: number;\n    previous_id: string;\n    status: string;\n    timestamp: string;\n    producer: string;\n    transaction_mroot?: string;\n    action_mroot?: string;\n    schedule_version: number;\n    transactions: TraceApiTransaction;\n}\n\nexport interface OrderedActionResult {\n    global_action_seq: number;\n    account_action_seq: number;\n    block_num: number;\n    block_time: string;\n    action_trace: any;\n}\n\n/** Return value of `/v1/history/get_actions` */\nexport interface GetActionsResult {\n    actions: OrderedActionResult[];\n    last_irreversible_block: number;\n    time_limit_exceeded_error?: boolean;\n}\n\n/** Return value of `/v1/history/get_transaction` */\nexport interface GetTransactionResult {\n    id: string;\n    trx: any;\n    block_time: string;\n    block_num: number;\n    last_irreversible_block: number;\n    traces: any[];\n}\n\n/** Return value of `/v1/history/get_key_accounts` */\nexport interface GetKeyAccountsResult {\n    account_names: string[];\n}\n\n/** Return value of `/v1/history/get_controlled_accounts` */\nexport interface GetControlledAccountsResult {\n    controlled_accounts: string[];\n}\n\nexport interface RexInfo {\n    matured_rex: number // 6809\n    owner: string // \"eoscannonchn\"\n    rex_balance: string // \"0.6809 REX\"\n    rex_maturities: any[]\n    version: number // 0\n    vote_stake: string // \"0.0000 XPR\"\n}\n\nexport interface Limit {\n    used: number | string; // 91844\n    available: number | string; // 316557\n    max: number | string; // 408401\n    last_usage_update_time: string; // \"2021-07-19T18:35:02.000\"\n    current_used: number | string; // 91164\n}\n\nexport interface PermissionElement {\n    perm_name: string; // \"active\"\n    parent: string; // \"owner\"\n    required_auth: RequiredAuth;\n}\n\nexport interface RequiredAuth {\n    threshold: number; // 1\n    keys: {\n        key: string; // \"EOS8LoR1sRFodQ2J8PYcEbocC8oWMjmv7VfyzsfNGfwXEDNMft1ej\"\n        weight: number; // 1\n    }[];\n    accounts: {\n        permission: {\n            actor: string; // \"tippedtipped\"\n            permission: string; // \"active\"\n        };\n        weight: number; // 1\n    }[];\n    waits: {\n        wait_sec: number; // 10\n        weight: number; // 1\n    }[];\n}\n\n/** PROTON */\nexport type KycInfo = {\n    kyc_provider: string;\n    kyc_level: string;\n    kyc_date: number;\n}\n\nexport type KycProvider = {\n    blisted: number;\n    desc: string;\n    iconurl: string;\n    kyc_provider: string;\n    name: string;\n    url: string;\n}\n\nexport type UserInfo = {\n    acc: string;\n    avatar: string;\n    date: number;\n    aacts: any[]; \n    ac: any[];\n    isLightKYCVerified?: boolean;\n    kyc: KycInfo[];\n    name: string;\n    raccs: any[];\n    verified: number;\n    verifiedon: number;\n    verifier: string;\n}\n\n\nexport interface RsaKey {\n    modulus: string;\n    exponent: string;\n}\n\nexport interface WaKey {\n    index?: number;\n    account?: string;\n    key_name?: string;\n    key: {\n      key: [\n        string,\n        string | RsaKey\n      ];\n      user_presence: number;\n      rpid: string;\n    };\n    nonce?: number;\n    fullKey: string;\n    isAccountPerm?: boolean;\n    isEcc?: boolean;\n    isRsa?: boolean;\n    isEth?: boolean;\n    credential_id?: string;\n  }","/**\n * @module WebAuthn-Sig\n */\n// copyright defined in eosjs/LICENSE.txt\n\nimport { SignatureProvider, SignatureProviderArgs } from '../api/types';\nimport * as ser from '../api/serialize';\nimport * as numeric from '../api/numeric';\nimport { ec } from 'elliptic';\n\n/** Signs transactions using WebAuthn */\nexport class WebAuthnSignatureProvider implements SignatureProvider {\n    /** Map public key to credential ID (hex). User must populate this. */\n    public keys = new Map<string, string>();\n\n    /** Public keys that the `SignatureProvider` holds */\n    public async getAvailableKeys() {\n        return Array.from(this.keys.keys());\n    }\n\n    /** Sign a transaction */\n    public async sign(\n        { chainId, requiredKeys, serializedTransaction, serializedContextFreeData }: SignatureProviderArgs,\n    ) {\n        const signBuf = new ser.SerialBuffer();\n        signBuf.pushArray(ser.hexToUint8Array(chainId));\n        signBuf.pushArray(serializedTransaction);\n        if (serializedContextFreeData) {\n            signBuf.pushArray(new Uint8Array(await crypto.subtle.digest('SHA-256', serializedContextFreeData.buffer)));\n        } else {\n            signBuf.pushArray(new Uint8Array(32));\n        }\n        const digest = new Uint8Array(await crypto.subtle.digest('SHA-256', signBuf.asUint8Array().slice().buffer));\n\n        const signatures = [] as string[];\n        for (const key of requiredKeys) {\n            const id = ser.hexToUint8Array(this.keys.get(key) as string);\n            const assertion = await (navigator as any).credentials.get({\n                publicKey: {\n                    timeout: 60000,\n                    allowCredentials: [{\n                        id,\n                        type: 'public-key',\n                    }],\n                    challenge: digest.buffer,\n                },\n            });\n            const e = new ec('p256') as any; // https://github.com/indutny/elliptic/pull/232\n            const pubKey = e.keyFromPublic(numeric.stringToPublicKey(key).data.subarray(0, 33)).getPublic();\n\n            const fixup = (x: Uint8Array) => {\n                const a = Array.from(x);\n                while (a.length < 32) {\n                    a.unshift(0);\n                }\n                while (a.length > 32) {\n                    if (a.shift() !== 0) {\n                        throw new Error('Signature has an r or s that is too big');\n                    }\n                }\n                return new Uint8Array(a);\n            };\n\n            const der = new ser.SerialBuffer({ array: new Uint8Array(assertion.response.signature) });\n            if (der.get() !== 0x30) {\n                throw new Error('Signature missing DER prefix');\n            }\n            if (der.get() !== der.array.length - 2) {\n                throw new Error('Signature has bad length');\n            }\n            if (der.get() !== 0x02) {\n                throw new Error('Signature has bad r marker');\n            }\n            const r = fixup(der.getUint8Array(der.get()));\n            if (der.get() !== 0x02) {\n                throw new Error('Signature has bad s marker');\n            }\n            const s = fixup(der.getUint8Array(der.get()));\n\n            const whatItReallySigned = new ser.SerialBuffer();\n            whatItReallySigned.pushArray(new Uint8Array(assertion.response.authenticatorData));\n            whatItReallySigned.pushArray(new Uint8Array(\n                await crypto.subtle.digest('SHA-256', assertion.response.clientDataJSON)));\n            const hash = new Uint8Array(\n                await crypto.subtle.digest('SHA-256', whatItReallySigned.asUint8Array().slice()));\n            const recid = e.getKeyRecoveryParam(hash, new Uint8Array(assertion.response.signature), pubKey);\n\n            const sigData = new ser.SerialBuffer();\n            sigData.push(recid + 27 + 4);\n            sigData.pushArray(r);\n            sigData.pushArray(s);\n            sigData.pushBytes(new Uint8Array(assertion.response.authenticatorData));\n            sigData.pushBytes(new Uint8Array(assertion.response.clientDataJSON));\n\n            const sig = numeric.signatureToString({\n                type: numeric.KeyType.wa,\n                data: sigData.asUint8Array().slice(),\n            });\n            signatures.push(sig);\n        }\n        return { signatures, serializedTransaction, serializedContextFreeData };\n    }\n}\n","import { Api } from './api';\n\nimport * as ApiInterfaces from './api/types';\n\nimport { JsonRpc, RpcError } from './rpc';\nimport * as RpcInterfaces from './rpc/types';\n\nimport * as Numeric from './api/numeric';\nimport * as Serialize from './api/serialize';\n\nimport { JsSignatureProvider, digestFromSerializedData } from './cryptography/jsSignatureProvider';\nimport { WebAuthnSignatureProvider } from './cryptography/webauthn'\n\nimport * as Key from './cryptography/key'\nimport { sha256 } from './cryptography/conversions'\n\nexport {\n  Api,\n  ApiInterfaces,\n  JsonRpc,\n  Numeric,\n  RpcInterfaces,\n  RpcError,\n  Serialize,\n  JsSignatureProvider,\n  WebAuthnSignatureProvider,\n  digestFromSerializedData,\n  Key,\n  sha256,\n};\n\nexport default {\n  Api,\n  ApiInterfaces,\n  JsonRpc,\n  Numeric,\n  RpcInterfaces,\n  RpcError,\n  Serialize,\n  JsSignatureProvider,\n  Key,\n  sha256,\n  WebAuthnSignatureProvider\n};\n"],"names":["undefined","ripemd160","RIPEMD160","hash","base58Chars","base64Chars","create_base58_map","base58M","Array","fill","i","length","charCodeAt","base58Map","create_base64_map","base64M","base64Map","isNegative","bignum","negate","carry","x","decimalToBinary","size","s","result","Uint8Array","srcDigit","Error","j","signedDecimalToBinary","negative","substr","binaryToDecimal","minDigits","push","reverse","String","fromCharCode","signedBinaryToDecimal","slice","base58ToBinaryVarSize","ch","base58ToBinary","binaryToBase58","byte","base64ToBinary","len","groups","bytes","group","digit0","digit1","digit2","digit3","KeyType","publicKeyDataSize","privateKeyDataSize","signatureDataSize","digestSuffixRipemd160","data","suffix","d","stringToKey","type","whole","buffer","digest","keyToString","key","prefix","stringToPublicKey","k1","r1","wa","publicKeyToLegacyString","publicKeyToString","convertLegacyPublicKey","convertLegacyPublicKeys","keys","map","stringToPrivateKey","privateKeyToLegacyString","forEach","sha256","update","privateKeyToString","stringToSignature","signatureToString","signature","SerializerState","options","skippedBinaryExtension","SerialBuffer","array","textEncoder","textDecoder","readPos","TextEncoder","TextDecoder","reserve","l","Math","ceil","newArray","set","haveReadData","restartRead","asUint8Array","byteOffset","pushArray","v","get","pushUint8ArrayChecked","getUint8Array","skip","pushUint16","getUint16","pushUint32","getUint32","pushNumberAsUint64","floor","getUint64AsNumber","low","high","pushVaruint32","getVaruint32","bit","b","pushVarint32","getVarint32","pushFloat32","Float32Array","getFloat32","pushFloat64","Float64Array","getFloat64","pushName","regex","RegExp","test","charToSymbol","c","a","getName","endsWith","pushBytes","getBytes","pushString","encode","getString","decode","pushSymbolCode","name","getSymbolCode","pushSymbol","precision","getSymbol","pushAsset","trim","pos","amount","foundDigit","numeric","getAsset","pushPublicKey","getPublicKey","begin","pushPrivateKey","getPrivateKey","pushSignature","getSignature","supportedAbiVersion","version","startsWith","checkDateParse","date","Date","parse","Number","isNaN","dateToTimePoint","round","timePointToDate","us","toISOString","dateToTimePointSec","timePointSecToDate","sec","dateToBlockTimestamp","blockTimestampToDate","slot","stringToSymbol","m","match","symbolToString","arrayToHex","toString","toUpperCase","hexToUint8Array","hex","parseInt","serializeUnknown","_","__","deserializeUnknown","serializeStruct","state","allowExtensions","JSON","stringify","base","serialize","fields","field","extensionOf","deserializeStruct","deserialize","serializeVariant","isArray","findIndex","deserializeVariant","serializeArray","item","arrayOf","deserializeArray","serializeOptional","optionalOf","deserializeOptional","serializeExtension","deserializeExtension","serializeObject","entries","Object","value","keyType","dataType","deserializeObject","serializePair","deserializePair","createType","attrs","aliasOfName","baseName","checkRange","orig","converted","createInitialTypes","Map","bool","uint8","int8","uint16","int16","uint32","uint64","int64","int32","varuint32","varint32","uint128","int128","float32","float64","float128","bytesAsUint8Array","string","time_point","time_point_sec","block_timestamp_type","symbol_code","symbol","asset","checksum160","checksum256","checksum512","public_key","private_key","typeName","createAbiTypes","initialTypes","createTransactionExtensionTypes","createTransactionTypes","getType","types","getTypesFromAbi","abi","new_type_name","structs","n","variants","t","reverseHex","h","transactionHeader","refBlock","expireSeconds","timestamp","header","id","expiration","ref_block_num","block_num","ref_block_prefix","serializeActionData","contract","account","action","actions","serializeAction","authorization","deserializeActionData","deserializeAction","serializeAnyvar","anyvar","def","anyvarDefs","null_t","any_array","hasOwnProperty","any_object","index","deserializeAnyvar","defIndex","anyvarDefsByIndex","useShortForm","deserializeAnyvarShort","serializeAnyObject","obj","deserializeAnyObject","serializeAnyArray","arr","deserializeAnyArray","addAdditionalTypes","additionalTypes","serializeQuery","query","method","arg","filter","q","b64tob64u","replace","constructElliptic","EC","PublicKey","ec","fromString","publicKeyStr","fromElliptic","publicKey","getPublic","getX","toArray","y","getY","concat","toLegacyString","toElliptic","keyPair","pub","Buffer","from","isValid","ellipticPublicKey","validationObj","validate","BN","require","Signature","sig","ellipticSig","recoveryParam","r","eosioRecoveryParam","sigData","lengthOfR","lengthOfS","ellipticRecoveryBitField","toBinary","verify","shouldHash","encoding","ellipticSignature","recover","recoveredPublicKey","recoverPubKey","ellipticKPub","keyFromPublic","PrivateKey","privKey","getPrivate","toArrayLike","keyString","privateKey","keyFromPrivate","ellipticPrivateKey","sign","tries","isCanonical","constructSignature","canonical","pers","generateKeyPair","secureEnv","ellipticKeyPair","genKeyPair","ecOptions","defaultEc","digestFromSerializedData","chainId","serializedTransaction","serializedContextFreeData","e","signBuf","JsSignatureProvider","privateKeys","availableKeys","k","priv","privElliptic","pubStr","getAvailableKeys","requiredKeys","signatures","Api","args","rpc","authorityProvider","abiProvider","signatureProvider","abiTypes","transactionTypes","contracts","cachedAbis","crypto","recoverPersonalSignature","transactionExtensions","ser","window","global","getCrypto","getRecoverPersonalSignature","rawAbiToJson","rawAbi","jsonToRawAbi","jsonAbi","getCachedAbi","accountName","reload","getRawAbi","cachedAbi","message","getAbi","getTransactionAbis","transaction","context_free_actions","accounts","uniqueAccounts","Set","actionPromises","Promise","all","getContract","serializeTransaction","max_net_usage_words","max_cpu_usage_ms","delay_sec","transaction_extensions","serializeContextFreeData","contextFreeData","deserializeTransaction","serializeTransactionExtensions","resource_payer","extensionBuffer","deserializeTransactionExtensions","extensionData","transactionExtension","find","extension","deserializedObj","max_net_bytes","max_cpu_us","max_memory_bytes","deleteTransactionExtensionObjects","serializeActions","deserializeActions","deserializeActionsSync","deserializedActions","deserializeTransactionWithActions","deserializedTransaction","deserializedCFActions","deflateSerializedArray","serializedArray","deflate","level","inflateSerializedArray","compressedSerializedArray","inflate","transact","broadcast","readOnlyTrx","returnFailureTraces","compression","blocksBehind","useLastIrreversible","get_info","info","generateTapos","hasRequiredTaposFields","abis","context_free_data","pushTransactionArgs","getRequiredKeys","chain_id","pushCompressedSignedTransaction","pushSignedTransaction","transactWithDelay","params","delay","wait","ms","resolve","setTimeout","success","short","tryRefBlockFromGetInfo","queryBuffer","signResponse","send_transaction","response","returnBuffer","processed","action_traces","return_value","push_ro_transaction","push_transaction","compressedSerializedTransaction","compressedSerializedContextFreeData","block","taposBlockNumber","head_block_num","last_irreversible_block_num","tryGetBlockInfo","tryGetBlockHeaderState","get_block_header_state","blockNumber","get_block_info","get_block","last_irreversible_block_id","last_irreversible_block_time","ActionBuilder","buildTransaction","cb","tx","TransactionBuilder","getAccountKeys","actor","permission","get_account","permissions","relevantPermission","perm_name","required_auth","console","log","sha256Digest","byteLength","subtle","matchRsaKeyToSignature","nonce","trx","fetchCredentials","creds","cred","rsaKey","exponentBase64","exponent","modulusBase64","modulus","clientJson","client_json","signedDigest","base64url","toBuffer","challenge","actualDigest","importKey","kty","alg","ext","authData","auth_data","clientJsonHash","resultingHash","verified","matchEthKeyToSignature","ethKey","actualDigestArray","ethSignature","signedWithKey","matchWaKeyToSignature","fullSignature","Numeric","r1Signature","authenticatorData","clientDataJSON","whatItReallySigned","recoveredR1Key","waPublicKey","actualR1KeyBuffer","actualR1Key","checkIfKeysMatchTransaction","webauthTransaction","dir","depth","typeOfKey","signatureType","some","includes","api","contextFreeGroups","actionBuilder","associateContextFree","contextFreeGroup","send","config","contextFreeDataSet","contextFreeActions","serializedData","contextFreeCallback","cfd","cfa","contextFreeAction","as","actorName","ActionSerializer","parent","assign","RpcError","json","error","details","except","setPrototypeOf","prototype","getValidKycProviders","get_table_rows","code","table","scope","rows","validKycProviders","reduce","acc","provider","blisted","kyc_provider","isLightKYCVerified","lightKyc","users","lower_bound","upper_bound","resultsWithKycStatus","user","levelsResult","kyc","indexOf","kyc_level","split","kycItem","every","lightKycField","key_type","index_position","credentials","JsonRpc","endpoints","maxRetries","currentEndpoint","endpoint","nextEndpoint","removed","shift","fetch","path","body","currentRetries","isFetchError","ok","head_block_time","headTime","getTime","ct","secondsBehind","res","status","abi_bin_to_json","binargs","abi_json_to_bin","get_abi","account_name","get_accounts_by_authorizers","get_activated_protocol_features","limit","search_by_block_num","blockNumOrId","block_num_or_id","blockNum","get_code","code_as_wasm","get_code_hash","get_currency_balance","get_currency_stats","get_producer_schedule","get_producers","lowerBound","get_raw_code_and_abi","get_raw_abi","get_scheduled_transactions","show_payer","get_kv_table_rows","index_name","encode_type","index_value","get_table_by_scope","available_keys","required_keys","packed_context_free_data","packed_trx","expired","return_failure_traces","push_transactions","transactions","packedTrxs","db_size_get","trace_get_block","history_get_actions","offset","history_get_transaction","blockNumHint","block_num_hint","history_get_key_accounts","history_get_controlled_accounts","controllingAccount","controlling_account","WebAuthnSignatureProvider","navigator","timeout","allowCredentials","assertion","pubKey","subarray","fixup","unshift","der","recid","getKeyRecoveryParam","ApiInterfaces","RpcInterfaces","Serialize","Key"],"mappings":"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"}