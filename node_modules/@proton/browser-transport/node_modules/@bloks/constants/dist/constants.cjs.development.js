'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var DEFAULT_SYMBOL = 'EOS';
var DEFAULT_SYSTEM_DOMAIN = 'eosio';
var DEFAULT_CHAIN = 'eos';

var getContractConstants = function getContractConstants(chain, systemDomain) {
  if (chain === void 0) {
    chain = DEFAULT_CHAIN;
  }

  if (systemDomain === void 0) {
    systemDomain = DEFAULT_SYSTEM_DOMAIN;
  }

  // Proxy Information Account
  var proxyInfo;

  if (['eos', 'bos', 'wax'].includes(chain)) {
    proxyInfo = 'regproxyinfo';
  } else if (chain === 'telos') {
    proxyInfo = 'tlsproxyinfo';
  }

  return {
    // Accounts
    EOSIO: systemDomain,
    EOSIO_TOKEN: !['fio', 'fio-test'].includes(chain) ? systemDomain + ".token" : 'fio.token',
    ACCOUNT_INFO: 'account.info',
    PROXY_INFO_ACCOUNT: proxyInfo,
    EOSIO_MSIG: systemDomain + ".msig",
    EOSIO_RAM: systemDomain + ".ram",
    EOSIO_STAKE: systemDomain + ".stake",
    EOSIO_PRODS: systemDomain + ".prods",
    EOSIO_NULL: systemDomain + ".null",
    EOSIO_RAMFEE: systemDomain + ".ramfee",
    EOSIO_VPAY: systemDomain + ".vpay",
    EOSIO_BPAY: systemDomain + ".bpay",
    EOSIO_REX: systemDomain + ".rex",
    // Params
    NEWACCOUNT_NAME_PARAM: chain.indexOf('bos') === -1 ? 'name' : 'newact',
    // Tables
    EOSIO_MSIG_APPROVALS_TABLE: 'approvals2',
    EOSIO_MSIG_PROPOSALS_TABLE: 'proposal',
    // Actions
    TRANSFER_ACTION: 'transfer',
    DELEGATE_BW_ACTION: 'delegatebw',
    UNDELEGATE_BW_ACTION: 'undelegatebw',
    VOTE_PRODUCER_ACTION: 'voteproducer',
    BUY_RAM_ACTION: 'buyram',
    BUY_RAM_BYTES_ACTION: 'buyrambyes',
    SELL_RAM_ACTION: 'sellram'
  };
};

var dapps = [{
  name: 'Equilibrium EOSDT',
  description: 'EOSDT is the #1 decentralized stablecoin on EOS. Lock EOS or BTC collateral and get dollar-pegged EOSDT stablecoins at affordable APR.',
  shortDescription: 'Lock EOS or BTC collateral and get dollar-pegged EOSDT stablecoins at affordable APR.',
  symbol: 'EOSDT',
  partner: true,
  statistics: true,
  accounts: ['eosdtcntract', 'eosdtnutoken', 'eosdtsttoken', 'eosdtorclize', 'eosdtliqdatr', 'eosdtgovernc', 'eosdtpbtcpos', 'eosdtpbtcliq'],
  logo: 'https://bloks.io/img/dapps/EOSDT.png',
  website: 'https://www.eosdt.com/',
  app: 'https://gateway.eosdt.com/',
  telegram: 'https://t.me/equilibrium_eosdt_official',
  medium: 'https://medium.com/equilibrium-eosdt',
  twitter: 'https://twitter.com/eosdt',
  github: 'https://github.com/equilibrium-eosdt',
  chains: ['eos']
}, {
  name: 'Alcor.exchange',
  description: 'The first self-listing DEX. With Alcor you can trade any EOS.IO tokens for system EOS tokens, atomically, without the participation of third parties! Create markets in one click, list your dapp token for one click, trade whatever you want.',
  shortDescription: 'The first self-listing DEX. With Alcor you can trade any EOS.IO tokens for system EOS tokens.',
  symbol: '',
  statistics: true,
  accounts: ['eostokensdex'],
  logo: 'https://i.ibb.co/dKDYDMc/vectorpaint.png',
  website: 'https://alcor.exchange/',
  app: 'https://alcor.exchange/',
  telegram: 'https://t.me/alcorexchange',
  medium: 'https://medium.com/@avral',
  twitter: 'https://twitter.com/avral_pro',
  github: 'https://github.com/avral/alcor-ui',
  chains: ['eos', 'wax', 'telos']
}, {
  name: 'SX',
  description: 'Building secure & reliable financial blockchain instruments',
  shortDescription: 'DeFi Swap & Flashloan',
  symbol: 'SX',
  accounts: ['swap.sx', 'vigor.sx', 'stable.sx', 'flash.sx', 'push.sx', 'network.sx', 'registry.sx', 'miner.sx', 'cross.sx', 'nav.sx', 'fee.sx', 'trade.sx', 'vaults.sx', 'proxy.sx', 'dust.sx', 'curve.sx'],
  logo: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/sx.png',
  website: 'https://github.com/stableex',
  app: 'https://xnation.io',
  telegram: 'https://t.me/xnationio',
  medium: '',
  twitter: '',
  github: 'https://github.com/stableex',
  chains: ['eos']
}, {
  name: 'EOSNameService',
  description: 'EOS Name Service is the most comprehensive platform to register premium/base EOS/WAX account names.',
  shortDescription: 'EOS/WAX Name Service',
  symbol: '',
  partner: false,
  accounts: ['names'],
  logo: 'https://avatars1.githubusercontent.com/u/73891041',
  website: 'http://eosnameservice.io',
  app: 'http://eosnameservice.io',
  telegram: 'https://t.me/eosnameservice',
  medium: '',
  twitter: 'https://twitter.com/eosnameservice',
  github: 'https://github.com/eosnameservice',
  chains: ['eos', 'wax']
}, {
  name: 'Prospectors',
  description: 'Massive Multiplayer Online Real-Time Economic Strategy Game  MINE GOLD - BUILD YOUR WORLD',
  shortDescription: 'Massive Multiplayer Online Real-Time Economic Strategy Game',
  symbol: '',
  accounts: ['prospectorsc'],
  logo: 'https://bloks.io/img/dapps/prospectors.png',
  website: 'https://prospectors.io',
  app: 'https://prospectors.io',
  telegram: 'https://t.me/prospectorsgame',
  medium: 'https://medium.com/@prospectorsgame',
  twitter: 'https://twitter.com/prospectorsgame',
  github: 'https://github.com/prospectors/public/issues',
  chains: ['eos']
}, {
  name: 'APPICS',
  description: 'APPICS is the most engaged social media dApp that makes it easy to get rewarded with cryptocurrency for your social media activity like creating & curating content. The mobile interface is intuitive to use without any prior blockchain knowledge. Get rewarded for your passion!',
  shortDescription: 'APPICS is the most engaged social media dApp - earn APX Tokens for posting, commenting, and up-voting photos & videos!',
  symbol: 'APX',
  statistics: true,
  accounts: ['appicsappics'],
  logo: 'https://i.imgur.com/Ts9CNN5.png',
  website: 'https://appics.com',
  app: 'https://appics.com',
  telegram: 'https://t.me/appics_official',
  medium: 'https://medium.com/@appics',
  twitter: 'https://twitter.com/appics_official',
  github: 'https://github.com/phenom-company/appics_eos_token',
  chains: ['eos']
}, {
  name: 'Boid',
  description: 'Contribute your excess computing resources towards important causes while earning rewards. Join a team and rank up on the social leaderboards.',
  shortDescription: 'The Social Supercomputer. Contribute your excess computing resources towards important causes.',
  symbol: '',
  accounts: ['boidcomtoken', 'boidcompower', 'boidcommint1', 'boidcompromo'],
  logo: 'https://raw.githubusercontent.com/boid-com/assets/master/boidLogo-lg.png',
  website: 'https://boid.com',
  app: 'https://app.boid.com',
  telegram: 'https://t.me/Boidcom_official',
  medium: 'https://medium.com/@boidcom',
  twitter: 'https://twitter.com/boidcom',
  github: 'https://github.com/boid-com',
  chains: ['eos']
}, {
  name: 'The Billionaire Token',
  description: 'Most other coins or tokens have some sort of mining system. Billionaire Token has the exact opposite: It features a deflationary mechanism that destroys 30% of the gambled coins. Thus the tokens become more and more rare as more and more people gamble.',
  shortDescription: 'Billionaire Token has the opposite of a mining system: It features a deflationary mechanism that destroys 30% of the gambled coins.',
  symbol: 'XBL',
  accounts: ['billionairet', 'billionraffl', 'billionburnr', 'billionbot11', 'billionbot12', 'billionbot13', 'billionbot14'],
  app: 'https://BillionaireToken.com/',
  logo: 'https://BillionaireToken.com/images/logo_big.png',
  website: 'https://BillionaireToken.com/',
  telegram: 'https://t.me/BillionaireToken',
  medium: 'https://medium.com/@billionaire_3373',
  twitter: 'https://twitter.com/BillionaireTkn',
  github: 'https://github.com/BillionaireToken',
  chains: ['eos']
}, {
  name: 'Crypto Sword & Magic',
  description: 'Crypto Sword & Magic is the first blockbuster RPG on EOS blockchain, traditional turn-based RPG raising heroes to challenge new dungeons. Game assets are recorded on Blockchain and transactions run on smart contracts',
  shortDescription: 'Crypto Sword & Magic is the first blockbuster RPG on EOS blockchain.',
  symbol: 'CSM',
  accounts: ['swordnmagicm'],
  app: 'https://www.cryptoswordandmagic.com',
  logo: 'https://bloks.io/img/dapps/cryptosnm.png',
  website: 'https://www.cryptoswordandmagic.com',
  telegram: 'https://t.me/cryptosnm_comm_en',
  medium: 'https://medium.com/@cryptoswordandmagic',
  twitter: 'https://twitter.com/sword_and_magic',
  github: '',
  chains: ['eos']
}, {
  name: 'dmail',
  description: 'Welcome to dmail Beta! We are so excited to have you participate as we launch our Beta platform. In the early stages we are covering the simplest of functionality, which is sending and receiving messages. In the very near future, we will be adding a bunch of new features which we know the community is going to ask for.',
  shortDescription: 'dmail is the first decentralized email on the blockchain',
  symbol: 'MAIL',
  statistics: true,
  accounts: ['dmaildotcobp'],
  logo: 'https://www.dmail.co/logosym_256.png',
  website: 'https://dmail.co',
  app: '',
  telegram: 'https://t.me/dmailcommunity',
  medium: 'https://medium.com/@dmail',
  twitter: 'https://twitter.com/dmaildotco',
  github: '',
  chains: ['eos', 'telos']
}, {
  name: 'Murmur',
  description: 'Murmur is a new age decentralized microblogging platform on EOS that is censorship-resistant, spam-proof and rewarding to use.',
  shortDescription: 'Murmur is a new age decentralized microblogging platform on EOS that is censorship-resistant, spam-proof and rewarding to use.',
  symbol: 'MUR',
  partner: true,
  accounts: ['murmurdappco', 'murmurtokens', 'murmurfreeac'],
  app: 'https://play.google.com/store/apps/details?id=com.murmurdapp',
  logo: 'https://bloks.io/img/dapps/murmur.png',
  website: 'http://murmurdapp.com',
  telegram: 'http://t.me/murmurdapp',
  medium: '',
  twitter: 'http://twitter.com/murmurdapp',
  github: '',
  chains: ['eos']
}, {
  name: 'Emanate',
  description: 'Emanate is EOS for the music industry. An automated, realtime music collaboration and monetisation platform.',
  shortDescription: 'Emanate is decentralised technology for the future of music',
  symbol: 'EMT',
  partner: true,
  accounts: ['emanateoneos', 'emanateissue'],
  app: 'https://emanate.live/',
  logo: 'https://bloks.io/img/dapps/emanate.png',
  website: 'https://emanate.live',
  telegram: 'https://t.me/emanateofficial',
  medium: '',
  twitter: 'https://twitter.com/emanateofficial',
  github: '',
  chains: ['eos']
}, {
  name: 'pixEOS',
  description: 'pixEOS is the first tokenized smart economy for gamers, artists and art enthusiasts.',
  shortDescription: 'pixEOS is the first tokenized smart economy for gamers, artists and art enthusiasts.',
  symbol: 'PIXEOS',
  partner: true,
  accounts: ['pixeos1token', 'pixeos1admin', 'pixeos1start'],
  app: 'https://pixeos.io',
  logo: 'https://bloks.io/img/dapps/pixeos.png',
  website: 'https://pixeos.io',
  telegram: 'https://t.me/PIXEOS',
  medium: '',
  twitter: 'https://twitter.com/eos_pix',
  github: '',
  chains: ['eos']
}, {
  name: 'Everipedia',
  description: 'The Everipedia team plans to build a modern, convenient and decentralized new encyclopedia website, and this goal will be realized with the development of blockchain technology. The new version of Everipedia under development will be based on the EOS network, which will have features such as community autonomy, shielding preventation, and contribution incentives compared to the current version of Everipedia. Founded in 2014, the business network encyclopedia Everipedia, whose name derives from the English words Everything and Encyclopedia, is owned by Everipedia.Inc and has not yet adopted blockchain technology. As of December 2017, Everipedia is the largest English encyclopedia with more than six million entries, including all English entries of Wikipedia. Everipedias requirements for attention are more relaxed, so it has more entries than Wikipedia.',
  shortDescription: 'The Everipedia team plans to build a modern, convenient and decentralized new encyclopedia.',
  symbol: 'IQ',
  partner: true,
  statistics: false,
  accounts: ['everipediaiq', 'eparticlectr'],
  logo: 'https://bloks.io/img/dapps/everipedia.jpg',
  website: '',
  app: 'https://everipedia.org',
  telegram: 'https://t.me/everipedia',
  medium: '',
  twitter: '',
  github: '',
  chains: ['eos']
}, {
  name: 'eosDAC',
  description: 'eosDAC is a Community Owned Blockproducer and a DAC enabler, born out of Dan Larimers concept of Decentralized Autonomous Communities or DACs, around which Block.one developed EOS software.  The vision of eosDAC is that EOS.IO block production should be open for everyone to contribute and benefit. To realize this vision, eosDAC is an evolving Decentralised Autonomous Community (DAC) focused on EOS.IO Block Production serving the EOS communities worldwide. In doing this, eosDAC is creating the tools and smart contracts it needs to function. It will share these with the EOS communities to help other DACs thrive on the EOS.IO blockchains.  In order to function as a DAC, eosDAC is creating open source tools and will be sharing them as a DAC Toolkit, that anyone can use, modify to setup and run a DAC.',
  shortDescription: 'eosDAC is creating open source tools and will be sharing them as a DAC Toolkit to enable DACs',
  symbol: 'EOSDAC',
  partner: false,
  statistics: false,
  accounts: ['eosdactokens', 'eosdacserver', 'eosdacthedac', 'daccustodian'],
  logo: 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/eosdac.png',
  website: '',
  app: 'members.eosdac.io',
  discord: 'https://discord.io/eosdac',
  telegram: 'https://t.me/eosdacio',
  medium: '',
  twitter: '',
  github: 'https://github.com/eosdac',
  chains: ['eos']
}, {
  name: 'DEOS Games',
  description: 'Deos Games are casino games built on EOS blockchain. Play zero edge games with our DEOS token and participate in bankroll staking.',
  shortDescription: 'Deos Games are casino games built on the EOS blockchain. Play zero edge games with DEOS token.',
  symbol: 'DEOS',
  statistics: false,
  accounts: ['thedeosgames', 'deosgameissu'],
  logo: 'https://bloks.io/img/dapps/deosgames.png',
  website: 'https://deosgames.com',
  app: 'https://app.deosgames.com',
  telegram: 'https://t.me/deosgameschat',
  medium: 'https://medium.com/deos-games',
  twitter: '',
  github: '',
  chains: ['eos']
}, {
  name: 'Chintai',
  description: 'Chintai is a community-owned, feeless, 100% on-chain, multisig decentralized token leasing platform where users can lend their EOS on the market to earn interest from other users to borrow who need access to CPU/NET bandwidth.',
  shortDescription: 'Chintai is a community-owned, feeless, 100% on-chain, multisig decentralized token leasing platform.',
  symbol: '',
  statistics: false,
  accounts: ['chintailease', 'chintaiproxy', 'bidchextoken', 'chexchexchex'],
  logo: 'https://bloks.io/img/dapps/chintai.png',
  website: 'http://chintai.io',
  app: 'https://eos.chintai.io/exchange/EOS28D',
  telegram: 'https://t.me/ChintaiEOS',
  medium: 'https://medium.com/@ChintaiEOS',
  twitter: 'https://twitter.com/chintaieos',
  github: 'https://github.com/chintai-platform',
  chains: ['eos']
}, {
  name: 'Newdex',
  description: 'Newdex is the first EOS based decentralized exchange in the world, upholding the characteristics of safe, fast and transparent, devoting to create a new-generation platform for digital assets exchange, leading the industry into an ideal new era.',
  shortDescription: 'Newdex is the first EOS based decentralized exchange in the world.',
  symbol: '',
  accounts: ['newdexpocket'],
  logo: 'https://bloks.io/img/dapps/newdex.png',
  website: 'https://newdex.io',
  app: 'https://newdex.io',
  telegram: '',
  medium: '',
  twitter: 'https://twitter.com/NewdexOfficial',
  github: '',
  chains: ['eos']
}, {
  name: 'EOS Name Swaps',
  description: 'An open-source EOS account exchange that puts the security of its users first.',
  shortDescription: 'An open-source EOS account exchange that puts the security of its users first.',
  symbol: '',
  statistics: false,
  accounts: ['eosnameswaps'],
  logo: 'https://bloks.io/img/dapps/eosnameswaps.png',
  website: 'https://www.eosnameswaps.com/',
  app: 'https://www.eosnameswaps.com/',
  telegram: 'https://t.me/eosnameswaps',
  medium: '',
  twitter: 'https://twitter.com/Starry3017Night',
  github: 'https://github.com/StarryJapanNight/eosnameswaps',
  chains: ['eos']
}];

var exchanges = {
  'Bithumb': {
    'name': 'Bithumb',
    'description': '비트코인, 이더리움, 비트코인캐시, 리플, 라이트코인, 대시, 모네로, 비트코인골드, 이오스, 이더리움클래식, 퀀텀, 제트캐시, 실시간 시세, 쉽고 안전한 거래.',
    'accounts': ['bithumbshiny'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.bithumb.com/'
  },
  'OKEx': {
    'name': 'OKEx',
    'description': 'OKEx is the leading global bitcoin exchange. Secured with bank-level SSL encryption and cold storage.',
    'accounts': ['okexoffiline'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.okex.com/'
  },
  'Bitfinex': {
    'name': 'Bitfinex',
    'description': 'Bitfinex is a full-featured spot trading platform for major digital assets & cryptocurrencies, including Bitcoin, Ethereum, EOS, Litecoin, Ripple, NEO, Monero and many more.',
    'accounts': ['bitfinexcw55', 'bitfinexcw13', 'bitfinexcw11', 'bitfinexcw24', 'bitfinexcw15', 'bitfinexcw32', 'bitfinexcw21', 'bitfinexcw31', 'bitfinexcw25', 'bitfinexcw23', 'bitfinexcw33', 'bitfinexcw22', 'bitfinexcw12', 'bitfinexcw14'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://bitfinex.com/'
  },
  'Gate.io': {
    'name': 'Gate.io',
    'description': 'Gate.io is a bitcoin exchange platform which supports BTC, LTC, Ethereum, Qtum and more blockchain assets trading.',
    'accounts': ['gateiowallet'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.gate.io/'
  },
  'Kraken': {
    'name': 'Kraken',
    'description': 'Buy, sell and margin trade Bitcoin (BTC) and Etherum (ETH) in exchange with EUR, USD, CAD, GBP, and JPY.',
    'accounts': ['krakenkraken'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-dapps/master/logos/placeholder.png',
    'website': 'https://www.kraken.com/'
  },
  'Newdex': {
    'name': 'Newdex',
    'description': 'The first EOS based decentralized exchange in the world.',
    'accounts': ['newdexpocket'],
    'logo': '/img/exchanges/newdex.png',
    'website': 'https://newdex.io/',
    linkGenerator: function linkGenerator(token, pair) {
      return "https://newdex.io/trade/" + token.account + "-" + pair.pair_base.toLowerCase() + "-" + pair.pair_quote.toLowerCase();
    }
  },
  'DefiBox': {
    'name': 'DefiBox',
    'description': 'One-stop DeFi application platform on EOS..',
    'accounts': ['token.defi', 'swap.defi'],
    'logo': 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/token.defi-box.png',
    'website': 'https://defibox.io/',
    linkGenerator: function linkGenerator(_, __) {
      return "https://defibox.io/";
    }
  },
  'Chaince': {
    'name': 'Chaince',
    'description': 'A Superior Blockchain Asset Trading Platform Focusing on EOS Projects',
    'accounts': ['chainceoneos'],
    'logo': '/img/exchanges/chaince.png',
    'website': 'https://chaince.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://chaince.com/trade/" + pair.pair_base.toLowerCase() + pair.pair_quote.toLowerCase();
    }
  },
  'Dexeos': {
    'name': 'Dexeos',
    'description': 'The World\'s First EOS-based Decentralized Exchange',
    'accounts': ['dexeoswallet'],
    'logo': '/img/exchanges/dexeos.svg',
    'website': 'https://dexeos.io/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://dexeos.io/trade/" + pair.pair_base.toUpperCase();
    }
  },
  'Hoo': {
    'name': 'Hoo',
    'description': 'One-stop blockchain asset service platform',
    'accounts': ['hoo.com'],
    'logo': '/img/exchanges/hoo.jpg',
    'website': 'https://hoo.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://hoo.com/trade/" + pair.pair_base.toLowerCase() + "-" + pair.pair_quote.toLowerCase();
    }
  },
  'Whaleex': {
    'name': 'Whaleex',
    'description': '#1 Decentralized Exchange in the World',
    'accounts': ['whaleextrust'],
    'logo': '/img/exchanges/whaleex.png',
    'website': 'https://www.whaleex.com',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://www.whaleex.com/trade/" + pair.pair_base + "_" + pair.pair_quote;
    }
  },
  'Chainrift': {
    'name': 'Chainrift',
    'description': 'A marketplace for digital currencies',
    'accounts': [],
    'logo': '/img/exchanges/chainrift.png',
    'website': 'https://www.chainrift.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://www.chainrift.com/trading?coinpair=" + pair.pair_base + "/" + pair.pair_quote;
    }
  },
  'Eosdaq': {
    'name': 'EOSDAQ',
    'description': 'A Standard of On-Chain DEX',
    'accounts': [],
    'logo': '/img/exchanges/eosdaq.png',
    'website': 'https://www.eosdaq.com/',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://eosdaq.com/exchange/" + pair.pair_base + "_" + pair.pair_quote;
    }
  },
  'BigONE': {
    'name': 'BigONE',
    'description': 'A Standard of On-Chain DEX',
    'accounts': [],
    'logo': '/img/exchanges/bigONE.jpg',
    'website': 'https://big.one',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://big.one/trade/" + pair.pair_base + "-" + pair.pair_quote;
    }
  },
  'YOLO': {
    'name': 'YOLO',
    'description': 'Instant Token Swaps on EOS',
    'accounts': [],
    'logo': '/img/exchanges/yolo.png',
    'website': 'https://yoloswap.com',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://yoloswap.com/swap/" + pair.pair_quote.toLowerCase() + "-" + pair.pair_base.toLowerCase();
    }
  },
  'Bancor': {
    'name': 'Bancor',
    'description': 'Instant Liquidity.',
    'accounts': [],
    'logo': '/img/exchanges/bancor.png',
    'website': 'https://bancor.network',
    linkGenerator: function linkGenerator(_, pair) {
      return "https://www.bancor.network/token/" + pair.pair_base;
    }
  },
  'Alcor': {
    'name': 'Alcor',
    'description': 'The first self-listing decentralized exchange',
    'accounts': [],
    'logo': '/img/exchanges/alcor.png',
    'website': 'https://alcor.exchange',
    linkGenerator: function linkGenerator(_, __) {
      return "https://www.alcor.exchange/markets";
    }
  },
  'Defis.Network': {
    'name': 'Defis.Network',
    'description': 'An open finance network that integrates a series of DeFi protocols',
    'accounts': [],
    'logo': '/img/exchanges/defis-uncache.png',
    'website': 'https://defis.network',
    linkGenerator: function linkGenerator(_, __) {
      return "https://apps.defis.network/";
    }
  },
  'DolphinSwap': {
    'name': 'DolphinSwap',
    'description': 'DolphinSwap',
    'accounts': [],
    'logo': '/img/exchanges/dolphinswap.png',
    'website': 'https://dolphinswap.io/exchange',
    linkGenerator: function linkGenerator(_, __) {
      return 'https://dolphinswap.io/exchange';
    }
  },
  'Proton': {
    'name': 'ProtonSwap',
    'description': 'ProtonSwap',
    'accounts': [],
    'logo': '/img/exchanges/protonswap.png',
    'website': 'https://protonswap.com',
    linkGenerator: function linkGenerator(_, __) {
      return 'https://protonswap.com';
    }
  }
};

var SCATTER_DESKTOP = 'ScatterSockets';
var SCATTER_DESKTOP_MANUAL = 'ScatterSocketsManual';
var SCATTER_EXTENSION = 'ScatterExtension';
var LEDGER = 'ledger';
var LEDGER_USB = 'TransportU2F';
var LEDGER_BLE = 'TransportWebBLE';
var LEDGER_WEBUSB = 'TransportWebusb';
var LEDGER_WEBHID = 'TransportWebHID';
var LYNX = 'lynx';
var PROTON = 'proton';
var ANCHOR = 'anchor';
var SIMPLEOS = 'simpleos';
var EOSAUTH = 'eosauth';
var CLEOS = 'cleos';
var EOSC = 'eosc';
var CLIO = 'clio';
var KEYCAT = 'keycat';
var TREZOR = 'trezor';
var SQRL = 'sqrl';
var WOMBAT = 'wombat';
var WAX_CLOUD_WALLET = 'WaxCW';

var historyTypesFeatures = {
  "native": {
    name: 'native',
    actionFilter: false,
    tokenFilter: false,
    dateFilter: false,
    contractActionFilter: false,
    total: 0
  },
  dfuse: {
    name: 'dfuse',
    actionFilter: true,
    tokenFilter: true,
    dateFilter: true,
    contractActionFilter: true,
    total: 4
  },
  hyperion: {
    name: 'hyperion',
    actionFilter: true,
    tokenFilter: true,
    dateFilter: true,
    contractActionFilter: true,
    total: 3
  }
};

var _chainInfo;

var chainInfo = (_chainInfo = {
  local: {
    key: 'local',
    text: 'Local Testnet',
    value: 'https://local.bloks.io',
    image: '/img/chains/local.png',
    testnet: true
  }
}, _chainInfo['proton-test'] = {
  key: 'proton-test',
  text: 'Proton Testnet',
  value: 'https://proton-test.bloks.io',
  image: '/img/chains/proton.png',
  testnet: true
}, _chainInfo['wax-test'] = {
  key: 'wax-test',
  text: 'WAX Testnet',
  value: 'https://wax-test.bloks.io',
  image: '/img/chains/wax.png',
  testnet: true
}, _chainInfo['telos-test'] = {
  key: 'telos-test',
  text: 'Telos Testnet',
  value: 'https://telos-test.bloks.io',
  image: '/img/chains/telos.png',
  testnet: true
}, _chainInfo['fio-test'] = {
  key: 'fio-test',
  text: 'FIO Testnet',
  value: 'https://fio-test.bloks.io',
  image: '/img/chains/fio.png',
  testnet: true
}, _chainInfo['bos-test'] = {
  key: 'bos-test',
  text: 'BOS Testnet',
  value: 'https://bos-test.bloks.io',
  image: '/img/chains/bos.png',
  testnet: true
}, _chainInfo.jungle = {
  key: 'jungle',
  text: 'Jungle Testnet',
  value: 'https://jungle.bloks.io',
  image: '/img/chains/jungle.png',
  testnet: true
}, _chainInfo.jungle3 = {
  key: 'jungle3',
  text: 'Jungle3 Testnet',
  value: 'https://jungle3.bloks.io',
  image: '/img/chains/jungle.png',
  testnet: true
}, _chainInfo.kylin = {
  key: 'kylin',
  text: 'Kylin Testnet',
  value: 'https://kylin.bloks.io',
  image: '/img/chains/kylin.png',
  testnet: true
}, _chainInfo.eos = {
  key: 'eos',
  text: 'EOS',
  value: 'https://bloks.io',
  image: '/img/chains/eos.png'
}, _chainInfo.proton = {
  key: 'proton',
  text: 'Proton',
  value: 'https://proton.bloks.io',
  image: '/img/chains/proton.png'
}, _chainInfo.wax = {
  key: 'wax',
  text: 'WAX',
  value: 'https://wax.bloks.io',
  image: '/img/chains/wax.png'
}, _chainInfo.telos = {
  key: 'telos',
  text: 'Telos',
  value: 'https://telos.bloks.io',
  image: '/img/chains/telos.png'
}, _chainInfo.fio = {
  key: 'fio',
  text: 'FIO',
  value: 'https://fio.bloks.io',
  image: '/img/chains/fio.png'
}, _chainInfo.bos = {
  key: 'bos',
  text: 'BOS',
  value: 'https://bos.bloks.io',
  image: '/img/chains/bos.png'
}, _chainInfo.xec = {
  key: 'xec',
  text: 'Europechain',
  value: 'https://xec.bloks.io',
  image: '/img/chains/xec.png'
}, _chainInfo.coffe = {
  key: 'coffe',
  text: 'COFFE',
  value: 'https://coffe.bloks.io',
  image: '/img/chains/coffe.png'
}, _chainInfo.remme = {
  key: 'remme',
  text: 'Remme',
  value: 'https://remme.bloks.io',
  image: '/img/chains/remme.svg'
}, _chainInfo);

var getCommonConstants = function getCommonConstants(chain) {
  return {
    MAX_RPC_SYNC_SECONDS_BEHIND: 20,
    IMAGE_PROXY: 'https://www.api.bloks.io/image-proxy',
    WRAP_CONTRACT: 'proton.wrap',
    BLOKS_API: 'https://www.api.bloks.io',
    PROTON_API: 'https://api.protonchain.com',
    METAL_PROTON_ENDPOINT: chain === 'proton' ? 'https://api.protonchain.com' : 'https://api-dev.protonchain.com',
    SWAP_URL: chain === 'proton' ? 'https://otc.protonswap.com' : 'https://otc-test.protonswap.com',
    WRAP_SERVER_URL: chain === 'proton' ? 'https://www.api.bloks.io/proton-wrap-public' : 'https://www.api.bloks.io/proton-wrap-testnet-public'
  };
};

var generateProviderEndpoints = function generateProviderEndpoints(chainId, actionEndpoints) {
  return [{
    chainId: chainId,
    port: 443,
    protocol: 'https',
    host: actionEndpoints[0].substr(8),
    httpEndpoint: actionEndpoints[0],
    blockchain: 'eos'
  }];
};

var DEFAULT_ENDPOINTS = ['https://eos.greymass.com', 'https://eos.eoscafeblock.com', 'https://api.main.alohaeos.com', 'https://api.eossweden.org'];
var ACTIONS_ENDPOINTS = ['https://eos.greymass.com'];
var TRANSACTIONS_ENDPOINTS = ['https://eos.greymass.com', 'https://api.eossweden.org'];
var ALOHA_PROXY_URL = 'https://www.alohaeos.com/vote/proxy';
var API_URL = 'https://www.api.bloks.io';
var ATOMICASSETS_API = 'https://eos.api.atomicassets.io';
var BLOKS_PROXY = 'bloksioproxy';
var CHAIN = 'eos';
var CHAIN_ID = 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906';
var CHAIN_START_DATE = /*#__PURE__*/new Date('2018-06-08');
var CORE_PRECISION = 4;
var CORE_SYMBOL = 'EOS';
var DISPLAY_CHAIN = 'EOS';
var DOMAIN_TITLE = 'EOS Bloks.io';
var HISTORY_TYPES = ['native', 'hyperion'];
var HYPERION_URL = 'https://eos.hyperion.eosrio.io';
var KEY_PREFIX = 'EOS';
var LIGHT_API = 'https://api.light.xeos.me';
var NFTS_ENABLED = true;
var PROVIDER_ENDPOINTS = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID, ACTIONS_ENDPOINTS);
var REX_ENABLED = true;
var SIMPLEASSETS_API = 'https://eos.api.simpleassets.io';
var SUPPORTS_FREE_CPU = true;
var SUPPORTS_RENTBW = true;
var VOTING_ENABLED = true;
var constants = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL,
  API_URL: API_URL,
  ATOMICASSETS_API: ATOMICASSETS_API,
  BLOKS_PROXY: BLOKS_PROXY,
  CHAIN: CHAIN,
  CHAIN_ID: CHAIN_ID,
  CHAIN_START_DATE: CHAIN_START_DATE,
  CORE_PRECISION: CORE_PRECISION,
  CORE_SYMBOL: CORE_SYMBOL,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS,
  DISPLAY_CHAIN: DISPLAY_CHAIN,
  DOMAIN_TITLE: DOMAIN_TITLE,
  HISTORY_TYPES: HISTORY_TYPES,
  HYPERION_URL: HYPERION_URL,
  KEY_PREFIX: KEY_PREFIX,
  LIGHT_API: LIGHT_API,
  NFTS_ENABLED: NFTS_ENABLED,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS,
  REX_ENABLED: REX_ENABLED,
  SIMPLEASSETS_API: SIMPLEASSETS_API,
  SUPPORTS_FREE_CPU: SUPPORTS_FREE_CPU,
  SUPPORTS_RENTBW: SUPPORTS_RENTBW,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS,
  VOTING_ENABLED: VOTING_ENABLED
};

var DEFAULT_ENDPOINTS$1 = ['https://api.bossweden.org', 'https://api.boscore.io'];
var TRANSACTIONS_ENDPOINTS$1 = ['https://api.bossweden.org', 'https://api.boscore.io'];
var ACTIONS_ENDPOINTS$1 = ['https://api.bossweden.org', 'https://api.boscore.io'];
var ALOHA_PROXY_URL$1 = 'https://www.alohaeos.com/vote/proxy/bosmain';
var API_URL$1 = 'https://www.api.bloks.io/bos';
var BLOKS_PROXY$1 = 'blokspartner';
var CHAIN$1 = 'bos';
var CHAIN_ID$1 = 'd5a3d18fbb3c084e3b1f3fa98c21014b5f3db536cc15d08f9f6479517c6a3d86';
var CHAIN_START_DATE$1 = /*#__PURE__*/new Date('Dec 31, 2018');
var CORE_PRECISION$1 = 4;
var CORE_SYMBOL$1 = 'BOS';
var DISPLAY_CHAIN$1 = 'BOS';
var DOMAIN_TITLE$1 = 'BOS Bloks.io';
var HISTORY_TYPES$1 = ['native', 'hyperion'];
var HYPERION_URL$1 = 'https://api.bossweden.org';
var KEY_PREFIX$1 = 'EOS';
var LIGHT_API$1 = 'https://lightapi.eosamsterdam.net';
var PROVIDER_ENDPOINTS$1 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$1, ACTIONS_ENDPOINTS$1);
var REX_ENABLED$1 = true;
var VOTING_ENABLED$1 = true;
var constants$1 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$1,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL$1,
  API_URL: API_URL$1,
  BLOKS_PROXY: BLOKS_PROXY$1,
  CHAIN: CHAIN$1,
  CHAIN_ID: CHAIN_ID$1,
  CHAIN_START_DATE: CHAIN_START_DATE$1,
  CORE_PRECISION: CORE_PRECISION$1,
  CORE_SYMBOL: CORE_SYMBOL$1,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$1,
  DISPLAY_CHAIN: DISPLAY_CHAIN$1,
  DOMAIN_TITLE: DOMAIN_TITLE$1,
  HISTORY_TYPES: HISTORY_TYPES$1,
  HYPERION_URL: HYPERION_URL$1,
  KEY_PREFIX: KEY_PREFIX$1,
  LIGHT_API: LIGHT_API$1,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$1,
  REX_ENABLED: REX_ENABLED$1,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$1,
  VOTING_ENABLED: VOTING_ENABLED$1
};

var DEFAULT_ENDPOINTS$2 = ['https://wax.greymass.com', 'https://wax.eoscafeblock.com', 'https://api.waxsweden.org', 'https://chain.wax.io', 'https://wax.eosrio.io'];
var ACTIONS_ENDPOINTS$2 = ['https://wax.greymass.com', 'https://api.waxsweden.org', 'https://wax.eosrio.io', 'https://chain.wax.io'];
var TRANSACTIONS_ENDPOINTS$2 = ['https://wax.greymass.com', 'https://api.waxsweden.org', 'https://wax.eosrio.io', 'https://chain.wax.io'];
var ALOHA_PROXY_URL$2 = 'https://www.alohaeos.com/vote/proxy/waxmain';
var API_URL$2 = 'https://www.api.bloks.io/wax';
var ATOMICASSETS_API$1 = 'https://wax.api.atomicassets.io';
var BLOKS_PROXY$2 = 'bloksioproxy';
var CHAIN$2 = 'wax';
var CHAIN_ID$2 = '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4';
var CHAIN_START_DATE$2 = /*#__PURE__*/new Date('2019-06-24');
var CORE_PRECISION$2 = 8;
var CORE_SYMBOL$2 = 'WAX';
var DISPLAY_CHAIN$2 = 'WAX';
var DOMAIN_TITLE$2 = 'WAX | Bloks.io';
var HISTORY_TYPES$2 = ['native', 'hyperion'];
var HYPERION_URL$2 = 'https://wax.eosrio.io';
var KEY_PREFIX$2 = 'EOS';
var LIGHT_API$2 = 'https://lightapi.eosamsterdam.net';
var NFTS_ENABLED$1 = true;
var PROVIDER_ENDPOINTS$2 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$2, ACTIONS_ENDPOINTS$2);
var SIMPLEASSETS_API$1 = 'https://wax.api.simpleassets.io';
var VOTING_ENABLED$2 = true;
var constants$2 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$2,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL$2,
  API_URL: API_URL$2,
  ATOMICASSETS_API: ATOMICASSETS_API$1,
  BLOKS_PROXY: BLOKS_PROXY$2,
  CHAIN: CHAIN$2,
  CHAIN_ID: CHAIN_ID$2,
  CHAIN_START_DATE: CHAIN_START_DATE$2,
  CORE_PRECISION: CORE_PRECISION$2,
  CORE_SYMBOL: CORE_SYMBOL$2,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$2,
  DISPLAY_CHAIN: DISPLAY_CHAIN$2,
  DOMAIN_TITLE: DOMAIN_TITLE$2,
  HISTORY_TYPES: HISTORY_TYPES$2,
  HYPERION_URL: HYPERION_URL$2,
  KEY_PREFIX: KEY_PREFIX$2,
  LIGHT_API: LIGHT_API$2,
  NFTS_ENABLED: NFTS_ENABLED$1,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$2,
  SIMPLEASSETS_API: SIMPLEASSETS_API$1,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$2,
  VOTING_ENABLED: VOTING_ENABLED$2
};

var DEFAULT_ENDPOINTS$3 = ['https://telos.greymass.com', 'https://telos.caleos.io', 'https://api.rpc.miami', 'https://telosapi.eosmetal.io', 'https://api.tlos.goodblock.io', 'https://mainnet.telosusa.io'];
var ACTIONS_ENDPOINTS$3 = ['https://telos.greymass.com', 'https://api.rpc.miami', 'https://telos.caleos.io', 'https://api.tlos.goodblock.io', 'https://telosapi.eosmetal.io'];
var TRANSACTIONS_ENDPOINTS$3 = ['https://telos.greymass.com', 'https://api.rpc.miami', 'https://telos.caleos.io', 'https://api.tlos.goodblock.io', 'https://telosapi.eosmetal.io'];
var ALOHA_PROXY_URL$3 = 'https://www.alohaeos.com/vote/proxy/tlosmain';
var API_URL$3 = 'https://www.api.bloks.io/telos';
var BLOKS_PROXY$3 = 'bloksioproxy';
var CHAIN$3 = 'telos';
var CHAIN_ID$3 = '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11';
var CHAIN_START_DATE$3 = /*#__PURE__*/new Date('2018-12-12');
var CORE_PRECISION$3 = 4;
var CORE_SYMBOL$3 = 'TLOS';
var DISPLAY_CHAIN$3 = 'Telos';
var DOMAIN_TITLE$3 = 'Telos Bloks.io';
var HISTORY_TYPES$3 = ['hyperion', 'native'];
var HYPERION_URL$3 = 'https://telos.caleos.io';
var KEY_PREFIX$3 = 'EOS';
var LIGHT_API$3 = 'https://api.light.xeos.me';
var NFTS_ENABLED$2 = true;
var PROVIDER_ENDPOINTS$3 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$3, ACTIONS_ENDPOINTS$3);
var REX_ENABLED$2 = true;
var VOTING_ENABLED$3 = true;
var constants$3 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$3,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL$3,
  API_URL: API_URL$3,
  BLOKS_PROXY: BLOKS_PROXY$3,
  CHAIN: CHAIN$3,
  CHAIN_ID: CHAIN_ID$3,
  CHAIN_START_DATE: CHAIN_START_DATE$3,
  CORE_PRECISION: CORE_PRECISION$3,
  CORE_SYMBOL: CORE_SYMBOL$3,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$3,
  DISPLAY_CHAIN: DISPLAY_CHAIN$3,
  DOMAIN_TITLE: DOMAIN_TITLE$3,
  HISTORY_TYPES: HISTORY_TYPES$3,
  HYPERION_URL: HYPERION_URL$3,
  KEY_PREFIX: KEY_PREFIX$3,
  LIGHT_API: LIGHT_API$3,
  NFTS_ENABLED: NFTS_ENABLED$2,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$3,
  REX_ENABLED: REX_ENABLED$2,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$3,
  VOTING_ENABLED: VOTING_ENABLED$3
};

var DEFAULT_ENDPOINTS$4 = ['https://proton.cryptolions.io', 'https://proton.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$4 = ['https://proton.greymass.com', 'https://proton.cryptolions.io', 'https://proton.eosusa.news'];
var ACTIONS_ENDPOINTS$4 = ['https://proton.greymass.com', 'https://proton.cryptolions.io', 'https://proton.eosusa.news'];
var API_URL$4 = 'https://www.api.bloks.io/proton';
var ATOMICASSETS_API$2 = 'https://proton.api.atomicassets.io';
var CHAIN$4 = 'proton';
var CHAIN_ID$4 = '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0';
var CHAIN_START_DATE$4 = /*#__PURE__*/new Date('Apr 22, 2020');
var CORE_PRECISION$4 = 4;
var CORE_SYMBOL$4 = 'XPR';
var DISPLAY_CHAIN$4 = 'Proton';
var DOMAIN_TITLE$4 = 'Proton Bloks.io';
var HISTORY_TYPES$4 = ['native', 'hyperion'];
var HYPERION_URL$4 = 'https://proton.pink.gg';
var KEY_PREFIX$4 = 'EOS';
var LIGHT_API$4 = 'https://lightapi.eosamsterdam.net';
var MAX_VOTES = 4;
var NFTS_ENABLED$3 = true;
var PROVIDER_ENDPOINTS$4 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$4, ACTIONS_ENDPOINTS$4);
var VOTING_ENABLED$4 = true;
var constants$4 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$4,
  API_URL: API_URL$4,
  ATOMICASSETS_API: ATOMICASSETS_API$2,
  CHAIN: CHAIN$4,
  CHAIN_ID: CHAIN_ID$4,
  CHAIN_START_DATE: CHAIN_START_DATE$4,
  CORE_PRECISION: CORE_PRECISION$4,
  CORE_SYMBOL: CORE_SYMBOL$4,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$4,
  DISPLAY_CHAIN: DISPLAY_CHAIN$4,
  DOMAIN_TITLE: DOMAIN_TITLE$4,
  HISTORY_TYPES: HISTORY_TYPES$4,
  HYPERION_URL: HYPERION_URL$4,
  KEY_PREFIX: KEY_PREFIX$4,
  LIGHT_API: LIGHT_API$4,
  MAX_VOTES: MAX_VOTES,
  NFTS_ENABLED: NFTS_ENABLED$3,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$4,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$4,
  VOTING_ENABLED: VOTING_ENABLED$4
};

var DEFAULT_ENDPOINTS$5 = ['https://api.europechain.io', 'https://api.xec.cryptolions.io', 'https://xec.eosdublin.io', 'https://europe.rpc.barcelona'];
var ACTIONS_ENDPOINTS$5 = ['https://api.europechain.io'];
var TRANSACTIONS_ENDPOINTS$5 = ['https://api.europechain.io'];
var API_URL$5 = 'https://www.api.bloks.io/xec';
var CHAIN$5 = 'xec';
var CHAIN_ID$5 = 'f778f7d2f124b110e0a71245b310c1d0ac1a0edd21f131c5ecb2e2bc03e8fe2e';
var CHAIN_START_DATE$5 = /*#__PURE__*/new Date('Jul 08, 2019');
var CORE_PRECISION$5 = 4;
var CORE_SYMBOL$5 = 'XEC';
var DISPLAY_CHAIN$5 = 'XEC';
var DOMAIN_TITLE$5 = 'XEC Bloks.io';
var HISTORY_TYPES$5 = ['hyperion'];
var HYPERION_URL$5 = 'https://history.europechain.io';
var KEY_PREFIX$5 = 'EOS';
var LIGHT_API$5 = 'https://lightapi.eosamsterdam.net';
var PROVIDER_ENDPOINTS$5 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$5, ACTIONS_ENDPOINTS$5);
var VOTING_ENABLED$5 = true;
var constants$5 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$5,
  API_URL: API_URL$5,
  CHAIN: CHAIN$5,
  CHAIN_ID: CHAIN_ID$5,
  CHAIN_START_DATE: CHAIN_START_DATE$5,
  CORE_PRECISION: CORE_PRECISION$5,
  CORE_SYMBOL: CORE_SYMBOL$5,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$5,
  DISPLAY_CHAIN: DISPLAY_CHAIN$5,
  DOMAIN_TITLE: DOMAIN_TITLE$5,
  HISTORY_TYPES: HISTORY_TYPES$5,
  HYPERION_URL: HYPERION_URL$5,
  KEY_PREFIX: KEY_PREFIX$5,
  LIGHT_API: LIGHT_API$5,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$5,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$5,
  VOTING_ENABLED: VOTING_ENABLED$5
};

var DEFAULT_ENDPOINTS$6 = ['https://remchain.remme.io'];
var ACTIONS_ENDPOINTS$6 = ['https://remchain.remme.io'];
var TRANSACTIONS_ENDPOINTS$6 = ['https://remchain.remme.io'];
var API_URL$6 = 'https://www.api.bloks.io/remme';
var CHAIN$6 = 'remme';
var CHAIN_ID$6 = '9f485317b61a19e956c822866cc57a64bbed2196e1cf178e80f847a139a20916';
var CHAIN_START_DATE$6 = /*#__PURE__*/new Date('2019-12-17');
var CORE_PRECISION$6 = 4;
var CORE_SYMBOL$6 = 'REM';
var DISPLAY_CHAIN$6 = 'Remme';
var DOMAIN_TITLE$6 = 'Remme Bloks.io';
var HISTORY_TYPES$6 = ['native'];
var KEY_PREFIX$6 = 'EOS';
var PROVIDER_ENDPOINTS$6 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$6, ACTIONS_ENDPOINTS$6);
var SYSTEM_DOMAIN = 'rem';
var VOTING_ENABLED$6 = true;
var constants$6 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$6,
  API_URL: API_URL$6,
  CHAIN: CHAIN$6,
  CHAIN_ID: CHAIN_ID$6,
  CHAIN_START_DATE: CHAIN_START_DATE$6,
  CORE_PRECISION: CORE_PRECISION$6,
  CORE_SYMBOL: CORE_SYMBOL$6,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$6,
  DISPLAY_CHAIN: DISPLAY_CHAIN$6,
  DOMAIN_TITLE: DOMAIN_TITLE$6,
  HISTORY_TYPES: HISTORY_TYPES$6,
  KEY_PREFIX: KEY_PREFIX$6,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$6,
  SYSTEM_DOMAIN: SYSTEM_DOMAIN,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$6,
  VOTING_ENABLED: VOTING_ENABLED$6
};

var DEFAULT_ENDPOINTS$7 = ['https://coffe.io:8888', 'https://blockproducer.info', 'https://coffe-bar.fun', 'https://seva455.ru', 'https://vorovskiy.info', 'https://vorovskiy2.info', 'https://vorovskiy3.info'];
var ACTIONS_ENDPOINTS$7 = ['https://coffe.io:8888', 'https://blockproducer.info', 'https://coffe-bar.fun', 'https://seva455.ru', 'https://vorovskiy.info', 'https://vorovskiy2.info', 'https://vorovskiy3.info'];
var TRANSACTIONS_ENDPOINTS$7 = ['https://coffe.io:8888', 'https://blockproducer.info', 'https://coffe-bar.fun', 'https://seva455.ru', 'https://vorovskiy.info', 'https://vorovskiy2.info', 'https://vorovskiy3.info'];
var API_URL$7 = 'https://www.api.bloks.io/coffe';
var BLOKS_PROXY$4 = 'bloksioproxy';
var CHAIN$7 = 'coffe';
var CHAIN_ID$7 = '1ca925bc8fbc1cec262dedd10fd19d9357a1cc8de0bd92e5b61577740af9a3f2';
var CHAIN_START_DATE$7 = /*#__PURE__*/new Date('2019-11-06');
var CORE_PRECISION$7 = 4;
var CORE_SYMBOL$7 = 'CFF';
var DISPLAY_CHAIN$7 = 'CFF';
var DOMAIN_TITLE$7 = 'Coffe Bloks.io';
var HISTORY_TYPES$7 = ['hyperion'];
var HYPERION_URL$6 = 'https://hyperion.coffe.io';
var KEY_PREFIX$7 = 'EOS';
var LIGHT_API$6 = 'https://hyperion.coffe.io'; // https://coffe.io:5001'

var PROVIDER_ENDPOINTS$7 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$7, ACTIONS_ENDPOINTS$7);
var REX_ENABLED$3 = true;
var VOTING_ENABLED$7 = true;
var constants$7 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$7,
  API_URL: API_URL$7,
  BLOKS_PROXY: BLOKS_PROXY$4,
  CHAIN: CHAIN$7,
  CHAIN_ID: CHAIN_ID$7,
  CHAIN_START_DATE: CHAIN_START_DATE$7,
  CORE_PRECISION: CORE_PRECISION$7,
  CORE_SYMBOL: CORE_SYMBOL$7,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$7,
  DISPLAY_CHAIN: DISPLAY_CHAIN$7,
  DOMAIN_TITLE: DOMAIN_TITLE$7,
  HISTORY_TYPES: HISTORY_TYPES$7,
  HYPERION_URL: HYPERION_URL$6,
  KEY_PREFIX: KEY_PREFIX$7,
  LIGHT_API: LIGHT_API$6,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$7,
  REX_ENABLED: REX_ENABLED$3,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$7,
  VOTING_ENABLED: VOTING_ENABLED$7
};

var DEFAULT_ENDPOINTS$8 = ['https://fio.greymass.com', 'https://fio.eossweden.org', 'https://fio.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$8 = ['https://fio.greymass.com', 'https://fio.eossweden.org', 'https://fio.eosusa.news'];
var ACTIONS_ENDPOINTS$8 = ['https://fio.greymass.com', 'https://fio.eossweden.org', 'https://fio.eosusa.news'];
var ALOHA_PROXY_URL$4 = 'https://www.alohaeos.com/vote/proxy/fiomain';
var API_URL$8 = 'https://www.api.bloks.io/fio';
var CHAIN$8 = 'fio';
var CHAIN_ID$8 = '21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c';
var CHAIN_START_DATE$8 = /*#__PURE__*/new Date('Mar 24, 2020');
var CORE_PRECISION$8 = 9;
var CORE_SYMBOL$8 = 'FIO';
var DISABLE_MEMO = true;
var DISPLAY_CHAIN$8 = 'FIO';
var DOMAIN_TITLE$8 = 'FIO Bloks.io';
var FIO_FEES_ACCOUNT = 'fees@bloks';
var HISTORY_TYPES$8 = ['native', 'hyperion'];
var HYPERION_URL$7 = 'https://fio.eossweden.org';
var KEY_PREFIX$8 = 'FIO';
var PROVIDER_ENDPOINTS$8 = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$8, ACTIONS_ENDPOINTS$8);
var VOTING_ENABLED$8 = true;
var constants$8 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$8,
  ALOHA_PROXY_URL: ALOHA_PROXY_URL$4,
  API_URL: API_URL$8,
  CHAIN: CHAIN$8,
  CHAIN_ID: CHAIN_ID$8,
  CHAIN_START_DATE: CHAIN_START_DATE$8,
  CORE_PRECISION: CORE_PRECISION$8,
  CORE_SYMBOL: CORE_SYMBOL$8,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$8,
  DISABLE_MEMO: DISABLE_MEMO,
  DISPLAY_CHAIN: DISPLAY_CHAIN$8,
  DOMAIN_TITLE: DOMAIN_TITLE$8,
  FIO_FEES_ACCOUNT: FIO_FEES_ACCOUNT,
  HISTORY_TYPES: HISTORY_TYPES$8,
  HYPERION_URL: HYPERION_URL$7,
  KEY_PREFIX: KEY_PREFIX$8,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$8,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$8,
  VOTING_ENABLED: VOTING_ENABLED$8
};

var DEFAULT_ENDPOINTS$9 = [];
var ACTIONS_ENDPOINTS$9 = [];
var TRANSACTIONS_ENDPOINTS$9 = [];
var API_URL$9 = '';
var CHAIN$9 = 'local';
var CHAIN_ID$9 = '';
var CHAIN_START_DATE$9 = undefined;
var CORE_PRECISION$9 = 4;
var CORE_SYMBOL$9 = 'EOS';
var DISPLAY_CHAIN$9 = 'Local';
var DOMAIN_TITLE$9 = 'Local Bloks.io';
var HISTORY_TYPES$9 = ['native'];
var KEY_PREFIX$9 = 'EOS';
var PROVIDER_ENDPOINTS$9 = [];
var VOTING_ENABLED$9 = true;
var constants$9 = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$9,
  API_URL: API_URL$9,
  CHAIN: CHAIN$9,
  CHAIN_ID: CHAIN_ID$9,
  CHAIN_START_DATE: CHAIN_START_DATE$9,
  CORE_PRECISION: CORE_PRECISION$9,
  CORE_SYMBOL: CORE_SYMBOL$9,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$9,
  DISPLAY_CHAIN: DISPLAY_CHAIN$9,
  DOMAIN_TITLE: DOMAIN_TITLE$9,
  HISTORY_TYPES: HISTORY_TYPES$9,
  KEY_PREFIX: KEY_PREFIX$9,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$9,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$9,
  VOTING_ENABLED: VOTING_ENABLED$9
};

var DEFAULT_ENDPOINTS$a = [// 'https://jungleapi.eossweden.org',
'https://api.jungle.alohaeos.com', 'https://jungle2.cryptolions.io', 'https://jungle.eosphere.io', 'https://eos-jungle.eosblocksmith.io'];
var ACTIONS_ENDPOINTS$a = ['https://jungle.eossweden.org'];
var TRANSACTIONS_ENDPOINTS$a = ['https://jungle.eossweden.org'];
var API_URL$a = 'https://www.api.bloks.io/jungle';
var BLOKS_PROXY$5 = 'blokspartner';
var CHAIN$a = 'jungle';
var CHAIN_ID$a = 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473';
var CHAIN_START_DATE$a = /*#__PURE__*/new Date('Nov 23, 2018');
var CORE_PRECISION$a = 4;
var CORE_SYMBOL$a = 'EOS';
var DISPLAY_CHAIN$a = 'Jungle';
var DOMAIN_TITLE$a = 'Jungle Bloks.io';
var HISTORY_TYPES$a = ['hyperion', 'native'];
var HYPERION_URL$8 = 'https://jungle2.cryptolions.io';
var KEY_PREFIX$a = 'EOS';
var LIGHT_API$7 = 'https://lightapi.eosgeneva.io';
var NFTS_ENABLED$4 = true;
var PROVIDER_ENDPOINTS$a = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$a, ACTIONS_ENDPOINTS$a);
var REX_ENABLED$4 = true;
var VOTING_ENABLED$a = true;
var constants$a = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$a,
  API_URL: API_URL$a,
  BLOKS_PROXY: BLOKS_PROXY$5,
  CHAIN: CHAIN$a,
  CHAIN_ID: CHAIN_ID$a,
  CHAIN_START_DATE: CHAIN_START_DATE$a,
  CORE_PRECISION: CORE_PRECISION$a,
  CORE_SYMBOL: CORE_SYMBOL$a,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$a,
  DISPLAY_CHAIN: DISPLAY_CHAIN$a,
  DOMAIN_TITLE: DOMAIN_TITLE$a,
  HISTORY_TYPES: HISTORY_TYPES$a,
  HYPERION_URL: HYPERION_URL$8,
  KEY_PREFIX: KEY_PREFIX$a,
  LIGHT_API: LIGHT_API$7,
  NFTS_ENABLED: NFTS_ENABLED$4,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$a,
  REX_ENABLED: REX_ENABLED$4,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$a,
  VOTING_ENABLED: VOTING_ENABLED$a
};

var DEFAULT_ENDPOINTS$b = ['https://api.jungle3.alohaeos.com', 'https://jungle3.eosusa.news'];
var ACTIONS_ENDPOINTS$b = ['https://jungle3history.cryptolions.io', 'https://jungle3.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$b = ['https://jungle3history.cryptolions.io', 'https://jungle3.eosusa.news'];
var API_URL$b = 'https://www.api.bloks.io/jungle3';
var CHAIN$b = 'jungle3';
var CHAIN_ID$b = '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840';
var CHAIN_START_DATE$b = /*#__PURE__*/new Date('Feb 19, 2020');
var CORE_PRECISION$b = 4;
var CORE_SYMBOL$b = 'EOS';
var DISPLAY_CHAIN$b = 'Jungle 3';
var DOMAIN_TITLE$b = 'Jungle 3 Bloks.io';
var HISTORY_TYPES$b = ['hyperion'];
var HYPERION_URL$9 = 'https://jungle.cryptolions.io';
var KEY_PREFIX$b = 'EOS';
var PROVIDER_ENDPOINTS$b = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$b, ACTIONS_ENDPOINTS$b);
var REX_ENABLED$5 = true;
var SUPPORTS_RENTBW$1 = true;
var VOTING_ENABLED$b = true;
var constants$b = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$b,
  API_URL: API_URL$b,
  CHAIN: CHAIN$b,
  CHAIN_ID: CHAIN_ID$b,
  CHAIN_START_DATE: CHAIN_START_DATE$b,
  CORE_PRECISION: CORE_PRECISION$b,
  CORE_SYMBOL: CORE_SYMBOL$b,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$b,
  DISPLAY_CHAIN: DISPLAY_CHAIN$b,
  DOMAIN_TITLE: DOMAIN_TITLE$b,
  HISTORY_TYPES: HISTORY_TYPES$b,
  HYPERION_URL: HYPERION_URL$9,
  KEY_PREFIX: KEY_PREFIX$b,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$b,
  REX_ENABLED: REX_ENABLED$5,
  SUPPORTS_RENTBW: SUPPORTS_RENTBW$1,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$b,
  VOTING_ENABLED: VOTING_ENABLED$b
};

var DEFAULT_ENDPOINTS$c = ['https://kylin.eosn.io'];
var ACTIONS_ENDPOINTS$c = ['https://kylin.eosn.io'];
var TRANSACTIONS_ENDPOINTS$c = ['https://kylin.eosn.io'];
var API_URL$c = 'https://www.api.bloks.io/kylin';
var BLOKS_PROXY$6 = 'blokspartner';
var CHAIN$c = 'kylin';
var CHAIN_ID$c = '5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191';
var CHAIN_START_DATE$c = /*#__PURE__*/new Date('Jul 10, 2018');
var CORE_PRECISION$c = 4;
var CORE_SYMBOL$c = 'EOS';
var DISPLAY_CHAIN$c = 'Kylin';
var DOMAIN_TITLE$c = 'Kylin Bloks.io';
var HISTORY_TYPES$c = ['dfuse', 'hyperion', 'native'];
var HYPERION_URL$a = 'https://kylin.eossweden.org';
var KEY_PREFIX$c = 'EOS';
var PROVIDER_ENDPOINTS$c = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$c, ACTIONS_ENDPOINTS$c);
var VOTING_ENABLED$c = true;
var constants$c = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$c,
  API_URL: API_URL$c,
  BLOKS_PROXY: BLOKS_PROXY$6,
  CHAIN: CHAIN$c,
  CHAIN_ID: CHAIN_ID$c,
  CHAIN_START_DATE: CHAIN_START_DATE$c,
  CORE_PRECISION: CORE_PRECISION$c,
  CORE_SYMBOL: CORE_SYMBOL$c,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$c,
  DISPLAY_CHAIN: DISPLAY_CHAIN$c,
  DOMAIN_TITLE: DOMAIN_TITLE$c,
  HISTORY_TYPES: HISTORY_TYPES$c,
  HYPERION_URL: HYPERION_URL$a,
  KEY_PREFIX: KEY_PREFIX$c,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$c,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$c,
  VOTING_ENABLED: VOTING_ENABLED$c
};

var DEFAULT_ENDPOINTS$d = ['https://www.api.bloks.io/eos-test-node'];
var ACTIONS_ENDPOINTS$d = ['https://www.api.bloks.io/eos-test-node'];
var TRANSACTIONS_ENDPOINTS$d = ['https://www.api.bloks.io/eos-test-node'];
var API_URL$d = 'https://www.api.bloks.io/eos-test';
var CHAIN$d = 'eos-test';
var CHAIN_ID$d = '0db13ab9b321c37c0ba8481cb4681c2788b622c3abfd1f12f0e5353d44ba6e72';
var CHAIN_START_DATE$d = /*#__PURE__*/new Date('2020-01-14');
var CORE_PRECISION$d = 4;
var CORE_SYMBOL$d = 'TNT';
var DISPLAY_CHAIN$d = 'EOSIO Test';
var DOMAIN_TITLE$d = 'Bloks.io';
var HISTORY_TYPES$d = ['native'];
var KEY_PREFIX$d = 'EOS';
var PROVIDER_ENDPOINTS$d = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$d, ACTIONS_ENDPOINTS$d);
var constants$d = {
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$d,
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$d,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$d,
  API_URL: API_URL$d,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$d,
  CORE_SYMBOL: CORE_SYMBOL$d,
  CHAIN: CHAIN$d,
  DISPLAY_CHAIN: DISPLAY_CHAIN$d,
  HISTORY_TYPES: HISTORY_TYPES$d,
  CHAIN_ID: CHAIN_ID$d,
  DOMAIN_TITLE: DOMAIN_TITLE$d,
  CHAIN_START_DATE: CHAIN_START_DATE$d,
  KEY_PREFIX: KEY_PREFIX$d,
  CORE_PRECISION: CORE_PRECISION$d
};

var DEFAULT_ENDPOINTS$e = ['https://bostest.eosn.io', 'https://api-bostest.blockzone.net', 'https://bos-test.eospacex.com'];
var TRANSACTIONS_ENDPOINTS$e = ['https://api-bostest.blockzone.net', 'https://bos-test.eospacex.com'];
var ACTIONS_ENDPOINTS$e = ['https://api-bostest.blockzone.net', 'https://bos-test.eospacex.com'];
var API_URL$e = 'https://www.api.bloks.io/bos-test';
var BLOKS_PROXY$7 = 'blokspartner';
var CHAIN$e = 'bos-test';
var CHAIN_ID$e = '33cc2426f1b258ef8c798c34c0360b31732ea27a2d7e35a65797850a86d1ba85';
var CHAIN_START_DATE$e = /*#__PURE__*/new Date('Dec 13, 2018');
var CORE_PRECISION$e = 4;
var CORE_SYMBOL$e = 'BOS';
var DISPLAY_CHAIN$e = 'BOS Test';
var DOMAIN_TITLE$e = 'BOS Testnet Bloks.io';
var HISTORY_TYPES$e = ['hyperion'];
var HYPERION_URL$b = 'https://api-bostest.blockzone.net';
var KEY_PREFIX$e = 'EOS';
var PROVIDER_ENDPOINTS$e = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$e, ACTIONS_ENDPOINTS$e);
var VOTING_ENABLED$d = true;
var constants$e = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$e,
  API_URL: API_URL$e,
  BLOKS_PROXY: BLOKS_PROXY$7,
  CHAIN: CHAIN$e,
  CHAIN_ID: CHAIN_ID$e,
  CHAIN_START_DATE: CHAIN_START_DATE$e,
  CORE_PRECISION: CORE_PRECISION$e,
  CORE_SYMBOL: CORE_SYMBOL$e,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$e,
  DISPLAY_CHAIN: DISPLAY_CHAIN$e,
  DOMAIN_TITLE: DOMAIN_TITLE$e,
  HISTORY_TYPES: HISTORY_TYPES$e,
  HYPERION_URL: HYPERION_URL$b,
  KEY_PREFIX: KEY_PREFIX$e,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$e,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$e,
  VOTING_ENABLED: VOTING_ENABLED$d
};

var DEFAULT_ENDPOINTS$f = ['https://testnet.telos.caleos.io', 'https://testnet.telosusa.io'];
var TRANSACTIONS_ENDPOINTS$f = ['https://testnet.telos.caleos.io', 'https://testnet.telosusa.io'];
var ACTIONS_ENDPOINTS$f = ['https://testnet.telos.caleos.io', 'https://testnet.telosusa.io'];
var API_URL$f = 'https://www.api.bloks.io/telos-test';
var CHAIN$f = 'telos-test';
var CHAIN_ID$f = '1eaa0824707c8c16bd25145493bf062aecddfeb56c736f6ba6397f3195f33c9f';
var CHAIN_START_DATE$f = /*#__PURE__*/new Date('Dec 08, 2018');
var CORE_PRECISION$f = 4;
var CORE_SYMBOL$f = 'TLOS';
var DISPLAY_CHAIN$f = 'Telos Test';
var DOMAIN_TITLE$f = 'Telos Testnet Bloks.io';
var HISTORY_TYPES$f = ['hyperion', 'native'];
var HYPERION_URL$c = 'https://testnet.telos.caleos.io';
var KEY_PREFIX$f = 'EOS';
var PROVIDER_ENDPOINTS$f = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$f, ACTIONS_ENDPOINTS$f);
var VOTING_ENABLED$e = true;
var constants$f = {
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$f,
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$f,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$f,
  API_URL: API_URL$f,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$f,
  CORE_SYMBOL: CORE_SYMBOL$f,
  CHAIN: CHAIN$f,
  DISPLAY_CHAIN: DISPLAY_CHAIN$f,
  HISTORY_TYPES: HISTORY_TYPES$f,
  HYPERION_URL: HYPERION_URL$c,
  CHAIN_ID: CHAIN_ID$f,
  DOMAIN_TITLE: DOMAIN_TITLE$f,
  CHAIN_START_DATE: CHAIN_START_DATE$f,
  KEY_PREFIX: KEY_PREFIX$f,
  VOTING_ENABLED: VOTING_ENABLED$e,
  CORE_PRECISION: CORE_PRECISION$f
};

var DEFAULT_ENDPOINTS$g = ['https://proton-testnet.eoscafeblock.com', 'https://protontestnet.greymass.com', 'https://testnet.protonchain.com', 'https://test.proton.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$g = ['https://protontestnet.greymass.com', 'https://testnet.protonchain.com', 'https://test.proton.eosusa.news'];
var ACTIONS_ENDPOINTS$g = ['https://protontestnet.greymass.com', 'https://testnet.protonchain.com', 'https://test.proton.eosusa.news'];
var API_URL$g = 'https://www.api.bloks.io/proton-test';
var ATOMICASSETS_API$3 = 'https://test.proton.api.atomicassets.io';
var CHAIN$g = 'proton-test';
var CHAIN_ID$g = '71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd';
var CHAIN_START_DATE$g = /*#__PURE__*/new Date('April 3, 2020');
var CORE_PRECISION$g = 4;
var CORE_SYMBOL$g = 'XPR';
var DISPLAY_CHAIN$g = 'Proton-T';
var DOMAIN_TITLE$g = 'Proton Testnet Bloks.io';
var HISTORY_TYPES$g = ['hyperion', 'native'];
var HYPERION_URL$d = 'https://testnet.proton.pink.gg';
var KEY_PREFIX$g = 'EOS';
var MAX_VOTES$1 = 4;
var PROVIDER_ENDPOINTS$g = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$g, ACTIONS_ENDPOINTS$g);
var VOTING_ENABLED$f = true;
var constants$g = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$g,
  API_URL: API_URL$g,
  ATOMICASSETS_API: ATOMICASSETS_API$3,
  CHAIN: CHAIN$g,
  CHAIN_ID: CHAIN_ID$g,
  CHAIN_START_DATE: CHAIN_START_DATE$g,
  CORE_PRECISION: CORE_PRECISION$g,
  CORE_SYMBOL: CORE_SYMBOL$g,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$g,
  DISPLAY_CHAIN: DISPLAY_CHAIN$g,
  DOMAIN_TITLE: DOMAIN_TITLE$g,
  HISTORY_TYPES: HISTORY_TYPES$g,
  HYPERION_URL: HYPERION_URL$d,
  KEY_PREFIX: KEY_PREFIX$g,
  MAX_VOTES: MAX_VOTES$1,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$g,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$g,
  VOTING_ENABLED: VOTING_ENABLED$f
};

var DEFAULT_ENDPOINTS$h = ['https://testnet.waxsweden.org'];
var TRANSACTIONS_ENDPOINTS$h = ['https://testnet.waxsweden.org'];
var ACTIONS_ENDPOINTS$h = ['https://testnet.waxsweden.org'];
var API_URL$h = 'https://www.api.bloks.io/wax-test';
var ATOMICASSETS_API$4 = 'https://test.wax.api.atomicassets.io';
var CHAIN$h = 'wax-test';
var CHAIN_ID$h = 'f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12';
var CHAIN_START_DATE$h = /*#__PURE__*/new Date('Dec 5, 2019');
var CORE_PRECISION$h = 8;
var CORE_SYMBOL$h = 'WAX';
var DISPLAY_CHAIN$h = 'WAX-T';
var DOMAIN_TITLE$h = 'WAX Testnet Bloks.io';
var HISTORY_TYPES$h = ['native', 'hyperion'];
var HYPERION_URL$e = 'https://testnet.waxsweden.org';
var KEY_PREFIX$h = 'EOS';
var LIGHT_API$8 = 'https://testnet-lightapi.eosams.xeos.me';
var PROVIDER_ENDPOINTS$h = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$h, ACTIONS_ENDPOINTS$h);
var constants$h = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$h,
  API_URL: API_URL$h,
  ATOMICASSETS_API: ATOMICASSETS_API$4,
  CHAIN: CHAIN$h,
  CHAIN_ID: CHAIN_ID$h,
  CHAIN_START_DATE: CHAIN_START_DATE$h,
  CORE_PRECISION: CORE_PRECISION$h,
  CORE_SYMBOL: CORE_SYMBOL$h,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$h,
  DISPLAY_CHAIN: DISPLAY_CHAIN$h,
  DOMAIN_TITLE: DOMAIN_TITLE$h,
  HISTORY_TYPES: HISTORY_TYPES$h,
  HYPERION_URL: HYPERION_URL$e,
  KEY_PREFIX: KEY_PREFIX$h,
  LIGHT_API: LIGHT_API$8,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$h,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$h
};

var DEFAULT_ENDPOINTS$i = ['https://fiotestnet.greymass.com', 'https://test.fio.eosusa.news'];
var TRANSACTIONS_ENDPOINTS$i = ['https://fiotestnet.greymass.com', 'https://test.fio.eosusa.news'];
var ACTIONS_ENDPOINTS$i = ['https://fiotestnet.greymass.com', 'https://test.fio.eosusa.news'];
var API_URL$i = 'https://www.api.bloks.io/fio-test';
var CHAIN$i = 'fio-test';
var CHAIN_ID$i = 'b20901380af44ef59c5918439a1f9a41d83669020319a80574b804a5f95cbd7e';
var CHAIN_START_DATE$i = /*#__PURE__*/new Date('Mar 10, 2020');
var CORE_PRECISION$i = 9;
var CORE_SYMBOL$i = 'FIO';
var DISABLE_MEMO$1 = true;
var DISPLAY_CHAIN$i = 'FIO Test';
var DOMAIN_TITLE$i = 'FIO Test Bloks.io';
var HISTORY_TYPES$i = ['native', 'hyperion'];
var HYPERION_URL$f = 'https://test.fio.eosusa.news';
var KEY_PREFIX$i = 'FIO';
var PROVIDER_ENDPOINTS$i = /*#__PURE__*/generateProviderEndpoints(CHAIN_ID$i, ACTIONS_ENDPOINTS$i);
var VOTING_ENABLED$g = true;
var constants$i = {
  ACTIONS_ENDPOINTS: ACTIONS_ENDPOINTS$i,
  API_URL: API_URL$i,
  CHAIN: CHAIN$i,
  CHAIN_ID: CHAIN_ID$i,
  CHAIN_START_DATE: CHAIN_START_DATE$i,
  CORE_PRECISION: CORE_PRECISION$i,
  CORE_SYMBOL: CORE_SYMBOL$i,
  DEFAULT_ENDPOINTS: DEFAULT_ENDPOINTS$i,
  DISABLE_MEMO: DISABLE_MEMO$1,
  DISPLAY_CHAIN: DISPLAY_CHAIN$i,
  DOMAIN_TITLE: DOMAIN_TITLE$i,
  HISTORY_TYPES: HISTORY_TYPES$i,
  HYPERION_URL: HYPERION_URL$f,
  KEY_PREFIX: KEY_PREFIX$i,
  PROVIDER_ENDPOINTS: PROVIDER_ENDPOINTS$i,
  TRANSACTIONS_ENDPOINTS: TRANSACTIONS_ENDPOINTS$i,
  VOTING_ENABLED: VOTING_ENABLED$g
};

var _chainToNetworkConsta;

var chainToNetworkConstantsMap = (_chainToNetworkConsta = {
  eos: constants,
  bos: constants$1,
  wax: constants$2,
  telos: constants$3,
  proton: constants$4,
  local: constants$9,
  xec: constants$5,
  coffe: constants$7,
  jungle: constants$a,
  jungle3: constants$b,
  kylin: constants$c,
  remme: constants$6,
  fio: constants$8
}, _chainToNetworkConsta['eos-test'] = constants$d, _chainToNetworkConsta['bos-test'] = constants$e, _chainToNetworkConsta['telos-test'] = constants$f, _chainToNetworkConsta['proton-test'] = constants$g, _chainToNetworkConsta['wax-test'] = constants$h, _chainToNetworkConsta['fio-test'] = constants$i, _chainToNetworkConsta);

var Constants = /*#__PURE__*/function () {
  function Constants() {
    if (!!Constants.instance) {
      return Constants.instance;
    }
  }

  var _proto = Constants.prototype;

  _proto.initialize = /*#__PURE__*/function () {
    var _initialize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(chain) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!chain || !chainToNetworkConstantsMap[chain]) {
                chain = DEFAULT_CHAIN;
              }

              this.setNetwork(chain);
              this.setCommon(chain);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function initialize(_x) {
      return _initialize.apply(this, arguments);
    }

    return initialize;
  }();

  _proto.setNetwork = /*#__PURE__*/function () {
    var _setNetwork = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(chain) {
      var networkConstants;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              // const networkConstants = await import(`'./networks/${chain}`)
              networkConstants = chainToNetworkConstantsMap[chain];
              this.setConstants(networkConstants);
              this.setContract(chain, networkConstants.SYSTEM_DOMAIN);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function setNetwork(_x2) {
      return _setNetwork.apply(this, arguments);
    }

    return setNetwork;
  }();

  _proto.setCommon = function setCommon(chain) {
    var commonConstants = getCommonConstants(chain);
    this.setConstants(commonConstants);
  };

  _proto.setContract = function setContract(chain, systemDomain) {
    if (systemDomain === void 0) {
      systemDomain = DEFAULT_SYSTEM_DOMAIN;
    }

    var contractConstants = getContractConstants(chain, systemDomain);
    this.setConstants(contractConstants);
  };

  _proto.setConstants = function setConstants(newConstants) {
    for (var _i = 0, _Object$entries = Object.entries(newConstants); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _Object$entries[_i],
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
      this[key] = value;
    }
  };

  return Constants;
}();

var constants$j = /*#__PURE__*/new Constants();

exports.ANCHOR = ANCHOR;
exports.CLEOS = CLEOS;
exports.CLIO = CLIO;
exports.DEFAULT_CHAIN = DEFAULT_CHAIN;
exports.DEFAULT_SYMBOL = DEFAULT_SYMBOL;
exports.DEFAULT_SYSTEM_DOMAIN = DEFAULT_SYSTEM_DOMAIN;
exports.EOSAUTH = EOSAUTH;
exports.EOSC = EOSC;
exports.KEYCAT = KEYCAT;
exports.LEDGER = LEDGER;
exports.LEDGER_BLE = LEDGER_BLE;
exports.LEDGER_USB = LEDGER_USB;
exports.LEDGER_WEBHID = LEDGER_WEBHID;
exports.LEDGER_WEBUSB = LEDGER_WEBUSB;
exports.LYNX = LYNX;
exports.PROTON = PROTON;
exports.SCATTER_DESKTOP = SCATTER_DESKTOP;
exports.SCATTER_DESKTOP_MANUAL = SCATTER_DESKTOP_MANUAL;
exports.SCATTER_EXTENSION = SCATTER_EXTENSION;
exports.SIMPLEOS = SIMPLEOS;
exports.SQRL = SQRL;
exports.TREZOR = TREZOR;
exports.WAX_CLOUD_WALLET = WAX_CLOUD_WALLET;
exports.WOMBAT = WOMBAT;
exports.chainInfo = chainInfo;
exports.chainToNetworkConstantsMap = chainToNetworkConstantsMap;
exports.constants = constants$j;
exports.dapps = dapps;
exports.exchanges = exchanges;
exports.getContractConstants = getContractConstants;
exports.historyTypesFeatures = historyTypesFeatures;
//# sourceMappingURL=constants.cjs.development.js.map
