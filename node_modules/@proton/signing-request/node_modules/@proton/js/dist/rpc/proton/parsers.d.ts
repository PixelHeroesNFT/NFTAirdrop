import * as z from 'zod';
export declare enum Status {
    PENDING = "pending",
    SUCCESS = "success",
    FAIL = "fail",
    PROCESSING = "processing"
}
export declare const accountParser: z.ZodString;
export declare const authorizationParser: z.ZodObject<{
    actor: z.ZodString;
    permission: z.ZodString;
}, {
    strict: true;
}, {
    actor: string;
    permission: string;
}>;
export declare type Authorization = z.infer<typeof authorizationParser>;
export declare const rawTransactionParser: z.ZodObject<{
    expiration: z.ZodString;
    ref_block_num: z.ZodNumber;
    ref_block_prefix: z.ZodNumber;
    max_net_usage_words: z.ZodNumber;
    max_cpu_usage_ms: z.ZodNumber;
    delay_sec: z.ZodNumber;
    context_free_actions: z.ZodArray<z.ZodAny>;
    transaction_extensions: z.ZodArray<z.ZodAny>;
}, {
    strict: true;
}, {
    expiration: string;
    ref_block_num: number;
    ref_block_prefix: number;
    max_net_usage_words: number;
    max_cpu_usage_ms: number;
    delay_sec: number;
    context_free_actions: any[];
    transaction_extensions: any[];
}>;
export declare const generateAuthParser: z.ZodObject<{
    signer: z.ZodObject<{
        actor: z.ZodString;
        permission: z.ZodString;
    }, {
        strict: true;
    }, {
        actor: string;
        permission: string;
    }>;
    signatures: z.ZodArray<z.ZodString>;
    transaction: z.ZodObject<{
        expiration: z.ZodString;
        ref_block_num: z.ZodNumber;
        ref_block_prefix: z.ZodNumber;
        max_net_usage_words: z.ZodNumber;
        max_cpu_usage_ms: z.ZodNumber;
        delay_sec: z.ZodNumber;
        context_free_actions: z.ZodArray<z.ZodAny>;
        transaction_extensions: z.ZodArray<z.ZodAny>;
    } & {
        actions: z.ZodArray<z.ZodObject<{
            account: z.ZodString;
            name: z.ZodString;
            data: z.ZodObject<{
                time: z.ZodString;
                protonAccount: z.ZodString;
            }, {
                strict: true;
            }, {
                time: string;
                protonAccount: string;
            }>;
            authorization: z.ZodArray<z.ZodObject<{
                actor: z.ZodString;
                permission: z.ZodString;
            }, {
                strict: true;
            }, {
                actor: string;
                permission: string;
            }>>;
        }, {
            strict: true;
        }, {
            account: string;
            name: string;
            data: {
                time: string;
                protonAccount: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }>>;
    }, import("zod/lib/src/helpers/objectUtil").objectUtil.MergeObjectParams<{
        strict: true;
    }, {
        strict: true;
    }>, {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        transaction_extensions: any[];
        actions: {
            account: string;
            name: string;
            data: {
                time: string;
                protonAccount: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
    }>;
}, {
    strict: true;
}, {
    signer: {
        actor: string;
        permission: string;
    };
    signatures: string[];
    transaction: {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        transaction_extensions: any[];
        actions: {
            account: string;
            name: string;
            data: {
                time: string;
                protonAccount: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
    };
}>;
export declare type GenerateAuth = z.infer<typeof generateAuthParser>;
export declare const generateAddressBodyParser: z.ZodObject<{
    coin: z.ZodString;
    wallet: z.ZodString;
} & {
    signer: z.ZodObject<{
        actor: z.ZodString;
        permission: z.ZodString;
    }, {
        strict: true;
    }, {
        actor: string;
        permission: string;
    }>;
    signatures: z.ZodArray<z.ZodString>;
    transaction: z.ZodObject<{
        expiration: z.ZodString;
        ref_block_num: z.ZodNumber;
        ref_block_prefix: z.ZodNumber;
        max_net_usage_words: z.ZodNumber;
        max_cpu_usage_ms: z.ZodNumber;
        delay_sec: z.ZodNumber;
        context_free_actions: z.ZodArray<z.ZodAny>;
        transaction_extensions: z.ZodArray<z.ZodAny>;
    } & {
        actions: z.ZodArray<z.ZodObject<{
            account: z.ZodString;
            name: z.ZodString;
            data: z.ZodObject<{
                time: z.ZodString;
                protonAccount: z.ZodString;
            }, {
                strict: true;
            }, {
                time: string;
                protonAccount: string;
            }>;
            authorization: z.ZodArray<z.ZodObject<{
                actor: z.ZodString;
                permission: z.ZodString;
            }, {
                strict: true;
            }, {
                actor: string;
                permission: string;
            }>>;
        }, {
            strict: true;
        }, {
            account: string;
            name: string;
            data: {
                time: string;
                protonAccount: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }>>;
    }, import("zod/lib/src/helpers/objectUtil").objectUtil.MergeObjectParams<{
        strict: true;
    }, {
        strict: true;
    }>, {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        transaction_extensions: any[];
        actions: {
            account: string;
            name: string;
            data: {
                time: string;
                protonAccount: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.MergeObjectParams<{
    strict: true;
}, {
    strict: true;
}>, {
    signer: {
        actor: string;
        permission: string;
    };
    signatures: string[];
    transaction: {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        transaction_extensions: any[];
        actions: {
            account: string;
            name: string;
            data: {
                time: string;
                protonAccount: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
    };
    coin: string;
    wallet: string;
}>;
export declare type GenerateAddressBody = z.infer<typeof generateAddressBodyParser>;
export declare const generateAddressResponse: z.ZodObject<{
    id: z.ZodString;
    address: z.ZodString;
    coin: z.ZodString;
    wallet: z.ZodString;
    memo: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    memo?: string | undefined;
    coin: string;
    wallet: string;
    id: string;
    address: string;
}>;
export declare type GenerateAddressResponse = z.infer<typeof generateAddressResponse>;
export declare const depositBodyParser: z.ZodObject<{
    id: z.ZodString;
    externalId: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    type: z.ZodString;
    hash: z.ZodString;
    coin: z.ZodString;
    wallet: z.ZodString;
}, {
    strict: true;
}, {
    externalId?: string | undefined;
    type: string;
    coin: string;
    wallet: string;
    id: string;
    hash: string;
}>;
export declare type DepositBody = z.infer<typeof depositBodyParser>;
export declare const withdrawBodyParser: z.ZodObject<{
    signer: z.ZodObject<{
        actor: z.ZodString;
        permission: z.ZodString;
    }, {
        strict: true;
    }, {
        actor: string;
        permission: string;
    }>;
    signatures: z.ZodArray<z.ZodString>;
    transaction: z.ZodObject<{
        expiration: z.ZodString;
        ref_block_num: z.ZodNumber;
        ref_block_prefix: z.ZodNumber;
        max_net_usage_words: z.ZodNumber;
        max_cpu_usage_ms: z.ZodNumber;
        delay_sec: z.ZodNumber;
        context_free_actions: z.ZodArray<z.ZodAny>;
        transaction_extensions: z.ZodArray<z.ZodAny>;
    } & {
        actions: z.ZodArray<z.ZodObject<{
            account: z.ZodString;
            name: z.ZodLiteral<"transfer">;
            data: z.ZodObject<{
                from: z.ZodString;
                to: z.ZodLiteral<any>;
                quantity: z.ZodString;
                memo: z.ZodString;
            }, {
                strict: true;
            }, {
                to?: any;
                from: string;
                quantity: string;
                memo: string;
            }>;
            authorization: z.ZodArray<z.ZodObject<{
                actor: z.ZodString;
                permission: z.ZodString;
            }, {
                strict: true;
            }, {
                actor: string;
                permission: string;
            }>>;
        }, {
            strict: true;
        }, {
            account: string;
            name: "transfer";
            data: {
                to?: any;
                from: string;
                quantity: string;
                memo: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }>>;
    }, import("zod/lib/src/helpers/objectUtil").objectUtil.MergeObjectParams<{
        strict: true;
    }, {
        strict: true;
    }>, {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        transaction_extensions: any[];
        actions: {
            account: string;
            name: "transfer";
            data: {
                to?: any;
                from: string;
                quantity: string;
                memo: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
    }>;
    quoteId: z.ZodString;
}, {
    strict: true;
}, {
    signer: {
        actor: string;
        permission: string;
    };
    signatures: string[];
    transaction: {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        transaction_extensions: any[];
        actions: {
            account: string;
            name: "transfer";
            data: {
                to?: any;
                from: string;
                quantity: string;
                memo: string;
            };
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
    };
    quoteId: string;
}>;
export declare type WithdrawBody = z.infer<typeof withdrawBodyParser>;
export declare const withdrawMetalResponseParser: z.ZodObject<{
    success: z.ZodBoolean;
    id: z.ZodString;
}, {
    strict: true;
}, {
    id: string;
    success: boolean;
}>;
export declare type WithdrawMetalResponse = z.infer<typeof withdrawMetalResponseParser>;
export declare const withdrawHistoryMetalSwapParser: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodString;
    amount: z.ZodString;
    currency: z.ZodString;
    network: z.ZodString;
    created: z.ZodString;
    withdrawalAddress: z.ZodString;
    withdrawalHash: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    withdrawalHash?: string | undefined;
    id: string;
    status: string;
    amount: string;
    currency: string;
    network: string;
    created: string;
    withdrawalAddress: string;
}>;
export declare type WithdrawHistoryMetalSwap = z.infer<typeof withdrawHistoryMetalSwapParser>;
export declare const withdrawHistoryMetalResponseParser: z.ZodObject<{
    swaps: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        status: z.ZodString;
        amount: z.ZodString;
        currency: z.ZodString;
        network: z.ZodString;
        created: z.ZodString;
        withdrawalAddress: z.ZodString;
        withdrawalHash: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        withdrawalHash?: string | undefined;
        id: string;
        status: string;
        amount: string;
        currency: string;
        network: string;
        created: string;
        withdrawalAddress: string;
    }>>;
    page: z.ZodNumber;
    pageSize: z.ZodNumber;
    numberOfElements: z.ZodNumber;
    totalPages: z.ZodNumber;
    totalElements: z.ZodNumber;
}, {
    strict: true;
}, {
    swaps: {
        withdrawalHash?: string | undefined;
        id: string;
        status: string;
        amount: string;
        currency: string;
        network: string;
        created: string;
        withdrawalAddress: string;
    }[];
    page: number;
    pageSize: number;
    numberOfElements: number;
    totalPages: number;
    totalElements: number;
}>;
export declare type WithdrawHistoryMetalResponse = z.infer<typeof withdrawHistoryMetalResponseParser>;
declare const ExtendedAssetParser: z.ZodObject<{
    quantity: z.ZodString;
    contract: z.ZodString;
}, {
    strict: true;
}, {
    quantity: string;
    contract: string;
}>;
export declare type ExtendedAsset = z.infer<typeof ExtendedAssetParser>;
export declare const wrapStartParser: z.ZodObject<{
    balance: z.ZodObject<{
        quantity: z.ZodString;
        contract: z.ZodString;
    }, {
        strict: true;
    }, {
        quantity: string;
        contract: string;
    }>;
    txid: z.ZodString;
    coin: z.ZodString;
    wallet: z.ZodString;
    deposit_address: z.ZodString;
    confirmations: z.ZodNumber;
}, {
    strict: true;
}, {
    coin: string;
    wallet: string;
    balance: {
        quantity: string;
        contract: string;
    };
    txid: string;
    deposit_address: string;
    confirmations: number;
}>;
export declare type WrapStart = z.infer<typeof wrapStartParser>;
export declare const wrapSetConfParser: z.ZodObject<{
    wrap_hash: z.ZodString;
    confirmations: z.ZodNumber;
}, {
    strict: true;
}, {
    confirmations: number;
    wrap_hash: string;
}>;
export declare type WrapSetConf = z.infer<typeof wrapSetConfParser>;
export declare const wrapParser: z.ZodObject<{
    index: z.ZodNumber;
    proton_account: z.ZodString;
    balance: z.ZodObject<{
        quantity: z.ZodString;
        contract: z.ZodString;
    }, {
        strict: true;
    }, {
        quantity: string;
        contract: string;
    }>;
    txid: z.ZodString;
    coin: z.ZodString;
    wallet: z.ZodString;
    deposit_address: z.ZodString;
    status: z.ZodNativeEnum<typeof Status>;
    finish_txid: z.ZodString;
    wrap_hash: z.ZodString;
    confirmations: z.ZodNumber;
}, {
    strict: true;
}, {
    coin: string;
    wallet: string;
    status: Status;
    balance: {
        quantity: string;
        contract: string;
    };
    txid: string;
    deposit_address: string;
    confirmations: number;
    wrap_hash: string;
    index: number;
    proton_account: string;
    finish_txid: string;
}>;
export declare type Wrap = z.infer<typeof wrapParser>;
export declare const transactionParser: z.ZodObject<{
    coin: z.ZodString;
    wallet: z.ZodString;
    blockhash: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
    txid: z.ZodString;
    type: z.ZodString;
    height: z.ZodUnion<[z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>, z.ZodNull]>;
    confirmations: z.ZodNumber;
    state: z.ZodString;
    entries: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        wallet: z.ZodString;
        value: z.ZodNumber;
        valueString: z.ZodString;
        isChange: z.ZodBoolean;
    }, {
        strict: true;
    }, {
        wallet: string;
        address: string;
        value: number;
        valueString: string;
        isChange: boolean;
    }>>;
    outputs: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        wallet: z.ZodString;
        fromWallet: z.ZodString;
        value: z.ZodNumber;
        valueString: z.ZodString;
        coinbase: z.ZodBoolean;
    }, {
        strict: true;
    }, {
        wallet: string;
        address: string;
        value: number;
        valueString: string;
        fromWallet: string;
        coinbase: boolean;
    }>>;
    value: z.ZodNumber;
    valueString: z.ZodString;
    pending: z.ZodBoolean;
    instant: z.ZodBoolean;
}, {
    strict: true;
}, {
    blockhash?: string | null | undefined;
    height?: number | null | undefined;
    type: string;
    coin: string;
    wallet: string;
    value: number;
    valueString: string;
    txid: string;
    confirmations: number;
    state: string;
    entries: {
        wallet: string;
        address: string;
        value: number;
        valueString: string;
        isChange: boolean;
    }[];
    outputs: {
        wallet: string;
        address: string;
        value: number;
        valueString: string;
        fromWallet: string;
        coinbase: boolean;
    }[];
    pending: boolean;
    instant: boolean;
}>;
export declare type Transaction = z.infer<typeof transactionParser>;
export declare const addressParser: z.ZodObject<{
    index: z.ZodNumber;
    account: z.ZodString;
    coin: z.ZodString;
    address: z.ZodString;
    wallet: z.ZodString;
    address_hash: z.ZodString;
}, {
    strict: true;
}, {
    account: string;
    coin: string;
    wallet: string;
    address: string;
    index: number;
    address_hash: string;
}>;
export declare type Address = z.infer<typeof addressParser>;
export declare const otcOrderResponseParser: z.ZodObject<{
    success: z.ZodBoolean;
    transaction_id: z.ZodString;
    errormsg: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    errormsg?: string | undefined;
    success: boolean;
    transaction_id: string;
}>;
export declare type OtcOrderResponse = z.infer<typeof otcOrderResponseParser>;
export declare const otcQuoteBodyParser: z.ZodObject<{
    baseAmount: z.ZodNumber;
    baseSymbol: z.ZodString;
    quoteSymbol: z.ZodString;
}, {
    strict: true;
}, {
    baseAmount: number;
    baseSymbol: string;
    quoteSymbol: string;
}>;
export declare type OtcQuoteBody = z.infer<typeof otcQuoteBodyParser>;
export declare const otcQuoteResponseParser: z.ZodObject<{
    success: z.ZodBoolean;
    token: z.ZodString;
    qty: z.ZodNumber;
    errormsg: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    errormsg?: string | undefined;
    success: boolean;
    token: string;
    qty: number;
}>;
export declare type OtcQuoteResponse = z.infer<typeof otcQuoteResponseParser>;
export declare const rateParser: z.ZodObject<{
    counterCurrency: z.ZodString;
    price: z.ZodNumber;
    priceChangePercent: z.ZodNumber;
    marketCap: z.ZodNumber;
    volume: z.ZodNumber;
    timestamp: z.ZodNumber;
}, {
    strict: true;
}, {
    counterCurrency: string;
    price: number;
    priceChangePercent: number;
    marketCap: number;
    volume: number;
    timestamp: number;
}>;
export declare type Rate = z.infer<typeof rateParser>;
export declare const exchangeRateParser: z.ZodObject<{
    contract: z.ZodString;
    symbol: z.ZodString;
    rank: z.ZodNumber;
    rates: z.ZodArray<z.ZodObject<{
        counterCurrency: z.ZodString;
        price: z.ZodNumber;
        priceChangePercent: z.ZodNumber;
        marketCap: z.ZodNumber;
        volume: z.ZodNumber;
        timestamp: z.ZodNumber;
    }, {
        strict: true;
    }, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }>>;
}, {
    strict: true;
}, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}>;
export declare type ExchangeRate = z.infer<typeof exchangeRateParser>;
export declare const exchangeRatesParser: z.ZodArray<z.ZodObject<{
    contract: z.ZodString;
    symbol: z.ZodString;
    rank: z.ZodNumber;
    rates: z.ZodArray<z.ZodObject<{
        counterCurrency: z.ZodString;
        price: z.ZodNumber;
        priceChangePercent: z.ZodNumber;
        marketCap: z.ZodNumber;
        volume: z.ZodNumber;
        timestamp: z.ZodNumber;
    }, {
        strict: true;
    }, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }>>;
}, {
    strict: true;
}, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}>>;
export declare type ExchangeRates = z.infer<typeof exchangeRatesParser>;
export declare const withdrawalFeeQuoteParser: z.ZodObject<{
    quoteId: z.ZodString;
    estimatedFee: z.ZodString;
    currency: z.ZodString;
    network: z.ZodString;
}, {
    strict: true;
}, {
    currency: string;
    network: string;
    quoteId: string;
    estimatedFee: string;
}>;
export declare type WithdrawalFeeQuote = z.infer<typeof withdrawalFeeQuoteParser>;
export {};
